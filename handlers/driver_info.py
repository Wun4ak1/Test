# handlers/driver_info.py
import os
import json
from aiogram import Bot, Router, types, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from states import DriverInfo
#from start import notify_admins_about_new_driver
from utils import save_driver, load_drivers, send_or_edit_text, USER_STATUS_PATH, DRIVER_PATH
from keyboards.start_kb import start_kb
#from config import TOKEN
TOKEN = os.getenv("TOKEN")
ADMINS = os.getenv("ADMINS")
if ADMINS:
    ADMINS = {int(i) for i in ADMINS.split(",")}
else:
    ADMINS = set()

import logging

bot = Bot(token=TOKEN)
router = Router()

@router.callback_query(F.data == "is_driver_approved_check")
async def check_driver_info_callback(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    drivers = load_drivers()
    driver = drivers.get(user_id)

    # üîé –ê–≥–∞—Ä “≥–∞–π–¥–æ–≤—á–∏ –º–∞—ä–ª—É–º–æ—Ç —Ç–æ–ø—à–∏—Ä–º–∞–≥–∞–Ω –±—û–ª—Å–∞
    if not driver or not driver.get("driver_data") and not driver.get("profile"):
        await callback.message.answer("‚ùóÔ∏è–°–∏–∑ “≥–∞–ª–∏ –º–∞—ä–ª—É–º–æ—Ç –∫–∏—Ä–∏—Ç–º–∞–¥–∏–Ω–≥–∏–∑. –ò–ª—Ç–∏–º–æ—Å, –∞–≤–≤–∞–ª –∏—Å–º–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥.")
        await state.set_state(DriverInfo.name)
        return

    # üîÑ –ê–≥–∞—Ä –º–∞—ä–ª—É–º–æ—Ç –±–æ—Ä, –ª–µ–∫–∏–Ω “≥–∞–ª–∏ —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–º–∞–≥–∞–Ω –±—û–ª—Å–∞
    await callback.message.answer("‚è≥ “≤–æ–∑–∏—Ä–¥–∞ —Å–∏–∑–Ω–∏–Ω–≥ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑ –∞–¥–º–∏–Ω —Ç–æ–º–æ–Ω–∏–¥–∞–Ω –∫—û—Ä–∏–± —á–∏“õ–∏–ª—è–ø—Ç–∏. –ò–ª—Ç–∏–º–æ—Å –∫—É—Ç–∏–± —Ç—É—Ä–∏–Ω–≥.")
    await state.clear()

@router.callback_query(F.data == "haydovchi")
async def start_driver_info_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ò–ª—Ç–∏–º–æ—Å, –∏—Å–º–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:")
    await state.set_state(DriverInfo.name)

@router.message(Command("haydovchi"))
async def start_driver_info(message: types.Message, state: FSMContext):
    await message.answer("–ò–ª—Ç–∏–º–æ—Å, –∏—Å–º–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:")
    await state.set_state(DriverInfo.name)

@router.message(DriverInfo.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —Ç—û–ª–∏“õ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–º–∞—Å–∞–ª–∞–Ω: +998901234567):")
    await state.set_state(DriverInfo.phone)

@router.message(DriverInfo.car_model)
async def get_car_model(message: types.Message, state: FSMContext):
    await state.update_data(car_model=message.text)
    await message.answer("–ú–∞—à–∏–Ω–∞ —Ä–∞“õ–∞–º–∏ (–º–∞—Å–∞–ª–∞–Ω: 01A123BC):")
    await state.set_state(DriverInfo.car_number)

    #@router.message(DriverInfo.car_number)
    #async def get_car_number(message: types.Message, state: FSMContext):
    #    await state.update_data(car_number=message.text)
    #    await message.answer("–ô—û–ª–æ–≤—á–∏–ª–∞—Ä —É—á—É–Ω –Ω–µ—á–∞ —û—Ä–∏–Ω –±–æ—Ä?")
    #    await state.set_state(DriverInfo.seat_count)

    # @router.message(DriverInfo.seat_count)

@router.message(DriverInfo.car_number)
async def get_car_number(message: types.Message, state: FSMContext):
#    await state.update_data(seat_count=message.text)
    await state.update_data(car_number=message.text)
    data = await state.get_data()
    msg = (
        f"–ò—Å–º: {data['name']}\n\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n\n"
        f"–ú–∞—à–∏–Ω–∞: {data['car_model']} ({data['car_number']})\n\n"
        #f"–é—Ä–∏–Ω–ª–∞—Ä —Å–æ–Ω–∏: {data['seat_count']}\n\n"
        "‚úÖ –¢–∞—Å–¥–∏“õ–ª–∞–π—Å–∏–∑–º–∏?"
    )
    buttons = [
        [types.InlineKeyboardButton(text="‚úÖ “≤–∞", callback_data="confirm_yes"), 
         types.InlineKeyboardButton(text="‚ùå –ô—û“õ", callback_data="confirm_no")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(msg, reply_markup=keyboard)
    await state.set_state(DriverInfo.confirm)

@router.callback_query(lambda c: c.data in ["confirm_yes", "confirm_no"])
async def confirm_driver_info(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "confirm_yes":
        data = await state.get_data()
        user_id = callback_query.from_user.id
        save_driver_profile(user_id, data)
        msg = (
            f"“≤–∞–π–¥–æ–≤—á–∏ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏:\n\n"
            f"–ò—Å–º: {data['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"–ú–∞—à–∏–Ω–∞: {data['car_model']} ({data['car_number']})\n\n"
            #f"–é—Ä–∏–Ω–ª–∞—Ä —Å–æ–Ω–∏: {data['seat_count']}\n\n"
            "‚úÖ –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑ —Å–∞“õ–ª–∞–Ω–¥–∏!\n–ê–¥–º–∏–Ω —Ç–∞—Å–¥–∏“ì–∏–Ω–∏ –∫—É—Ç–∏–Ω–≥."
        )

        await send_or_edit_text(callback_query.message, msg, reply_markup=None)

        # ‚úÖ –ê–¥–º–∏–Ω–ª–∞—Ä–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à
        await notify_admins_about_new_driver(user_id, data)
    else:
        await send_or_edit_text(callback_query.message, "–ú–∞—ä–ª—É–º–æ—Ç –∫–∏—Ä–∏—Ç–∏—à –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏.", reply_markup=None)

    await state.clear()

def save_driver_profile(user_id, profile_data):
    drivers = load_drivers()
    user_id = str(user_id)

    # –§–∞“õ–∞—Ç –∫–µ—Ä–∞–∫–ª–∏ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –æ–ª–∞–º–∏–∑
    clean_profile = {
        "name": profile_data.get("name"),
        "phone": profile_data.get("phone"),
        "car_model": profile_data.get("car_model"),
        "car_number": profile_data.get("car_number"),
        "seat_count": "4" #profile_data.get("seat_count")
    }

    existing_data = drivers.get(user_id, {})

    drivers[user_id] = {
        **existing_data,
        "id": user_id,
        "status": "pending_approval",
        "profile": clean_profile,
        "rating": existing_data.get("rating", 0),
        "approved": existing_data.get("approved", False),
        "balance": 0,  # –Ø–Ω–≥–∏ –±–∞–ª–∞–Ω—Å
        "bonus": 0  # –Ø–Ω–≥–∏ –±–æ–Ω—É—Å
    }

    save_driver(drivers)

# ‚úÖ 1. “≤–∞–π–¥–æ–≤—á–∏ –º–∞—ä–ª—É–º–æ—Ç –∫–∏—Ä–∏—Ç–≥–∞—á
def save_driver_pending(user_id, driver_data):
    users = load_drivers()
    user_id = str(user_id)

    users[user_id] = {
        "status": "pending_approval",
        "driver_data": driver_data
    }

    save_driver(users)
    logging.info(f"“≤–∞–π–¥–æ–≤—á–∏ {user_id} –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏ —Ç–∞—Å–¥–∏“õ –∫—É—Ç–º–æ“õ–¥–∞.")

# ‚úÖ 2. –ê–¥–º–∏–Ω —Ç–∞—Å–¥–∏“õ–ª–∞–≥–∞–Ω–¥–∞ (–º–∏—Å–æ–ª —É—á—É–Ω –∞–¥–º–∏–Ω –º–µ–Ω—é–¥–∞):
def approve_driver(user_id: str):
    users = load_drivers()

    if user_id not in users or users[user_id].get("status") != "pending_approval":
        logging.warning(f"“≤–∞–π–¥–æ–≤—á–∏ {user_id} —Ç–æ–ø–∏–ª–º–∞–¥–∏ —ë–∫–∏ —Ç–∞—Å–¥–∏“õ–ª–∞—à–≥–∞ —Ç–∞–π—ë—Ä —ç–º–∞—Å.")
        return False

    # ‚úÖ driver_data —ë–∫–∏ profile –Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à
    driver_data = users[user_id].get("driver_data") or users[user_id].get("profile")
    if not driver_data:
        logging.error(f"–ü—Ä–æ—Ñ–∏–ª—å –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏ —Ç–æ–ø–∏–ª–º–∞–¥–∏: {user_id}")
        return False

    users[user_id]["status"] = "driver"
    users[user_id]["profile"] = driver_data
    users[user_id]["rating"] = 0
    users[user_id]["orders"] = []
    users[user_id]["approved"] = True
    users[user_id]["balance"] = 40000
    users[user_id]["bonus"] = 0

    save_driver(users)
    logging.info(f"“≤–∞–π–¥–æ–≤—á–∏ {user_id} —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–¥–∏ –≤–∞ balance/bonus “õ—û—à–∏–ª–¥–∏.")
    return True

# ‚úÖ 2. approval panel –æ—á–∏—à
@router.callback_query(lambda c: c.data == "approve_panel")
async def open_admin_panel(callback_query: CallbackQuery):
    user_id = int(callback_query.from_user.id)
    logging.info(f"Callback data: {callback_query.data}")
    print(f"Callback: {callback_query.data}")
    #if str(user_id) not in ADMINS:
    if user_id not in ADMINS:
        await callback_query.message.answer("üö´ –°–∏–∑–¥–∞ —Ä—É—Ö—Å–∞—Ç –π—û“õ.")
        return

    drivers = load_drivers()
    pending_drivers = {
        k: v for k, v in drivers.items()
        if v.get("status") == "pending_approval" and not v.get("approved", False)
    }

    if not pending_drivers:
        await callback_query.message.answer("‚è≥ –¢–∞—Å–¥–∏“õ –∫—É—Ça—ë—Ç–≥–∞–Ω “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä –π—û“õ.")
        return

    for driver_id, data in pending_drivers.items():
        profile = data.get("profile") or data.get("driver_data")
        if profile is None:
            logging.warning(f"–ü—Ä–æ—Ñ–∏–ª—å —Ç–æ–ø–∏–ª–º–∞–¥–∏: driver_id={driver_id}, data={data}")
            await callback_query.message.answer(f"‚ö†Ô∏è –•–∞—Ç–æ–ª–∏–∫: “≤–∞–π–¥–æ–≤—á–∏ {driver_id} –ø—Ä–æ—Ñ–∏–ª–∏ —Ç–æ–ø–∏–ª–º–∞–¥–∏.")
            continue
        text = (
            f"üë§ –ò—Å–º: {profile['name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {profile['phone']}\n"
            f"üöò –ú–∞—à–∏–Ω–∞: {profile['car_model']} ({profile['car_number']})\n"
            #f"üí∫ –ñ–æ–π–ª–∞—Ä —Å–æ–Ω–∏: {profile['seat_count']}"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –¢–∞—Å–¥–∏“õ–ª–∞—à", callback_data=f"approve_driver:{driver_id}")],
            [InlineKeyboardButton(text="‚ùå –†–∞–¥ —ç—Ç–∏—à", callback_data=f"reject_driver:{user_id}")]
        ])

        await callback_query.message.answer(text, reply_markup=keyboard)

# ‚úÖ 3. Callback: –¢–∞—Å–¥–∏“õ–ª–∞—à —Ç—É–≥–º–∞—Å–∏
@router.callback_query(F.data.startswith("approve_driver:"))
async def approve_driver_callback(callback_query: CallbackQuery, state: FSMContext):
    driver_id = callback_query.data.split(":")[1]

    logging.info(f"TASDIQLASH BOSILDI: {driver_id}")  # üëà “ö—û—à–∏–º—á–∞ –ª–æ–≥
    print(f"TASDIQLANDI: {driver_id}")

    success = approve_driver(driver_id)  # üîÅ –ú–∞—Ä–∫–∞–∑–∏–π approve_driver() –∏—à–ª–∞—Ç–∏–ª–∞–¥–∏

    if success:
        await callback_query.message.answer(f"‚úÖ “≤–∞–π–¥–æ–≤—á–∏ {driver_id} –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–¥–∏.")
        try:
            await bot.send_message(
                int(driver_id),
                text="‚úÖ –°–∏–∑ –∞–¥–º–∏–Ω —Ç–æ–º–æ–Ω–∏–¥–∞–Ω —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–¥–∏–Ω–≥–∏–∑!\n–≠–Ω–¥–∏ –∞—Å–æ—Å–∏–π –º–µ–Ω—é–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω.",
                reply_markup=start_kb(int(driver_id))
            )
        except Exception as e:
            await callback_query.message.answer(f"‚ö†Ô∏è –•–∞–±–∞—Ä —é–±–æ—Ä–∏–± –±—û–ª–º–∞–¥–∏: {e}")
    else:
        await callback_query.message.answer(f"‚ùå “≤–∞–π–¥–æ–≤—á–∏ {driver_id} —Ç–æ–ø–∏–ª–º–∞–¥–∏ —ë–∫–∏ —Ç–∞—Å–¥–∏“õ–ª–∞—à–≥–∞ —Ç–∞–π—ë—Ä —ç–º–∞—Å.")

# –∞–¥–º–∏–Ω–ª–∞—Ä–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à
async def notify_admins_about_new_driver(driver_id: int, driver_data: dict):
    text = (
        f"üÜï –¢–∞—Å–¥–∏“õ –∫—É—Ça—ë—Ç–≥–∞–Ω —è–Ω–≥–∏ “≥–∞–π–¥–æ–≤—á–∏:\n\n"
        f"üë§ –ò—Å–º: {driver_data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {driver_data['phone']}\n"
        f"üöò –ú–∞—à–∏–Ω–∞: {driver_data['car_model']} ({driver_data['car_number']})\n"
#        f"üí∫ –ñ–æ–π–ª–∞—Ä —Å–æ–Ω–∏: {driver_data['seat_count']}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[ 
        [InlineKeyboardButton(text="‚úÖ –¢–∞—Å–¥–∏“õ–ª–∞—à", callback_data=f"approve_driver:{driver_id}")]
    ])

    for admin_id in ADMINS:
        try:
            # –ê–¥–º–∏–Ω–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à
            await bot.send_message(admin_id, text, reply_markup=keyboard)
        except Exception as e:
            logging.error(f"‚ö†Ô∏è –ê–¥–º–∏–Ω–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏–± –±—û–ª–º–∞–¥–∏ ({admin_id}): {e}")
