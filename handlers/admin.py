# handlers/start.py
import logging
import json
from aiogram import Bot, Router, F, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from datetime import datetime
import sys
import os
sys.path.append(os.path.abspath(os.path.dirname(__file__)))
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from config import TOKEN #ADMINS
ADMINS = os.getenv("ADMINS")
if ADMINS:
    ADMINS = {int(i) for i in ADMINS.split(",")}
else:
    ADMINS = set()
from states import AdminStates
from keyboards.start_kb import start_kb
from utils import (
    recommend_multiple_drivers_to_passenger,
    get_driver_order, save_passenger_order, send_or_edit_text,
    load_drivers, USER_STATUS_PATH, PASSENGER_PATH, DRIVER_PATH
)
bot = Bot(token=TOKEN)

router = Router()

@router.message(Command("–∞–¥–º–∏–Ω–≥–∞_–º—É—Ä–æ–∂–∞–∞—Ç"))
async def contact_admin(message: Message, state: FSMContext):
    await message.answer(
        "–ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏—à —É—á—É–Ω –º—É—Ä–æ–∂–∞–∞—Ç–∏–Ω–≥–∏–∑–Ω–∏ —ë–∑–∏–± “õ–æ–ª–¥–∏—Ä–∏–Ω–≥. –£ —Ç–µ–∑ –æ—Ä–∞–¥–∞ –∂–∞–≤–æ–± –±–µ—Ä–∞–¥–∏. ‚úçÔ∏è"
    )
    await state.set_state(AdminStates.awaiting_admin_message)

@router.callback_query(lambda c: c.data == "admin_contact")
async def handle_admin_contact(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "–ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏—à —É—á—É–Ω –º—É—Ä–æ–∂–∞–∞—Ç–∏–Ω–≥–∏–∑–Ω–∏ —ë–∑–∏–Ω–≥. ‚úçÔ∏è"
    )
    await state.set_state(AdminStates.awaiting_admin_message)

# –ê–¥–º–∏–Ω–≥–∞ –º—É—Ä–æ–∂–∞–∞—Ç —é–±–æ—Ä–∏—à
@router.message(StateFilter(AdminStates.awaiting_admin_message))
async def forward_to_admin(message: Message, state: FSMContext):
    logging.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º: {AdminStates.admin_replying}")
    # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏

    user = message.from_user

    text = (
        f"üì© <b>–Ø–Ω–≥–∏ –º—É—Ä–æ–∂–∞–∞—Ç:</b>\n"
        f"<b>–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏:</b> {user.full_name} (@{user.username or '–π—û“õ'})\n"
        f"<b>ID:</b> <code>{user.id}</code>\n\n"
        f"<b>–•–∞–±–∞—Ä:</b>\n{message.text}"
    )

    # –ê–¥–º–∏–Ω–ª–∞—Ä–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à
    for admin_id in ADMINS:
        try:
            await message.bot.send_message(
                admin_id,
                text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úçÔ∏è –ñ–∞–≤–æ–± –±–µ—Ä–∏—à", callback_data=f"reply_to_{user.id}")]
                ])
            )
        except Exception as e:
            logging.error(f"–ê–¥–º–∏–Ω–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏–± –±—û–ª–º–∞–¥–∏: {e}")

    # –ñ–∞–≤–æ–±
    await message.answer("‚úÖ –ú—É—Ä–æ–∂–∞–∞—Ç–∏–Ω–≥–∏–∑ –∞–¥–º–∏–Ω–≥–∞ —é–±–æ—Ä–∏–ª–¥–∏. –ò–ª—Ç–∏–º–æ—Å, –∂–∞–≤–æ–±–Ω–∏ –∫—É—Ç–∏–Ω–≥.")

    # –ú—É—Ä–æ–∂–∞–∞—Ç–≥–∞ –∂–∞–≤–æ–± –±–µ—Ä–∏—à —É—á—É–Ω —Ö–æ–ª–∞—Ç–Ω–∏ –∞–Ω–∏“õ–ª–∞–π–º–∏–∑
    await state.update_data(reply_to_user_id=user.id)  # User ID —Å–∞“õ–ª–∞—à
    await state.set_state(AdminStates.awaiting_admin_message)

@router.callback_query(lambda c: c.data.startswith("reply_to_") and str(c.from_user.id) in map(str, ADMINS))
async def handle_admin_reply_button(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.data.split("_")[-1]
    await state.update_data(reply_to_user_id=int(user_id))
    await callback_query.message.answer("‚úçÔ∏è –ñ–∞–≤–æ–± –º–∞—Ç–Ω–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:")
    await state.set_state(AdminStates.admin_replying)

# –ê–¥–º–∏–Ω–Ω–∏–Ω–≥ –∂–∞–≤–æ–±–∏–Ω–∏ —é–±–æ—Ä–∏—à
@router.message(StateFilter(AdminStates.admin_replying))
async def send_admin_reply(message: types.Message, state: FSMContext):
    data = await state.get_data()  # –•–æ–ª–∞—Ç–¥–∞–Ω –º–∞—ä–ª—É–º–æ—Ç –æ–ª–∏—à
    user_id = data.get("reply_to_user_id")  # –ñ–∞–≤–æ–± –±–µ—Ä–∏–ª–∞–¥–∏–≥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ ID

    if user_id:
        try:
            await message.bot.send_message(
                user_id,
                f"üì© –ê–¥–º–∏–Ω–¥–∞–Ω –∂–∞–≤–æ–±:\n\n{message.text}"
            )
            await message.answer("‚úÖ –ñ–∞–≤–æ–± —é–±–æ—Ä–∏–ª–¥–∏.")
        except Exception as e:
            await message.answer(f"‚ùå –•–∞—Ç–æ–ª–∏–∫ —é–±–æ—Ä–∏—à–¥–∞: {e}")
    else:
        await message.answer("‚ùå –ñ–∞–≤–æ–± —é–±–æ—Ä–∏—à —É—á—É–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ ID —Ç–æ–ø–∏–ª–º–∞–¥–∏.")

    await state.clear()  # –•–æ–ª–∞—Ç–Ω–∏ —Ç–æ–∑–∞–ª–∞—à