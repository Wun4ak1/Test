# handlers/utils.py
import sys
import os
import json
from aiogram import Bot, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta, time as dtime
import logging
from config import TOKEN
# 'handlers' –ø–∞–ø–∫–∞—Å–∏–Ω–∏ Python –∏–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–∏–≥–∞ “õ—û—à–∏—à
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from location import calculate_price

# –ë–æ—Ç–Ω–∏ —è—Ä–∞—Ç–∏—à
bot = Bot(token=TOKEN)

# –õ–æ–π–∏“≥–∞ –ø–∞–ø–∫–∞—Å–∏–Ω–∏–Ω–≥ –π—û–ª–∏–Ω–∏ –æ–ª–∏—à
project_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
data_dir = os.path.join(project_dir, 'data')

# JSON —Ñ–∞–π–ª–ª–∞—Ä –π—û–ª–ª–∞—Ä–∏
USER_STATUS_PATH = os.path.join(data_dir, 'user_statuses.json')
PASSENGER_PATH = os.path.join(data_dir, 'passenger.json')
DRIVER_PATH = os.path.join(data_dir, 'driver.json')

#logging.basicConfig(level=logging.INFO, filename="bot.log", filemode="a", format="%(asctime)s - %(levelname)s - %(message)s")
logging.basicConfig(level=logging.INFO)
# === STATUS VA ORDER MA'LUMOTLAR ===
def load_users():
    try:
        with open(USER_STATUS_PATH, "r", encoding='utf-8') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_users(users):
    with open(USER_STATUS_PATH, "w", encoding='utf-8') as file:
        json.dump(users, file, ensure_ascii=False, indent=2)

def get_user_status(user_id):
    users = load_users()
    return users.get(str(user_id), {}).get("status", "new_user")

def save_user_status(user_id, status):
    users = load_users()
    user_id = str(user_id)

    if user_id not in users or not isinstance(users[user_id], dict):
        users[user_id] = {}

    current_status = users[user_id].get("status", "new_user")

    # –Ø–Ω–≥–∏ —Ä–æ–ª—å–ª–∞—Ä (passenger, driver) “≥–æ–ª–∞—Ç–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à –≤–∞ —Å–∞“õ–ª–∞—à
    if status in ["new_user", "passenger", "driver"]:
        users[user_id]["status"] = status
    else:
        if current_status in ["passenger", "driver"]:
            users[user_id]["status"] = current_status
        else:
            users[user_id]["status"] = "new_user"

    save_users(users)
    logging.info(f"–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ {user_id} —Å—Ç–∞—Ç—É—Å–∏ —è–Ω–≥–∏–ª–∞–Ω–¥–∏: {users[user_id]['status']}")

# JSON —Ñ–∞–π–ª–Ω–∏ —û“õ–∏—à
def load_json(file_path):
    if not os.path.exists(file_path):
        return {}  # –ê–≥–∞—Ä —Ñ–∞–π–ª –π—û“õ –±—û–ª—Å–∞, –±—û—à –ª—É“ì–∞—Ç “õ–∞–π—Ç–∞—Ä–∏–ª–∞–¥–∏
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read().strip()
            if not content:
                return {}
            return json.loads(content)
    except json.JSONDecodeError:
        # –ê–≥–∞—Ä —Ñ–∞–π–ª –±—É–∑–∏–ª–≥–∞–Ω –±—û–ª—Å–∞, –∞–≤—Ç–æ–º–∞—Ç–∏–∫ —Ç–æ–∑–∞–ª–∞–Ω–∞–¥–∏
        return {}

# JSON —Ñ–∞–π–ª–≥–∞ –º–∞—ä–ª—É–º–æ—Ç–Ω–∏ —Å–∞“õ–ª–∞—à
def save_json(file_path, data):
    try:
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
    except Exception as e:
        logging.error(f"‚ùó JSON —Ñ–∞–π–ª–Ω–∏ —Å–∞“õ–ª–∞—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫: {e}")

# –§–∞–π–ª –º–∞–≤–∂—É–¥–ª–∏–≥–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à –≤–∞ —è—Ä–∞—Ç–∏—à
def ensure_json_files_exist():
    os.makedirs(data_dir, exist_ok=True)
    for path in [USER_STATUS_PATH, PASSENGER_PATH, DRIVER_PATH]:
        if not os.path.exists(path):
            logging.warning(f"–§–∞–π–ª —Ç–æ–ø–∏–ª–º–∞–¥–∏, —è—Ä–∞—Ç–∏–ª—è–ø—Ç–∏: {path}")
            save_json(path, {})
        else:
            logging.info(f"–§–∞–π–ª –º–∞–≤–∂—É–¥: {path}")

# === passenger drivers MA'LUMOTLAR ===
# ‚úÖ 4. utils.py ‚Äî load/save —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä
def load_passenger():
    try:
        with open(PASSENGER_PATH, "r", encoding='utf-8') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_passenger(users):
    with open(PASSENGER_PATH, "w", encoding='utf-8') as file:
        json.dump(users, file, ensure_ascii=False, indent=4)

def load_drivers():
    try:
        with open(DRIVER_PATH, "r", encoding='utf-8') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_driver(data):
    with open(DRIVER_PATH, "w", encoding='utf-8') as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

# === save_order MA'LUMOTLAR get_ ===
def get_passenger_order(user_id):
    try:
        with open(PASSENGER_PATH, 'r', encoding="utf-8") as file:
            data = json.load(file)
            user_data = data.get(str(user_id))
            if user_data:
                order = user_data.get("order")
                return order
            return None
    except FileNotFoundError:
        return None

def save_passenger_order(user_id, data):
    try:
        if os.path.exists(PASSENGER_PATH):
            with open(PASSENGER_PATH, 'r', encoding='utf-8') as file:
                all_data = json.load(file)
        else:
            all_data = {}

        user_id = str(user_id)

        # –ê–≥–∞—Ä user –º–∞–≤–∂—É–¥ –±—û–ª–º–∞—Å–∞, –±–æ—à–∏–¥–∞–Ω —Ç—É–∑–∞–º–∏–∑
        if user_id not in all_data:
            all_data[user_id] = {
                "order": {},
                "order_history": []
            }

        # ‚úÖ –ê–≥–∞—Ä "order" –∫–∞–ª–∏—Ç–∏ –π—û“õ –±—û–ª—Å–∞
        if "order" not in all_data[user_id]:
            all_data[user_id]["order"] = {}

        # ‚úÖ order –∏—á–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ —Å–∞“õ–ª–∞—à
        for key, value in data.items():
            all_data[user_id]["order"][key] = value

        with open(PASSENGER_PATH, 'w', encoding='utf-8') as file:
            json.dump(all_data, file, ensure_ascii=False, indent=4)

    except Exception as e:
        logging.error(f"save_passenger_order —Ö–∞—Ç–æ–ª–∏–∫: {e}")

def get_driver_order(user_id):
    try:
        with open(DRIVER_PATH, 'r', encoding="utf-8") as file:
            data = json.load(file)
            user_data = data.get(str(user_id))
            if user_data:
                order = user_data.get("order")
                return order
            return None
    except FileNotFoundError:
        return None

def save_driver_order(user_id, data):
    try:
        user_id = str(user_id)

        # 1. –î—Ä–∞–π–≤–µ—Ä –±—É–π—Ä—É—Ç–º–∞–ª–∞—Ä–∏–Ω–∏ —é–∫–ª–∞—à
        if os.path.exists(DRIVER_PATH):
            with open(DRIVER_PATH, 'r', encoding='utf-8') as file:
                all_data = json.load(file)
        else:
            all_data = {}

        logging.debug(f"[save_driver_order] –Æ–∫–ª–∞–Ω–≥–∞–Ω –¥—Ä–∞–π–≤–µ—Ä –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏: {all_data.get(user_id)}")

        # 2. –ê–≥–∞—Ä user –º–∞–≤–∂—É–¥ –±—û–ª–º–∞—Å–∞, —è—Ä–∞—Ç–∏—à
        if user_id not in all_data:
            all_data[user_id] = {
                "order": {},
                "order_history": []
            }
            logging.debug(f"[save_driver_order] –Ø–Ω–≥–∏ user “õ—û—à–∏–ª–¥–∏: {user_id}")
        elif "order" not in all_data[user_id]:
            all_data[user_id]["order"] = {}
            logging.debug(f"[save_driver_order] –ú–∞–≤–∂—É–¥ user, –ª–µ–∫–∏–Ω 'order' –π—û“õ —ç–¥–∏: {user_id}")

        # 3. –ú–∞–≤–∂—É–¥ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ order –≥–∞ “õ—û—à–∏—à
        for key, value in data.items():
            all_data[user_id]["order"][key] = value

        # 4. available_seats –Ω–∏ —û–∑ –ø—Ä–æ—Ñ–∏–ª–¥–∞–Ω –æ–ª–∏—à
        profile = all_data[user_id].get("profile", {})
        seat_count = profile.get("seat_count")
        if seat_count:
            all_data[user_id]["order"]["available_seats"] = int(seat_count)
            logging.debug(f"[save_driver_order] available_seats “õ—û—à–∏–ª–¥–∏: {seat_count}")
        else:
            logging.warning(f"[save_driver_order] seat_count —Ç–æ–ø–∏–ª–º–∞–¥–∏ ‚Äî ID: {user_id}")

        # 5. –Ø–Ω–≥–∏–ª–∞–Ω–≥–∞–Ω driver_orders.json –Ω–∏ —Å–∞“õ–ª–∞—à
        with open(DRIVER_PATH, 'w', encoding='utf-8') as file:
            json.dump(all_data, file, ensure_ascii=False, indent=4)

        logging.info(f"[save_driver_order] –ë—É—é—Ä—Ç–º–∞ —Å–∞“õ–ª–∞–Ω–¥–∏ ‚Äî ID: {user_id}")

    except Exception as e:
        logging.error(f"save_driver_order —Ö–∞—Ç–æ–ª–∏–∫: {e}")

def load_orders(user_type: str):
    return load_passenger() if user_type == "passenger" else load_drivers()

# === –£–ú–£–ú–ò–ô –°–ê“ö–õ–ê–® –§–£–ù–ö–¶–ò–Ø–°–ò ===
REQUIRED_FIELDS = ["to_region", "to_district", "from_region", "from_district", "date", "time"]

async def save_order(user_id, user_type, bot):
    user_id = str(user_id)
    file_path = DRIVER_PATH if user_type == "driver" else PASSENGER_PATH

    # üìÇ –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ —é–∫–ª–∞—à
    if os.path.exists(file_path):
        with open(file_path, 'r', encoding='utf-8') as file:
            data = json.load(file)
    else:
        data = {}

    # –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ –±–æ—Ä–ª–∏–≥–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à
    if user_id not in data:
        print(f"‚ùå –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —Ç–æ–ø–∏–ª–º–∞–¥–∏: {user_id}")
        return None

    user_data = data[user_id]
    
    # üë§ –ê–≥–∞—Ä –π—û–ª–æ–≤—á–∏ –±—û–ª—Å–∞, —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–∏ —é–±–æ—Ä–≥–∞–Ω–ª–∏–≥–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à
    if user_type == "passenger":
        if not user_data.get("phone"):  # –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏ –π—û“õ
            phone_request_keyboard = ReplyKeyboardMarkup(
                resize_keyboard=True,
                one_time_keyboard=True,
                keyboard=[
                    [KeyboardButton(text="üìû –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–Ω–∏ —é–±–æ—Ä–∏—à", request_contact=True)],
                    [KeyboardButton(text="‚èπ “ö—û–ª–¥–∞ –∫–∏—Ä–∏—Ç–∏—à")]
                ]
            )
            user_data["waiting_for_phone"] = True

            # üìù JSON'–≥–∞ "waiting_for_phone"–Ω–∏ —è–Ω–≥–∏–ª–∞—à
            with open(file_path, 'w', encoding='utf-8') as file:
                json.dump(data, file, ensure_ascii=False, indent=4)

            await bot.send_message(
                chat_id=user_id,
                text="üì± –ò–ª—Ç–∏–º–æ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —ë–∑–∏–± —ë–∫–∏ —Ç—É–≥–º–∞ –æ—Ä“õ–∞–ª–∏ —é–±–æ—Ä–∏–Ω–≥:",
                reply_markup=phone_request_keyboard
            )
            return None  # –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏ —û—Ä–Ω–∞—Ç–∏–ª–º–∞–≥–∞–Ω–¥–∞, –æ—Ä–¥–µ—Ä–Ω–∏ —Å–∞“õ–ª–∞–º–∞—Å–ª–∏–∫

    # ‚úÖ –≠–Ω–¥–∏ order –º–∞—ä–ª—É–º–æ—Ç–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à
    order_data = user_data.get("order", {})
    print(f"‚úÖ –ú–∞—ä–ª—É–º–æ—Ç —Ç–æ–ø–∏–ª–¥–∏: {order_data}")

    # –ê–≥–∞—Ä –æ—Ä–¥–µ—Ä –±—û–ª—Å–∞ –≤–∞ —Ç—û–ª–∏“õ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä –π—û“õ –±—û–ª—Å–∞, —Ö–∞—Ç–æ —Ö–∞–±–∞—Ä–∏–Ω–∏ —é–±–æ—Ä–∏—à
    if not order_data:
        print("‚ùå Order –º–∞—ä–ª—É–º–æ—Ç–∏ –π—û“õ.")
        return None

    if not all(order_data.get(field) for field in REQUIRED_FIELDS):
        print(f"‚ùå –¢—û–ª–∏“õ –º–∞—ä–ª—É–º–æ—Ç –π—û“õ: {order_data}")
        return None

    # üÜï –Ø–Ω–≥–∏ order_number ‚Äî —Ç–∞—Ä–∏—Ö–¥–∞–≥–∏ –æ—Ä–¥–µ—Ä–ª–∞—Ä —Å–æ–Ω–∏–≥–∞ –∞—Å–æ—Å–ª–∞–Ω–≥–∞–Ω
    order_number = len(user_data.get("order_history", [])) + 1

    # üïì “≤–æ–∑–∏—Ä–≥–∏ –≤–∞“õ—Ç
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –Ø–Ω–≥–∏ –æ—Ä–¥–µ—Ä —è—Ä–∞—Ç–∞–º–∏–∑ (–Ω–∞—Ä—Ö –±–∏–ª–∞–Ω)
    new_order = {
        **order_data,
        "order_number": order_number,
        "status": "new",
        "status_timestamps": {
            "created": timestamp
        }
    }

    # ‚úÖ –ê–≥–∞—Ä —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ –π—û–ª–æ–≤—á–∏ –±—û–ª—Å–∞, –Ω–∞—Ä—Ö–Ω–∏ “≥–∏—Å–æ–±–ª–∞–π–º–∏–∑
    if user_type == "passenger":
        calculated_price = calculate_price(
            order_data.get("from_region", ""),
            order_data.get("to_region", ""),
            order_data.get("from_district", ""),
            order_data.get("to_district", "")
        )
        new_order["price"] = calculated_price  # üëâ –ù–∞—Ä—Ö “õ—û—à–∏–ª–¥–∏

    user_data["order"] = new_order

    # üßπ –í–∞“õ—Ç–∏–Ω—á–∞–ª–∏–∫ –º–∞–π–¥–æ–Ω–ª–∞—Ä–Ω–∏ —Ç–æ–∑–∞–ª–∞—à
    for key in REQUIRED_FIELDS + ["chosen_driver_id"]:
        user_data.pop(key, None)

    # üîí –°–∞“õ–ª–∞—à
    with open(file_path, 'w', encoding='utf-8') as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

    print("‚úÖ –°–∞“õ–ª–∞—à —è–∫—É–Ω–ª–∞–Ω–¥–∏.")

    # –ê–≥–∞—Ä –π—û–ª–æ–≤—á–∏ –±—û–ª—Å–∞, –º–æ—Å “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä–Ω–∏ —Ç–∞–≤—Å–∏—è “õ–∏–ª–∏—à
    if user_type == "passenger":
        await recommend_multiple_drivers_to_passenger(
            passenger_id=user_id,
            user_order=new_order,
            bot=bot
        )

    # –ê–≥–∞—Ä “≥–∞–π–¥–æ–≤—á–∏ –æ—Ä–¥–µ—Ä–Ω–∏ –±–µ—Ä–≥–∞–Ω –±—û–ª—Å–∞, –π—û–ª–æ–≤—á–∏–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à (status != "done")
    if user_type == "driver":
        with open(PASSENGER_PATH, 'r', encoding='utf-8') as file:
            all_passengers = json.load(file)

        for p_id, p_data in all_passengers.items():
            passenger_order = p_data.get("order", {})
            if not passenger_order:
                continue
            # –ú–æ—Å–ª–∞—à –≤–∞ —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—à–∏—Ä–∏—à
            if is_match(new_order, passenger_order) and p_data.get("status") != "arrived":
                await recommend_multiple_drivers_to_passenger(
                    passenger_id=p_id,
                    user_order=passenger_order,
                    bot=bot
                )

    return new_order

def get_order(user_id, user_type):
    filename = DRIVER_PATH if user_type == "driver" else PASSENGER_PATH
    
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            orders = json.load(f)
            return orders.get(str(user_id), {})
    return {}

async def match_and_notify(user_id: str, user_type: str, new_order: dict, bot):
    other_type = "driver" if user_type == "passenger" else "passenger"
    from_path = DRIVER_PATH if other_type == "driver" else PASSENGER_PATH

    if not os.path.exists(from_path):
        return

    with open(from_path, 'r', encoding='utf-8') as file:
        other_data = json.load(file)

    for other_id, other_user_data in other_data.items():
        other_order = other_user_data.get("order")
        if other_order and is_match(new_order, other_order):
            print(f"üîÅ –ú–æ—Å {other_type} —Ç–æ–ø–∏–ª–¥–∏: {other_id}")
            await notify_driver_and_passenger(
                driver_id=other_id if user_type == "passenger" else user_id,
                passenger_id=user_id if user_type == "passenger" else other_id,
                driver_order=other_order if user_type == "passenger" else new_order,
                passenger_order=new_order if user_type == "passenger" else other_order,
                bot=bot
            )
            update_driver_seats(other_id)

def clear_passenger_order(user_id):
    passengers = load_passenger()
    user_id = str(user_id)

    if user_id in passengers:
        passengers[user_id].pop("order", None)
        save_passenger(passengers)
        logging.info(f"{user_id} –π—û–ª–æ–≤—á–∏ –±—É—é—Ä—Ç–º–∞—Å–∏ —û—á–∏—Ä–∏–ª–¥–∏.")

def clear_driver_order(user_id):
    drivers = load_drivers()
    user_id = str(user_id)

    if user_id in drivers:
        drivers[user_id].pop("order", None)
        save_driver(drivers)
        logging.info(f"{user_id} “≥–∞–π–¥–æ–≤—á–∏ –±—É—é—Ä—Ç–º–∞—Å–∏ —û—á–∏—Ä–∏–ª–¥–∏.")

# 2. user_statuses.json –∏—á–∏–¥–∞ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —Ä–æ–ª–∏ —Å–∞“õ–ª–∞–Ω–∞—ë—Ç–≥–∞–Ω–∏–Ω–∏ –∏–Ω–æ–±–∞—Ç–≥–∞ –æ–ª–∏–±, —à—É–Ω–≥–∞ “õ–∞—Ä–∞–± “õ–∞–π—Å–∏ —Ñ–∞–π–ª–≥–∞ —ë–∑–∏—à–Ω–∏ –∞–Ω–∏“õ–ª–∞—à
def get_user_role(user_id: int):
    statuses = load_json(USER_STATUS_PATH)
    return statuses.get(str(user_id), {}).get("status") # "role"

def get_all_passenger_orders():
    users = load_passenger()
    all_orders = []

    for user_id, user_data in users.items():
        order = user_data.get("order")
        if order:
            all_orders.append({
                "user_id": user_id,
                "from": order.get("from_district"),
                "to": order.get("to_district"),
                "date": order.get("date"),
                "time": order.get("time"),
                "order_number": order.get("order_number", 0)
            })

    return all_orders

# ----------------------------------------------------------------------------------------

# ‚úÖ 2. –≠–Ω–≥ –º–æ—Å –∫–µ–ª–∞–¥–∏–≥–∞–Ω –π—û–ª–æ–≤—á–∏–ª–∞—Ä–Ω–∏ “õ–∏–¥–∏—Ä–∏—à —Ñ—É–Ω–∫—Ü–∏—è—Å–∏:
def find_matching_passengers(driver_orders):
    driver_order = driver_orders.get("order") if "order" in driver_orders else driver_orders

    driver_from = driver_order.get("from_district", "").strip().lower()
    driver_to = driver_order.get("to_district", "").strip().lower()
    driver_date = driver_order.get("date")
    driver_time = driver_order.get("time")

    passengers = load_passenger()
    matched_passengers = []

    for user_id, passenger_data in passengers.items():
        order = passenger_data.get("order")
        if not order:
            continue

        passenger_from = order.get("from_district", "").strip().lower()
        passenger_to = order.get("to_district", "").strip().lower()
        passenger_date = order.get("date")
        passenger_time = order.get("time")

        if (
            passenger_from == driver_from and
            passenger_to == driver_to and
            passenger_date == driver_date and
            passenger_time == driver_time
        ):
            matched_passengers.append({
                "user_id": user_id,
                "from": order.get("from_district"),
                "to": order.get("to_district"),
                "date": order.get("date"),
                "time": order.get("time"),
                "order_number": order.get("order_number", 0)
            })

    return matched_passengers

# “≤–∞–π–¥–æ–≤—á–∏–≥–∞ –±—É–π—Ä—É—Ç–º–∞ —Ç–∞“õ–¥–∏–º “õ–∏–ª–∏—à
async def offer_order_to_driver(driver_id, order_details):
    # “≤–∞–π–¥–æ–≤—á–∏–≥–∞ –±—É–π—Ä—É—Ç–º–∞ —Ç–∞“õ–¥–∏–º “õ–∏–ª–∏—à —É—á—É–Ω —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à
    # –ê–π—Ç–∞–π–ª–∏–∫, –±–æ—Ç–≥–∞ —Ö–∞–±–∞—Ä —ë–∑–∏–ª–≥–∞–Ω –¥–µ–± “õ–∞–±—É–ª “õ–∏–ª–∞–º–∏–∑
    message = f"–°–∏–∑–≥–∞ —è–Ω–≥–∏ –±—É–π—Ä—É—Ç–º–∞ —Ç–∞“õ–¥–∏–º —ç—Ç–∏–ª–¥–∏:\n{order_details}"
    # –ú–∞—Å–∞–ª–∞–Ω, —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–∏ —Ö–∞–±–∞—Ä–≥–∞ “õ—û—à–∏—à
    await send_message(driver_id, message)

async def send_message(user_id, text, reply_markup=None, parse_mode=None):
    try:
        await bot.send_message(
            chat_id=user_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode  # ‚úÖ —ç–Ω–¥–∏–ª–∏–∫–¥–∞ parse_mode “õ–∞–±—É–ª “õ–∏–ª–∞–¥–∏
        )
    except Exception as e:
        print(f"‚ùå send_message error: {e}")

# –ô—û–ª–æ–≤—á–∏ –±—É–π—Ä—É—Ç–º–∞—Å–∏–≥–∞ –º–æ—Å “≥–∞–π–¥–æ–≤—á–∏ —Ç–∞–≤—Å–∏—è “õ–∏–ª–∏—à
def recommend_driver(user_order):
    try:
        # “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä–Ω–∏–Ω–≥ –±—É–π—Ä—É—Ç–º–∞—Å–∏
        with open(DRIVER_PATH, 'r', encoding='utf-8') as file:
            drivers_data = json.load(file)
        
        suitable_drivers = []

        # –ô—û–ª–æ–≤—á–∏ –±—É–π—Ä—É—Ç–º–∞—Å–∏–≥–∞ –º–æ—Å “≥–∞–π–¥–æ–≤—á–∏ “õ–∏–¥–∏—Ä–∏—à
        for driver in drivers_data.values():
            if (driver["from_district"] == user_order["from_district"] and 
                driver["to_district"] == user_order["to_district"] and
                driver["time_type"] == user_order["time_type"] and
                (driver["date"] == user_order["date"] or driver["date"] is None) and
                driver["available_seats"] > 0):
                suitable_drivers.append(driver)
        
        # –ú–æ—Å “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä–¥–∞–Ω —Ä–µ–π—Ç–∏–Ω–≥ –≤–∞ —û—Ä–∏–Ω —Å–æ–Ω–∏–≥–∞ –∫—û—Ä–∞ —Ç–∞—Ä—Ç–∏–±–ª–∞—à
        #suitable_drivers.sort(key=lambda x: (x["available_seats"], -x["rating"]))
        suitable_drivers.sort(key=lambda d: (-d.get("rating", 0), d.get("available_seats", 0)))


        # –≠–Ω–≥ –º–æ—Å “≥–∞–π–¥–æ–≤—á–∏
        if suitable_drivers:
            return suitable_drivers[0]
        else:
            return None
    except FileNotFoundError:
        return None

async def recommend_multiple_drivers_to_passenger(passenger_id, user_order, bot):
    try:
        # üõí “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–∏ —é–∫–ª–∞–π–º–∏–∑
        with open(DRIVER_PATH, 'r', encoding='utf-8') as file:
            drivers_data = json.load(file)
        
        # üìÅ –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä —Å—Ç–∞—Ç—É—Å–∏–Ω–∏ —é–∫–ª–∞—à
        status_data = load_json(USER_STATUS_PATH)
        passenger_info = status_data.get(str(passenger_id), {})
        invited_users = passenger_info.get("invited_users", [])

        matched_drivers = []

        # üöï “≤–∞—Ä –±–∏—Ä “≥–∞–π–¥–æ–≤—á–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∞–º–∏–∑
        for driver_id, driver_data in drivers_data.items():
            profile = driver_data.get("profile", {})
            # “≤–∞–π–¥–æ–≤—á–∏–Ω–∏–Ω–≥ –æ—Ä–¥–µ—Ä –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–∏ –æ–ª–∏—à
            order = driver_data.get("order", {})
            
            # –ê–≥–∞—Ä –æ—Ä–¥–µ—Ä —Ç—û–ª–∏“õ –±—û–ª–º–∞—Å–∞, –±—É “≥–∞–π–¥–æ–≤—á–∏–Ω–∏ —û—Ç–∫–∞–∑–∏–± —é–±–æ—Ä–∏—à
            if not all(order.get(field) for field in ["from_district", "to_district", "date", "time"]):
                print(f"‚ö†Ô∏è “≤–∞–π–¥–æ–≤—á–∏ –º–∞—ä–ª—É–º–æ—Ç–∏ —Ç—û–ª–∏“õ —ç–º–∞—Å, ID={driver_id}")
                continue

            # “≤–∞–π–¥–æ–≤—á–∏ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–∏ —Ç—û–ª–¥–∏—Ä–∏—à
            driver_info = {
                "name": profile.get("name", "–ù–æ–º–∞—ä–ª—É–º"),
                "phone": profile.get("phone", "–ù–æ–º–∞—ä–ª—É–º"),
                "car_model": profile.get("car_model", "–ù–æ–º–∞—ä–ª—É–º"),
                "car_number": profile.get("car_number", "–ù–æ–º–∞—ä–ª—É–º"),
                "from_district": order.get("from_district", "–ù–æ–º–∞—ä–ª—É–º"),
                "to_district": order.get("to_district", "–ù–æ–º–∞—ä–ª—É–º"),
                "date": order.get("date", "–ù–æ–º–∞—ä–ª—É–º"),
                "time": order.get("time", "–ù–æ–º–∞—ä–ª—É–º"),
                "available_seats": order.get("available_seats", 0),
                "rating": driver_data.get("rating", 0),
                "id": driver_id,
                "accepted_passenger_count": len(order.get("accepted_passengers", []))
            }

            # “≤–∞–π–¥–æ–≤—á–∏ –º–∞—ä–ª—É–º–æ—Ç–∏ —Ç—û–ª–∏“õ –±—û–ª—Å–∞, –º–æ—Å –∫–µ–ª–≥–∞–Ω “≥–∞–π–¥–æ–≤—á–∏–Ω–∏ qo'shish
            if is_match(user_order, order) and order.get("available_seats", 0) > 0:
                matched_drivers.append(driver_info)

        # –ê–≥–∞—Ä –º–æ—Å –∫–µ–ª–∞–¥–∏–≥–∞–Ω “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä —Ç–æ–ø–∏–ª–º–∞—Å–∞
        if not matched_drivers:
            await bot.send_message(passenger_id, "‚è≥ –ú–æ—Å “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä —Å–æ–ª–∏—à—Ç–∏—Ä–∏–ª–º–æ“õ–¥–∞,\n–¢–µ–∑ —Ñ—É—Ä—Å–∞—Ç–¥–∞ –°–∏–∑ –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∞–º–∏–∑.")
            return

        # üö´ –¢–∞–Ω–ª–∞–Ω–≥–∞–Ω “≥–∞–π–¥–æ–≤—á–∏–Ω–∏ —á–∏“õ–∞—Ä–∏–± —Ç–∞—à–ª–∞—à
        chosen_driver_id = user_order.get("chosen_driver_id")
        if chosen_driver_id:
            matched_drivers = [
                driver for driver in matched_drivers if driver["id"] != chosen_driver_id
            ]

        if not matched_drivers:
            await bot.send_message(passenger_id, "‚è≥ –¢–∞–Ω–ª–∞–Ω–≥–∞–Ω “≥–∞–π–¥–æ–≤—á–∏ –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–± –±—û–ª–º–∞–¥–∏.\n–ë–æ—à“õ–∞ “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä “õ–∏–¥–∏—Ä–∏–ª–º–æ“õ–¥–∞.")
            return
        
        # üß† “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä–Ω–∏ –≥—É—Ä—É“≥–ª–∞—Ä–≥–∞ –∞–∂—Ä–∞—Ç–∏—à
        invited_drivers = [d for d in matched_drivers if d["id"] in invited_users]
        new_drivers = [d for d in matched_drivers if d["accepted_passenger_count"] == 0 and d["id"] not in invited_users]
        experienced_drivers = [d for d in matched_drivers if d["accepted_passenger_count"] > 0 and d["id"] not in invited_users]

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        invited_drivers.sort(key=lambda d: (-d.get("rating", 0), -d.get("available_seats", 0)))
        new_drivers.sort(key=lambda d: (-d.get("rating", 0), -d.get("available_seats", 0)))
        experienced_drivers.sort(key=lambda d: (-d.get("rating", 0), -d.get("available_seats", 0)))

        # üî• –Ø–∫—É–Ω–∏–π —Ç–∞—Ä—Ç–∏–±
        matched_drivers = invited_drivers + new_drivers + experienced_drivers

        # üì§ “≤–∞—Ä –±–∏—Ä–∏–Ω–∏ –π—û–ª–æ–≤—á–∏–≥–∞ “õ–∞–π—Ç–∞ —é–±–æ—Ä–∏—à
        text = f"üîÑ –¢–∞–Ω–ª–∞–Ω–≥–∞–Ω “≥–∞–π–¥–æ–≤—á–∏ –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–± –±—û–ª–º–∞–¥–∏.\n–°–∏–∑–≥–∞ –±–æ—à“õ–∞ –º–æ—Å {len(matched_drivers)} —Ç–∞ “≥–∞–π–¥–æ–≤—á–∏ —Ç–æ–ø–∏–ª–¥–∏:\n\n"

        for i, driver in enumerate(matched_drivers, start=1):
            driver_text = f"{i}. üöò –ú–æ—Å “≥–∞–π–¥–æ–≤—á–∏:\n\n"
            driver_text += f"üë§ “≤–∞–π–¥–æ–≤—á–∏: {driver['name']}\n"
            #f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {driver['phone']}\n"
            driver_text += f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª: {driver['car_model']}\n"
            #f"üî¢ –î–∞–≤–ª–∞—Ç —Ä–∞“õ–∞–º–∏: {driver['car_number']}\n"
            driver_text += f"üìç –ô—û–Ω–∞–ª–∏—à: {driver['from_district']} ‚ûù {driver['to_district']}\n"
            driver_text += f"üìÖ –°–∞–Ω–∞: {driver['date']}\n"
            driver_text += f"‚è∞ –í–∞“õ—Ç: {driver['time']}\n"
            #f"üÜî ID: {driver['id']}\n"

            # –ê–≥–∞—Ä –±—É —Ç–∞–∫–ª–∏—Ñ “õ–∏–ª–∏–Ω–≥–∞–Ω “≥–∞–π–¥–æ–≤—á–∏ –±—û–ª—Å–∞, –±–µ–ª–≥–∏–ª–∞–π–º–∏–∑
            if driver['id'] in invited_users:
                driver_text += "‚≠ê –ë—É “≥–∞–π–¥–æ–≤—á–∏ —Å–∏–∑–Ω–∏–Ω–≥ —Ç–∞–∫–ª–∏—Ñ–∏–Ω–≥–∏–∑ –æ—Ä“õ–∞–ª–∏ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–≥–∞–Ω!\n"

            # ‚úÖ –¢–∞—Å–¥–∏“õ–ª–∞—à —Ç—É–≥–º–∞—Å–∏
            choose_btn = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚úÖ –®—É “≥–∞–π–¥–æ–≤—á–∏–Ω–∏ —Ç–∞–Ω–ª–∞—à",
                    callback_data=f"choose_driver_{driver['id']}"
                )]
            ])

            # –Æ–±–æ—Ä–∏—à
            await bot.send_message(
                chat_id=passenger_id,
                text=driver_text,
                reply_markup=choose_btn,
                parse_mode="HTML"
            )

    except Exception as e:
        print(f"‚ùå recommend_multiple_drivers_to_passenger —Ö–∞—Ç–æ–ª–∏–∫: {e}")
        await bot.send_message(passenger_id, "‚ùå –•–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏. –ò–ª—Ç–∏–º–æ—Å, –∫–µ–π–∏–Ω—Ä–æ“õ “õ–∞–π—Ç–∞ —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥.")
# ----------------------------------------------------------------------------------------

time_ranges = {
    "morning": ("06:00", "11:59"),
    "afternoon": ("12:00", "15:59"),
    "evening": ("16:00", "19:59"),
    "night": ("20:00", "23:59"),
    "late_night": ("00:00", "05:59"),
}

def parse_time_str(time_str):
    """ HH:MM -> datetime.time """
    try:
        return datetime.strptime(time_str.strip(), "%H:%M").time()
    except Exception as e:
        print(f"‚ùå parse_time_str —Ö–∞—Ç–æ: {e}")
        return None

def get_range_label(start_time, end_time):
    """ –î–∏–∞–ø–∞–∑–æ–Ω–≥–∞ –º–æ—Å label'–Ω–∏ “õ–∞–π—Ç–∞—Ä–∞–¥–∏: morning, evening –≤–∞ “≥.–∫. """
    for label, (range_start, range_end) in time_ranges.items():
        rs = parse_time_str(range_start)
        re = parse_time_str(range_end)

        if rs == start_time and re == end_time:
            return label
    return None

def convert_to_exact_or_range_label(time_val):
    """
    –ê–≥–∞—Ä "HH:MM" –±—û–ª—Å–∞ ‚Äî –∞–Ω–∏“õ –≤–∞“õ—Ç
    –ê–≥–∞—Ä "HH:MM - HH:MM" –±—û–ª—Å–∞ ‚Äî –¥–∏–∞–ø–∞–∑–æ–Ω label'–≥–∞ –∞–π–ª–∞–Ω—Ç–∏—Ä–∏–ª–∞–¥–∏
    –ê–≥–∞—Ä "evening", "afternoon" –±—û–ª—Å–∞ ‚Äî —Ç—û“ì—Ä–∏–¥–∞–Ω-—Ç—û“ì—Ä–∏ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–∞–¥–∏
    """
    if "-" in time_val:
        parts = time_val.split("-")
        if len(parts) == 2:
            start = parse_time_str(parts[0])
            end = parse_time_str(parts[1])
            if start and end:
                label = get_range_label(start, end)
                if label:
                    return label
    elif ":" in time_val:
        return time_val.strip()
    elif time_val.strip() in time_ranges:
        return time_val.strip()

    return None

def is_time_match(time1, time2):
    print(f"üï∞ {time1} –≤–∞ {time2} —û—Ä—Ç–∞—Å–∏–¥–∞ —Å–æ–ª–∏—à—Ç–∏—Ä–∏—à")
    def parse_range(val):
        if "-" in val:
            start_str, end_str = val.split("-")
            start = parse_time_str(start_str)
            end = parse_time_str(end_str)
            return start, end
        elif val in time_ranges:
            start_str, end_str = time_ranges[val]
            return parse_time_str(start_str), parse_time_str(end_str)
        elif ":" in val:
            t = parse_time_str(val)
            return t, t
        return None, None

    t1_start, t1_end = parse_range(time1)
    t2_start, t2_end = parse_range(time2)

    if not (t1_start and t1_end and t2_start and t2_end):
        print("‚ùå –í–∞“õ—Ç–Ω–∏ –ø–∞—Ä—Å–ª–∞—à–¥–∞ –º—É–∞–º–º–æ")
        return False

    # –ê–≥–∞—Ä t1 –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ç2 –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏—á–∏–¥–∞ –±—û–ª—Å–∞
    latest_start = max(t1_start, t2_start)
    earliest_end = min(t1_end, t2_end)

    match = latest_start <= earliest_end
    print(f"üï∞ –î–∏–∞–ø–∞–∑–æ–Ω –º–æ—Å–ª–∏–≥–∏: {match}")
    return match

def is_match(order1, order2):
    from_district_match = order1.get("from_district") == order2.get("from_district")
    to_district_match = order1.get("to_district") == order2.get("to_district")
    to_region_match = order1.get("to_region") == order2.get("to_region")

    time1 = order1.get("time", "")
    time2 = order2.get("time", "")
    time_match = False  # –í–∞“õ—Ç–Ω–∏ –∞–≤–≤–∞–ª–¥–∞–Ω —û—Ç–∫–∞–∑–∏—à

    date1_str = order1.get("date")
    date2_str = order2.get("date")

    try:
        today = datetime.today().date()
        date1 = datetime.strptime(date1_str, "%Y-%m-%d").date()
        date2 = datetime.strptime(date2_str, "%Y-%m-%d").date()

        # –°–∞–Ω–∞–ª–∞—Ä–Ω–∏ –º–æ—Å–ª–∞—à—Ç–∏—Ä–∏—à: –∞–≥–∞—Ä –¥–∞—Ç–∞ –±—û–ª–º–∞—Å–∞, –≤–∞“õ—Ç –º–æ—Å–ª–∏–≥–∏ —Ç–µ–∫—à–∏—Ä–∏–ª–∞–¥–∏
        date_match = (
            date1 == date2 or  # –ê–≥–∞—Ä —Å–∞–Ω–∞–ª–∞—Ä –±–∏—Ä —Ö–∏–ª –±—û–ª—Å–∞
            (date1 < today)  # –ê–≥–∞—Ä —Å–∞–Ω–∞ —û—Ç–≥–∞–Ω –±—û–ª—Å–∞, –≤–∞ –≤–∞“õ—Ç–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à–Ω–∏–Ω–≥ –∫–µ—Ä–∞–≥–∏ –π—û“õ
        )

        # –ê–≥–∞—Ä —Å–∞–Ω–∞ –±–∏—Ä —Ö–∏–ª –±—û–ª—Å–∞, –≤–∞“õ—Ç–Ω–∏ “≥–∞–º —Ç–µ–∫—à–∏—Ä–∏–± —á–∏“õ–∞–º–∏–∑
        if date1 == date2:
            time_match = is_time_match(time1, time2)

    except Exception as e:
        print(f"‚ùå Sana parse xato: {e}")
        date_match = False

    print(f"üîç –°–æ–ª–∏—à—Ç–∏—Ä–∏—à:")
    print(f"    from_district: {order1.get('from_district')} == {order2.get('from_district')}")
    print(f"    to_district  : {order1.get('to_district')} == {order2.get('to_district')}")
    print(f"    to_region  : {order1.get('to_region')} == {order2.get('to_region')}")
    print(f"    date         : {order1.get('date')} == {order2.get('date')}")
    print(f"    time         : {order1.get('time')} == {order2.get('time')}")
    print(f"    üï∞ –í–∞“õ—Ç –º–æ—Å–ª–∏–≥–∏: {is_time_match(order1.get('time', ''), order2.get('time', ''))}")

    return (
        from_district_match and
        to_region_match and
        date_match and
        time_match
    )

def create_contact_button(user_id: int, name: str, phone: str | None = None) -> InlineKeyboardMarkup:
    buttons = []

    if phone:
        buttons.append([
            InlineKeyboardButton(
                text="üìû –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º",
                url=f"tel:{phone}"
            )
        ])

    buttons.append([
        InlineKeyboardButton(
            text="üë§ –ü—Ä–æ—Ñ–∏–ª–Ω–∏ –æ—á–∏—à",
            url=f"tg://user?id={user_id}"
            #url=f"https://t.me/{name}" if name.startswith("@") else f"tg://user?id={user_id}"
        )
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def notify_driver_and_passenger(driver_id, passenger_id, driver_order, passenger_order, bot):
    from_district = passenger_order.get("from_district", "–ù–æ–º–∞—ä–ª—É–º")
    to_district = passenger_order.get("to_district", "–ù–æ–º–∞—ä–ª—É–º")
    date = passenger_order.get("date", "–ù–æ–º–∞—ä–ª—É–º")
    time = passenger_order.get("time", "–ù–æ–º–∞—ä–ª—É–º")

    # üîπ “≤–∞–π–¥–æ–≤—á–∏–Ω–∏–Ω–≥ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–∏ –æ–ª–∞–º–∏–∑
    # user_statuses.json –¥–∞–Ω –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ —û“õ–∏—à
    with open(USER_STATUS_PATH, "r", encoding="utf-8") as f:
        user_statuses = json.load(f)

    # “≤–∞–π–¥–æ–≤—á–∏ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏
    driver_info = user_statuses.get(str(driver_id), {}).get("profile", {})
    driver_name = driver_info.get("name", "–ù–æ–º–∞—ä–ª—É–º")
    driver_phone = driver_info.get("phone", "–ù–æ–º–∞—ä–ª—É–º")
    driver_car = driver_info.get("car_model", "–ù–æ–º–∞—ä–ª—É–º")
    driver_car_number = driver_info.get("car_number", "–ù–æ–º–∞—ä–ª—É–º")

    # üîπ Telegram –æ—Ä“õ–∞–ª–∏ –π—û–ª–æ–≤—á–∏–Ω–∏–Ω–≥ –∏—Å–º–∏–Ω–∏ –æ–ª–∏—à
    passenger_user = await bot.get_chat(passenger_id)
    passenger_name = passenger_user.full_name

    # üöò “≤–∞–π–¥–æ–≤—á–∏–≥–∞ ‚Äî –π—û–ª–æ–≤—á–∏ –º–∞—ä–ª—É–º–æ—Ç–∏
    passenger_from = passenger_order.get("from_district", "–ù–æ–º–∞—ä–ª—É–º")
    passenger_to = passenger_order.get("to_district", "–ù–æ–º–∞—ä–ª—É–º")
    passenger_date = passenger_order.get("date", "–ù–æ–º–∞—ä–ª—É–º")
    passenger_time = passenger_order.get("time", "–ù–æ–º–∞—ä–ª—É–º")

    # üë§ “≤–∞–π–¥–æ–≤—á–∏–≥–∞ ‚Äî –º–æ—Å –π—û–ª–æ–≤—á–∏ –º–∞—ä–ª—É–º–æ—Ç–∏
    driver_text = (
        f"üßç‚Äç‚ôÇÔ∏è –ú–æ—Å –π—û–ª–æ–≤—á–∏ —Ç–æ–ø–∏–ª–¥–∏!\n\n"
        f"üë§ –ô—û–ª–æ–≤—á–∏: {passenger_name}\n"
        f"üÜî ID: `{passenger_id}`\n"
        #f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {passenger_phone}\n"
        f"üìç –ô—û–Ω–∞–ª–∏—à: {from_district} ‚ûù {to_district}\n"
        f"üìÖ –°–∞–Ω–∞: {date}\n"
        f"‚è∞ –í–∞“õ—Ç: {time}"
    )
    await send_message(
        driver_id,
        driver_text,
        reply_markup=create_driver_confirm_buttons(passenger_id),  # passenger_id –Ω–∏ —É–ª–∞—è–º–∏–∑
        parse_mode="Markdown"
    )

    # üßç‚Äç‚ôÇÔ∏è –ô—û–ª–æ–≤—á–∏–≥–∞ ‚Äî “≥–∞–π–¥–æ–≤—á–∏ –º–∞—ä–ª—É–º–æ—Ç–∏
    driver_from = driver_order.get("from_district", "–ù–æ–º–∞—ä–ª—É–º")
    driver_to = driver_order.get("to_district", "–ù–æ–º–∞—ä–ª—É–º")
    driver_date = driver_order.get("date", "–ù–æ–º–∞—ä–ª—É–º")
    driver_time = driver_order.get("time", "–ù–æ–º–∞—ä–ª—É–º")

    # üëâ –ô—û–ª–æ–≤—á–∏–≥–∞ —Ö–∞–±–∞—Ä
    passenger_text = (
        f"üöò –ú–æ—Å “≥–∞–π–¥–æ–≤—á–∏ —Ç–æ–ø–∏–ª–¥–∏!\n\n"
        f"üë§ “≤–∞–π–¥–æ–≤—á–∏: {driver_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {driver_phone}\n"
        f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª: {driver_car}\n"
        f"üî¢ –î–∞–≤–ª–∞—Ç —Ä–∞“õ–∞–º–∏: {driver_car_number}\n"
        f"üìç –ô—û–Ω–∞–ª–∏—à: {driver_from} ‚ûù {driver_to}\n"
        f"üìÖ –°–∞–Ω–∞: {driver_date}\n"
        f"‚è∞ –í–∞“õ—Ç: {driver_time}\n"
        f"üÜî ID: `{driver_id}`"
    )
    await send_message(passenger_id, passenger_text, parse_mode="Markdown")

def update_driver_seats(driver_id):
    try:
        if os.path.exists(DRIVER_PATH):
            with open(DRIVER_PATH, 'r', encoding='utf-8') as f:
                data = json.load(f)

            driver_id = str(driver_id)
            if driver_id in data and "available_seats" in data[driver_id]["order"]:
                current = data[driver_id]["order"]["available_seats"]
                data[driver_id]["order"]["available_seats"] = max(current - 1, 0)

                with open(DRIVER_PATH, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=4)

    except Exception as e:
        logging.error(f"update_driver_seats —Ö–∞—Ç–æ–ª–∏–∫: {e}")

# “≤–∞–π–¥–æ–≤—á–∏ —É—á—É–Ω —Ç—É–≥–º–∞, –π—û–ª–æ–≤—á–∏–Ω–∏ —Ç–∞–Ω–ª–∞—à–∏ —É—á—É–Ω
def create_driver_confirm_buttons(passenger_id: int):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="“ö–∞–±—É–ª “õ–∏–ª–∏—à ‚úÖ",
                    callback_data=f"accept_{passenger_id}"
                ),
                InlineKeyboardButton(
                    text="–†–∞–¥ —ç—Ç–∏—à ‚ùå",
                    callback_data=f"reject_{passenger_id}"
                )
            ]
        ]
    )
    return keyboard


# ----------------------------------------------------------------------------------------

def create_departure_confirmation_keyboard(driver_id: str) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ “≤–∞", callback_data=f"departed_yes_{driver_id}"),
            InlineKeyboardButton(text="‚ùå –ô—û“õ", callback_data=f"departed_no_{driver_id}")
        ]
    ])
    return keyboard

# ‚úÖ 1. utils.py —Ñ–∞–π–ª–∏–¥–∞ approval —Å—Ç–∞—Ç—É—Å–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à —Ñ—É–Ω–∫—Ü–∏—è—Å–∏:
def is_driver_approved(user_id: int) -> bool:
    try:
        with open(DRIVER_PATH, "r", encoding="utf-8") as file:
            drivers = json.load(file)
        driver_data = drivers.get(str(user_id))
        return driver_data and driver_data.get("approved", False)
    except Exception as e:
        logging.error(f"Approval —Ç–µ–∫—à–∏—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ: {e}")
        return False

# ----------------------------------------------------------------------------------------

# üì• –ô—û–ª–æ–≤—á–∏ –ë—É—é—Ä—Ç–º–∞–Ω–∏ —Ç–∞—Ä–∏—Ö–≥–∞ —Å–∞“õ–ª–∞—à
def save_passenger_order_history(user_id, order_data):
    users = load_passenger()
    user_id_str = str(user_id)

    if user_id_str not in users:
        users[user_id_str] = {"status": "passenger"}

    if "order_history" not in users[user_id_str]:
        users[user_id_str]["order_history"] = []

    # –¢–∞—Ä–∏—Ö–≥–∞ –±—É–π—Ä—É—Ç–º–∞–Ω–∏ “õ—û—à–∏—à
    users[user_id_str]["order_history"].append(order_data)

    save_passenger(users)
    logging.info(f"–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ {user_id} —É—á—É–Ω –±—É–π—Ä—É—Ç–º–∞ —Ç–∞—Ä–∏—Ö–≥–∞ “õ—û—à–∏–ª–¥–∏: {order_data}")

def get_passenger_order_history(user_id):
    data = load_passenger()
    user_id = str(user_id)

    # –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–Ω–∏–Ω–≥ –±—É–π—Ä—É—Ç–º–∞ —Ç–∞—Ä–∏—Ö–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à
    if user_id in data and "order_history" in data[user_id]:
        return data[user_id]["order_history"]
    return []

def save_driver_order_history(user_id, driver_order):
    user_id = str(user_id)
    data = load_drivers()

    if user_id not in data:
        data[user_id] = {}

    if "order_history" not in data[user_id]:
        data[user_id]["order_history"] = []

    data[user_id]["order_history"].append(driver_order)

    with open(DRIVER_PATH, 'w') as file:
        json.dump(data, file, indent=4)

def get_driver_order_history(user_id):
    data = load_drivers()
    user_id = str(user_id)

    # –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–Ω–∏–Ω–≥ –±—É–π—Ä—É—Ç–º–∞ —Ç–∞—Ä–∏—Ö–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à
    if user_id in data and "order_history" in data[user_id]:
        return data[user_id]["order_history"]
    return []

# –ô—û–ª–æ–≤—á–∏–≥–∞ —Ç–∞—Ä–∏—Ö–Ω–∏ –∫—û—Ä—Å–∞—Ç–∏—à
async def show_passenger_order_history(user_id, callback_query):
    order_history = get_passenger_order_history(user_id)

    if order_history:
        order_text = "üìã –°–∏–∑–Ω–∏–Ω–≥ –±—É–π—Ä—É—Ç–º–∞–ª–∞—Ä–∏–Ω–≥–∏–∑:\n"
        for order in order_history:
            order_text += f"üìç –ú–∞–Ω–∑–∏–ª: {order.get('from_district', 'Noma ºlum')} ‚Üí {order.get('to_district', 'Noma ºlum')},\n" \
                          f"üïí –í–∞“õ—Ç: {order.get('time', '–ö—û—Ä—Å–∞—Ç–∏–ª–º–∞–≥–∞–Ω')}\n"
        await callback_query.message.answer(order_text)
    else:
        await callback_query.message.answer("‚ùå –°–∏–∑–Ω–∏–Ω–≥ –±—É–π—Ä—É—Ç–º–∞ —Ç–∞—Ä–∏—Ö–∏–Ω–≥–∏–∑ –º–∞–≤–∂—É–¥ —ç–º–∞—Å.")

# ----------------------------------------------------------------------------------------

# üìÜ –°–∞–Ω–∞ –∫—û—Ä–∏–Ω–∏—à–∏–Ω–∏ —Ñ–æ—Ä–º–∞—Ç–ª–∞—à
def format_date(date_str: str) -> str:
    try:
        dep_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        today = datetime.today().date()
        if dep_date == today:
            return "–ë—É–≥—É–Ω"
        elif dep_date == today + timedelta(days=1):
            return "–≠—Ä—Ç–∞–≥–∞"
        elif dep_date == today + timedelta(days=2):
            return "–ò–Ω–¥–∏–Ω–≥–∞"
        return date_str
    except:
        return date_str

def get_available_dates():
    now = datetime.now()
    dates = []

    for i in range(3):  # –§–∞“õ–∞—Ç 3 –∫—É–Ω –∫—û—Ä—Å–∞—Ç–∞–º–∏–∑
        day = now.date() + timedelta(days=i)
        dates.append(day.strftime("%Y-%m-%d"))

    return dates

def get_available_times(selected_day):
    now = datetime.now()
    time_slots = {
        "morning": "06:00",
        "afternoon": "13:00",
        "evening": "18:00",
        "night": "21:00",
        "late_night": "01:00"
    }

    available = {}
    for key, time_str in time_slots.items():
        combined = datetime.strptime(f"{selected_day} {time_str}", "%Y-%m-%d %H:%M")
        if combined > now:
            available[key] = time_str

    return available

# üß∞ –£–Ω–∏–≤–µ—Ä—Å–∞–ª —Ö–∞–±–∞—Ä —á–∏“õ–∞—Ä–∏—à —Ñ—É–Ω–∫—Ü–∏—è—Å–∏
async def send_or_edit_text(target, text: str, reply_markup=None, parse_mode="Markdown"):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª —Ñ—É–Ω–∫—Ü–∏—è: —Ö–∞–±–∞—Ä–Ω–∏ —Ç–∞“≥—Ä–∏—Ä “õ–∏–ª–∞–¥–∏ —ë–∫–∏ —è–Ω–≥–∏ —Ö–∞–±–∞—Ä –∂—û–Ω–∞—Ç–∞–¥–∏.
    `target` - Message —ë–∫–∏ CallbackQuery –æ–±—ä–µ–∫—Ç–∏ –±—û–ª–∏—à–∏ –º—É–º–∫–∏–Ω.
    """
    try:
        # –ê–≥–∞—Ä CallbackQuery –∫–µ–ª—Å–∞
        if isinstance(target, CallbackQuery):
            await target.message.edit_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        # –ê–≥–∞—Ä Message –∫–µ–ª—Å–∞
        elif isinstance(target, Message):
            await target.edit_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
    except TelegramBadRequest as e:
        logging.warning(f"‚ö†Ô∏è –•–∞–±–∞—Ä —Ç–∞“≥—Ä–∏—Ä “õ–∏–ª–∏–Ω–º–∞–¥–∏ (TelegramBadRequest): {e}")

        # –ê–≥–∞—Ä —Ç–∞“≥—Ä–∏—Ä “õ–∏–ª–∏–± –±—û–ª–º–∞—Å–∞, —è–Ω–≥–∏ —Ö–∞–±–∞—Ä –∂—û–Ω–∞—Ç–∞–º–∏–∑
        try:
            if isinstance(target, CallbackQuery):
                await target.message.answer(text, reply_markup=reply_markup, parse_mode=parse_mode)
            elif isinstance(target, Message):
                await target.answer(text, reply_markup=reply_markup, parse_mode=parse_mode)
        except Exception as ex:
            logging.error(f"üö´ –•–∞–±–∞—Ä–Ω–∏ –∂—û–Ω–∞—Ç–∏—à–¥–∞ “≥–∞–º —Ö–∞—Ç–æ: {ex}")

async def send_or_edit_last(user_id: int, state: FSMContext, bot, text: str, reply_markup=None, parse_mode=None):
    data = await state.get_data()
    last_msg_id = data.get("last_bot_msg_id")

    try:
        if last_msg_id:
            await bot.edit_message_text(
                text=text,
                chat_id=user_id,
                message_id=last_msg_id,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        else:
            sent = await bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            await state.update_data(last_bot_msg_id=sent.message_id)

    except TelegramForbiddenError:
        # –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ –±–æ—Ç–Ω–∏ –±–ª–æ–∫–ª–∞–≥–∞–Ω ‚Äî “≥–µ—á “õ–∞–Ω–¥–∞–π “≥–∞—Ä–∞–∫–∞—Ç “õ–∏–ª–º–∞—Å–ª–∏–∫
        print(f"‚ö†Ô∏è –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ {user_id} –±–æ—Ç–Ω–∏ –±–ª–æ–∫–ª–∞–¥–∏.")
        return

    except Exception as e:
        # –ë–æ—à“õ–∞ —Ö–∞—Ç–æ–ª–∞—Ä –±—û–ª—Å–∞, “õ–∞–π—Ç–∞ —é–±–æ—Ä–∏—à–≥–∞ —É—Ä–∏–Ω–∏—à
        try:
            sent = await bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            await state.update_data(last_bot_msg_id=sent.message_id)
        except TelegramForbiddenError:
            print(f"‚ö†Ô∏è –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ {user_id} –±–æ—Ç–Ω–∏ –±–ª–æ–∫–ª–∞–¥–∏ (“õ–∞–π—Ç–∞ —é–±–æ—Ä–∏—à–¥–∞).")
        except Exception as ex:
            print(f"‚ö†Ô∏è –•–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏: {ex}")