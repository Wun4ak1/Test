# handlers/start.py
import logging
import json
from aiogram import Bot, Router, F, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from datetime import datetime
import sys
import os
sys.path.append(os.path.abspath(os.path.dirname(__file__)))
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from config import ADMINS, TOKEN
from states import DriverInfo, AdminStates
from keyboards.start_kb import start_kb
from utils import (
    load_json, save_json, load_users, save_user_status, recommend_multiple_drivers_to_passenger,
    get_passenger_order, send_or_edit_last, load_passenger, get_driver_order, save_passenger_order, send_or_edit_text,
    load_drivers, save_driver, is_driver_approved, create_departure_confirmation_keyboard,
    USER_STATUS_PATH, PASSENGER_PATH, DRIVER_PATH
)

bot = Bot(token=TOKEN)

router = Router()

@router.message(F.contact)
async def handle_contact(message: Message):
    user_id = str(message.from_user.id)

    with open(PASSENGER_PATH, 'r', encoding='utf-8') as file:
        passengers = json.load(file)

    user_data = passengers.get(user_id)
    if not user_data or not user_data.get("waiting_for_phone"):
        return

    phone = message.contact.phone_number
    user_data["phone"] = phone
    user_data["waiting_for_phone"] = False

    with open(PASSENGER_PATH, 'w', encoding='utf-8') as file:
        json.dump(passengers, file, ensure_ascii=False, indent=4)

    await message.answer("‚úÖ –†–∞“õ–∞–º —Å–∞“õ–ª–∞–Ω–¥–∏. –ú–æ—Å “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä —é–±–æ—Ä–∏–ª—è–ø—Ç–∏...", reply_markup=ReplyKeyboardRemove())

    order = user_data.get("order")
    if order:
        await recommend_multiple_drivers_to_passenger(user_id, order, message.bot)


@router.callback_query(F.data.startswith("contact:"))
async def handle_contact_callback(callback: CallbackQuery):
    _, role, target_user_id = callback.data.split(":")
    user = await bot.get_chat(target_user_id)
    username = user.username or "–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ –Ω–æ–º–∞—ä–ª—É–º"
    
    text = f"üì± –ë–æ“ì–ª–∞–Ω–∏—à —É—á—É–Ω —Å–∏–∑–Ω–∏–Ω–≥ –º–æ—Å –∏–Ω—Å–æ–Ω:\n@{username}"
    await callback.message.answer(text)

@router.message(lambda m: m.contact is not None)
async def handle_contact(message: Message):
    user_id = str(message.from_user.id)
    phone_number = message.contact.phone_number

    # JSON'–Ω–∏ –æ—á–∏–±, –º–∞—ä–ª—É–º–æ—Ç–Ω–∏ —è–Ω–≥–∏–ª–∞–π–º–∏–∑
    data = load_json(PASSENGER_PATH)

    if user_id in data:
        data[user_id]["phone"] = phone_number
        print(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —Å–∞“õ–ª–∞–Ω—è–ø—Ç–∏: {phone_number}")

        # JSON'–Ω–∏ “õ–∞–π—Ç–∞ —ë–∑–∏—à
        save_json(PASSENGER_PATH, data)

        await message.answer("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑ —Å–∞“õ–ª–∞–Ω–¥–∏. –ú–æ—Å “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä —é–±–æ—Ä–∏–ª—è–ø—Ç–∏...",
                             reply_markup=ReplyKeyboardRemove())

        # –ê–≥–∞—Ä–¥–∞ –±—É–π—Ä—É—Ç–º–∞ –º–∞–≤–∂—É–¥ –±—û–ª—Å–∞, “õ–∞–π—Ç–∞ –º–æ—Å “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä–Ω–∏ —Ç–∞–≤—Å–∏—è “õ–∏–ª–∞–º–∏–∑
        user_data = data[user_id]
        order = user_data.get("order")
        if order:
            await recommend_multiple_drivers_to_passenger(
                passenger_id=user_id,
                user_order=order,
                bot=message.bot
            )
    else:
        print(f"‚ùå –ô—û–ª–æ–≤—á–∏ PASSENGER_PATH'–¥–∞ —Ç–æ–ø–∏–ª–º–∞–¥–∏: {user_id}")
        await message.answer("‚ùå –ô—û–ª–æ–≤—á–∏ –º–∞—ä–ª—É–º–æ—Ç–∏ —Ç–æ–ø–∏–ª–º–∞–¥–∏.")

# üìû “ö—û–ª–¥–∞ —Ä–∞“õ–∞–º –∫–∏—Ä–∏—Ç–∏–ª–≥–∞–Ω–¥–∞
@router.message(lambda m: m.text and m.text.startswith("+998") and m.text[1:].isdigit())
async def handle_manual_phone(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    phone_text = message.text.strip()

    # üìÅ –§–∞–π–ª–ª–∞—Ä–¥–∞–Ω –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –æ–ª–∞–º–∏–∑
    status_data = load_json(USER_STATUS_PATH)
    passenger_data = load_json(PASSENGER_PATH)

    user_status = status_data.get(user_id, {})
    user_type = user_status.get("status")  # "driver" —ë–∫–∏ "passenger"

    # ‚ùó –†–∞“õ–∞–º —Ç—û–ª–∏“õ —Ñ–æ—Ä–º–∞—Ç–∏–¥–∞ —ç–º–∞—Å ‚Äî 13—Ç–∞ –±–µ–ª–≥–∏ –±—û–ª–º–∞—Å–∞
    if len(phone_text) != 13:
        await message.answer("‚ùó –ò–ª—Ç–∏–º–æ—Å, —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ +998901234567 –∫—û—Ä–∏–Ω–∏—à–∏–¥–∞ —Ç—û–ª–∏“õ –∫–∏—Ä–∏—Ç–∏–Ω–≥.")
        return
    
    # üë§ –ê–≥–∞—Ä –π—û–ª–æ–≤—á–∏ –±—û–ª—Å–∞ –≤–∞ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏ –∫—É—Ç–∏–ª—Å–∞
    if user_type == "passenger":
        passenger = passenger_data.get(user_id)
        if passenger and passenger.get("waiting_for_phone"):
            passenger["phone"] = phone_text
            passenger["waiting_for_phone"] = False

            try:
                with open(PASSENGER_PATH, 'w', encoding='utf-8') as f:
                    json.dump(passenger_data, f, ensure_ascii=False, indent=4)
            except Exception as e:
                await message.answer("‚ùó –†–∞“õ–∞–º–Ω–∏ —Å–∞“õ–ª–∞—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏. –ò–ª—Ç–∏–º–æ—Å, “õ–∞–π—Ç–∞ —É—Ä–∏–Ω–∏–Ω–≥.")
                logging.error(f"–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º —Å–∞“õ–ª–∞—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫: {e}")

            await message.answer("‚úÖ –†–∞“õ–∞–º —Å–∞“õ–ª–∞–Ω–¥–∏. –ú–æ—Å “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä —é–±–æ—Ä–∏–ª—è–ø—Ç–∏...", reply_markup=types.ReplyKeyboardRemove())

            order = passenger.get("order")
            if order:
                await recommend_multiple_drivers_to_passenger(user_id, order, message.bot)
        return

    # üöó –ê–≥–∞—Ä “≥–∞–π–¥–æ–≤—á–∏ –±—û–ª—Å–∞ ‚Äî —Ä–∞“õ–∞–º–Ω–∏ —Å–∞“õ–ª–∞–±, –∞–Ω–∫–µ—Ç–∞ –¥–∞–≤–æ–º —ç—Ç—Ç–∏—Ä–∏–ª–∞–¥–∏
    elif user_type == "driver":
        await state.update_data(phone=phone_text)
        await message.answer("–ú–∞—à–∏–Ω–∞ —Ä—É—Å—É–º–∏ (–º–∞—Å–∞–ª–∞–Ω: Nexia 3):")
        await state.set_state(DriverInfo.car_model)
        return

    # üëª –ê–≥–∞—Ä –∞–Ω–∏“õ–ª–∞–Ω–º–∞–≥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ –±—û–ª—Å–∞ ‚Äî –∂–∞–≤–æ–± –±–µ—Ä–º–∞–π–º–∏–∑
    return


async def ask_for_phone_number(message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìû –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–Ω–∏ —é–±–æ—Ä–∏—à", request_contact=True)],
            [KeyboardButton(text="üì± “ö—û–ª–¥–∞ —Ä–∞“õ–∞–º –∫–∏—Ä–∏—Ç–∏—à")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        "üì± –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥:\n\n"
        "1. –ê–≤—Ç–æ–º–∞—Ç–∏–∫: 'üìû –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–Ω–∏ —é–±–æ—Ä–∏—à' —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥\n"
        "2. –Å–∫–∏ 'üì± “ö—û–ª–¥–∞ —Ä–∞“õ–∞–º –∫–∏—Ä–∏—Ç–∏—à' —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–±, —Ä–∞“õ–∞–º–Ω–∏ —û–∑–∏–Ω–≥–∏–∑ –∫–∏—Ä–∏—Ç–∏–Ω–≥",
        reply_markup=keyboard
    )

async def notify_driver(driver_id: str, passenger_id: str, passenger_order: dict):
    text = (
        f"üßç‚Äç‚ôÇÔ∏è *–ô—û–ª–æ–≤—á–∏ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏:*\n"
        f"üìç –ú–∞–Ω–∑–∏–ª: {passenger_order.get('location')}\n"
        f"üïì –í–∞“õ—Ç: {passenger_order.get('time')}\n"
        f"üìû –ê–ª–æ“õ–∞: @{passenger_order.get('username', passenger_id)}"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ “ö–∞–±—É–ª “õ–∏–ª–∏—à", callback_data=f"accept_passenger_{passenger_id}")]
        ]
    )

    await bot.send_message(
        chat_id=int(driver_id),
        text=text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@router.callback_query(lambda c: c.data.startswith("select_driver_"))
async def process_driver_selection(callback: CallbackQuery):
    driver_id = callback.data.split("_")[-1]
    passenger_id = callback.from_user.id

    order = get_passenger_order(passenger_id)
    if not order:
        return await callback.message.answer("–ë—É–π—Ä—É—Ç–º–∞ —Ç–æ–ø–∏–ª–º–∞–¥–∏.")

    order["username"] = callback.from_user.username
    await notify_driver(driver_id, passenger_id, order)
    await callback.message.answer("“≤–∞–π–¥–æ–≤—á–∏–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏–ª–¥–∏!")

from asyncio import create_task, sleep

# “≤–∞—Ä –±–∏—Ä –π—û–ª–æ–≤—á–∏ —É—á—É–Ω —Ç–∞–π–º–µ—Ä–ª–∞—Ä–Ω–∏ —Å–∞“õ–ª–∞—à
pending_timers = {}

@router.callback_query(lambda c: c.data.startswith("choose_driver_"))
async def process_driver_choice(callback_query: CallbackQuery):
    passenger_id = str(callback_query.from_user.id)
    driver_id = callback_query.data.split("_")[-1]

    # JSON —Ñ–∞–π–ª–ª–∞—Ä–¥–∞–Ω –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –æ–ª
    passengers = load_json(PASSENGER_PATH)
    drivers = load_json(DRIVER_PATH)

    passenger = passengers.get(passenger_id)
    driver = drivers.get(driver_id)

    if not passenger or not driver:
        await callback_query.answer("–ú–∞—ä–ª—É–º–æ—Ç —Ç–æ–ø–∏–ª–º–∞–¥–∏.")
        return
    
    order = passenger.get("order", {})

    # ‚úÖ –ê–≥–∞—Ä –π—û–ª–æ–≤—á–∏ –∞–ª–ª–∞“õ–∞—á–æ–Ω “≥–∞–π–¥–æ–≤—á–∏ —Ç–∞–Ω–ª–∞–≥–∞–Ω –±—û–ª—Å–∞
    if order.get("chosen_driver_id"):
        await callback_query.answer("‚úÖ –°–∏–∑ –∞–ª–ª–∞“õ–∞—á–æ–Ω “≥–∞–π–¥–æ–≤—á–∏ —Ç–∞–Ω–ª–∞–≥–∞–Ω—Å–∏–∑.", show_alert=True)
        return

    # üîí –¢–∞–Ω–ª–∞–Ω–≥–∞–Ω “≥–∞–π–¥–æ–≤—á–∏ ID –Ω–∏ —Å–∞“õ–ª–∞—à
    order["chosen_driver_id"] = driver_id

    passengers[passenger_id]["order"] = order
    save_json(PASSENGER_PATH, passengers)

    # üë§ –ô—û–ª–æ–≤—á–∏ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏
    passenger_name = callback_query.from_user.full_name
    price = order.get("price", -1)
    price_text = f"{price:,} —Å—û–º" if price > 0 else "–ê–Ω–∏“õ–ª–∞–Ω–º–∞–≥–∞–Ω"

    # ‚úÖ “≤–∞–π–¥–æ–≤—á–∏–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à
    msg_to_driver = (
        f"üõ£ –°–∏–∑–≥–∞ –º–æ—Å –π—û–ª–æ–≤—á–∏:\n\n"
        f"üìç –ô—û–Ω–∞–ª–∏—à: {passenger['order']['from_district']} ‚ûù {passenger['order']['to_district']}\n"
        f"üìÖ –°–∞–Ω–∞: {passenger['order']['date']}\n"
        f"‚è∞ –í–∞“õ—Ç: {passenger['order']['time']}\n\n"
        f"üë§ *–ô—û–ª–æ–≤—á–∏*: {passenger_name}\n"
        f"üíµ –¢–∞–∫–ª–∏—Ñ “õ–∏–ª–∏–Ω–≥–∞–Ω –Ω–∞—Ä—Ö: {price_text}\n"
    )

    accept_btn = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ “ö–∞–±—É–ª “õ–∏–ª–∏—à", callback_data=f"accept_passenger_{passenger_id}")
    ]])

    # ‚úÖ –ô—û–ª–æ–≤—á–∏–≥–∞ —Ç–∞—Å–¥–∏“õ —Ö–∞–±–∞—Ä
    await callback_query.message.answer("‚úÖ “≤–∞–π–¥–æ–≤—á–∏–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏–ª–¥–∏, –∞–≥–∞—Ä 5 –¥–∞“õ–∏“õ–∞–¥–∞ –∂–∞–≤–æ–± –±–µ—Ä–º–∞—Å–∞, –Ω–∞–≤–±–∞—Ç–¥–∞–≥–∏ “≥–∞–π–¥–æ–≤—á–∏–≥–∞ —é–±–æ—Ä–∏–ª–∞–¥–∏.")
    await bot.send_message(driver_id, msg_to_driver, reply_markup=accept_btn)

    # Callback‚Äô–≥–∞ –∂–∞–≤–æ–± –±–µ—Ä–∏—à (—Ç—É–≥–º–∞–Ω–∏ "pending" “≥–æ–ª–∞—Ç–¥–∞–Ω —á–∏“õ–∞—Ä–∏—à)
    await callback_query.answer()

    # üïì 5 –¥–∞“õ–∏“õ–∞ –∫—É—Ç–∏—à –≤–∞ –∫–µ–π–∏–Ω –Ω–∞–≤–±–∞—Ç–¥–∞–≥–∏ “≥–∞–π–¥–æ–≤—á–∏–≥–∞ —é–±–æ—Ä–∏—à
    task = create_task(wait_for_driver_response(passenger_id, driver_id))
    pending_timers[passenger_id] = task

async def wait_for_driver_response(passenger_id, driver_id):
    await sleep(300)  # 5 –¥–∞“õ–∏“õ–∞ = 300 —Å–µ–∫—É–Ω–¥

    passengers = load_json(PASSENGER_PATH)
    passenger = passengers.get(passenger_id)

    if not passenger:
        return

    order = passenger.get("order", {})
    
    # –ê–≥–∞—Ä –π—û–ª–æ–≤—á–∏ —Ç–∞—Å–¥–∏“õ –æ–ª–º–∞–≥–∞–Ω –±—û–ª—Å–∞
    if order.get("chosen_driver_id") == driver_id:
        order["chosen_driver_id"] = None  # –¢–∞–Ω–ª–æ–≤–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∏—à

        passengers[passenger_id]["order"] = order
        passengers = load_json(PASSENGER_PATH)

        # ‚úÖ –ö–µ–π–∏–Ω–≥–∏ “≥–∞–π–¥–æ–≤—á–∏–≥–∞ —Ç–∞–≤—Å–∏—è “õ–∏–ª–∏—à
        await recommend_multiple_drivers_to_passenger(
            passenger_id=passenger_id,
            user_order=order,
            bot=bot
        )

@router.callback_query(lambda c: c.data.startswith("accept_passenger_"))
async def process_accept_passenger(callback_query: CallbackQuery):
    driver_id = str(callback_query.from_user.id)
    passenger_id = callback_query.data.split("_")[-1]

    drivers = load_json(DRIVER_PATH)
    passengers = load_json(PASSENGER_PATH)

    driver = drivers.get(driver_id)
    passenger = passengers.get(passenger_id)

    if not driver or not passenger:
        await callback_query.answer("–ú–∞—ä–ª—É–º–æ—Ç —Ç–æ–ø–∏–ª–º–∞–¥–∏.")
        return

    # üö´ –¢–∞–π–º–µ—Ä–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∞–º–∏–∑ –∞–≥–∞—Ä –±–æ—Ä –±—û–ª—Å–∞
    task = pending_timers.pop(passenger_id, None)
    if task:
        task.cancel()

    # ‚ùå –ê–≥–∞—Ä –∂–æ–π “õ–æ–ª–º–∞–≥–∞–Ω –±—û–ª—Å–∞, “õ–∞–±—É–ª “õ–∏–ª–∏—à–≥–∞ —Ä—É—Ö—Å–∞—Ç –π—û“õ
    if driver.get("order", {}).get("available_seats", 0) <= 0:
        await callback_query.answer("‚ùå –ñ–æ–π “õ–æ–ª–º–∞–≥–∞–Ω!", show_alert=True)
        return
    
    # üßç‚Äç‚ôÇÔ∏è –ô—û–ª–æ–≤—á–∏–≥–∞ —Ç—û–ª–∏“õ –º–∞—ä–ª—É–º–æ—Ç
    driver_info_text = (
        f"‚úÖ –¢–∞–Ω–ª–æ–≤–∏–Ω–≥–∏–∑ –º–∞—ä“õ—É–ª–ª–∞–Ω–¥–∏!\n\n"
        f"üöò “≤–∞–π–¥–æ–≤—á–∏ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏:\n"
        f"üë§ –ò—Å–º: {driver['profile']['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {driver['profile']['phone']}\n"
        f"üöó –ú–∞—à–∏–Ω–∞: {driver['profile']['car_model']} ({driver['profile']['car_number']})\n"
        f"üìç –ô—û–Ω–∞–ª–∏—à: {driver['order']['from_district']} ‚ûù {driver['order']['to_district']}\n"
        f"üìÖ –°–∞–Ω–∞: {driver['order']['date']}\n"
        f"‚è∞ –í–∞“õ—Ç: {driver['order']['time']}"
    )
    try:
        await bot.send_message(
            chat_id=int(passenger_id), 
            text=driver_info_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üöò “≤–∞–π–¥–æ–≤—á–∏ –µ—Ç–∏–± –∫–µ–ª–¥–∏", callback_data=f"arrived_yes_{driver_id}")]
            ])
        )
    except Exception as e:
        print(f"‚ùå –•–∞—Ç–æ–ª–∏–∫ —é–±–æ—Ä–∏—à–¥–∞: {e}")

    passenger_name = callback_query.from_user.full_name

    # ‚úÖ “≤–∞–π–¥–æ–≤—á–∏–≥–∞ —Ç—û–ª–∏“õ –º–∞—ä–ª—É–º–æ—Ç —é–±–æ—Ä–∏—à
    full_info = (
        f"üßç‚Äç‚ôÇÔ∏è –ô—û–ª–æ–≤—á–∏ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏:\n\n"
        f"üë§ –ô—û–ª–æ–≤—á–∏: {passenger_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {passenger.get('phone', '–ù–æ–º–∞—ä–ª—É–º')}\n"
        f"üìç –ô—û–Ω–∞–ª–∏—à: {passenger['order']['from_district']} ‚ûù {passenger['order']['to_district']}\n"
        f"üìÖ –°–∞–Ω–∞: {passenger['order']['date']}\n"
        f"‚è∞ –í–∞“õ—Ç: {passenger['order']['time']}\n"
        f"üí∞ –ù–∞—Ä—Ö: {passenger['order'].get('price', '–ù–æ–º–∞—ä–ª—É–º')} —Å—û–º"
    )
    #await callback_query.message.answer(full_info)
    await send_or_edit_text(callback_query.message, full_info, reply_markup=None)

    # ü™ë “≤–∞–π–¥–æ–≤—á–∏–¥–∞ –∫–∞–º–∞–π—Ç–∏—Ä–∞–º–∏–∑
    if "available_seats" in driver["order"]:
        driver["order"]["available_seats"] = max(0, driver["order"]["available_seats"] - 1)

    # üë• accepted_passengers —Ä—û–π—Ö–∞—Ç–∏–≥–∞ “õ—û—à–∞–º–∏–∑
    driver_order = driver["order"]
    driver_order.setdefault("accepted_passengers", [])
    if not any(p['passenger_id'] == passenger_id for p in driver_order["accepted_passengers"]):
        driver_order["accepted_passengers"].append({
            "passenger_id": passenger_id,
            "price": passenger['order'].get('price', 0)
        })

    # üëÄ –ê–≥–∞—Ä –æ—Ö–∏—Ä–≥–∏ –∂–æ–π —Ç—û–ª–≥–∞–Ω –±—û–ª—Å–∞, “≥–∞–π–¥–æ–≤—á–∏–≥–∞ —Ö–∞–±–∞—Ä
    if driver_order["available_seats"] == 0:
        try:
            await bot.send_message(
                chat_id=int(driver_id),
                text="‚úÖ –û—Ö–∏—Ä–≥–∏ –π—û–ª–æ–≤—á–∏ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏.\nüöó –ú–∞—à–∏–Ω–∞ —Ç—û–ª–¥–∏!\n\n–ô—û–ª–≥–∞ —á–∏“õ“õ–∞–Ω–∏–Ω–≥–∏–∑–¥–∞ —Ç–∞—Å–¥–∏“õ–ª–∞—Å–∞–Ω–≥–∏–∑ –π—û–ª–æ–≤—á–∏–ª–∞—Ä–≥–∞ –±–∏–ª–¥–∏—Ä—à–Ω–æ–º–∞ —é–±–æ—Ä–∞–º–∏–∑.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üõ£ –ô—û–ª–≥–∞ —á–∏“õ–¥–∏–º", callback_data="on_the_way")]
                ])
            )
        except Exception as e:
            print(f"‚ùå “≤–∞–π–¥–æ–≤—á–∏–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ: {e}")

    # üïì –í–∞“õ—Ç –±–µ–ª–≥–∏—Å–∏
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # üìù –ô—û–ª–æ–≤—á–∏ –±—É—é—Ä—Ç–º–∞—Å–∏–Ω–∏ —è–Ω–≥–∏–ª–∞–π–º–∏–∑
    if "order" in passenger:
        order = passenger["order"]
        order["status"] = "accepted"
        order.setdefault("status_timestamps", {})
        order["status_timestamps"]["accepted"] = timestamp
        order["chosen_driver_id"] = driver_id 

    # üîê –§–∞–π–ª–ª–∞—Ä–Ω–∏ “õ–∞–π—Ç–∞ —ë–∑–∞–º–∏–∑
    save_json(DRIVER_PATH, drivers)
    save_json(PASSENGER_PATH, passengers)

    await callback_query.answer("‚úÖ –ô—û–ª–æ–≤—á–∏ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏.")

# üöó “≤–∞–π–¥–æ–≤—á–∏ "–ô—û–ª–≥–∞ —á–∏“õ–¥–∏–º" –±–æ—Å–≥–∞–Ω–¥–∞
@router.callback_query(F.data == "on_the_way")
async def process_driver_on_the_way(callback_query: CallbackQuery):
    driver_id = str(callback_query.from_user.id)

    drivers = load_json(DRIVER_PATH)
    driver = drivers.get(driver_id)

    if not driver or "order" not in driver:
        await callback_query.answer("–ë—É—é—Ä—Ç–º–∞ —Ç–æ–ø–∏–ª–º–∞–¥–∏.", show_alert=True)
        return

    order = driver["order"]
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # ‚úÖ –°—Ç–∞—Ç—É—Å –≤–∞ –≤–∞“õ—Ç–Ω–∏ –±–µ–ª–≥–∏–ª–∞—à
    order["status"] = "on_the_way"
    order.setdefault("status_timestamps", {})["on_the_way"] = timestamp

    passengers = load_json(PASSENGER_PATH)

    # üßç‚Äç‚ôÇÔ∏è accepted_passengers —Ä—û–π—Ö–∞—Ç–∏–¥–∞–≥–∏ “≥–∞—Ä –±–∏—Ä –π—û–ª–æ–≤—á–∏–≥–∞ —Ö–∞–±–∞—Ä
    accepted_passengers = order.get("accepted_passengers", [])
    for passenger_id in accepted_passengers:
        passenger = passengers.get(passenger_id)
        if not passenger:
            continue

        # ‚úÖ –ô—û–ª–æ–≤—á–∏–¥–∞ “≥–∞–º —Å—Ç–∞—Ç—É—Å–Ω–∏ —è–Ω–≥–∏–ª–∞—à
        if "order" in passenger:
            passenger_order = passenger["order"]
            passenger_order["status"] = "on_the_way"
            passenger_order.setdefault("status_timestamps", {})["on_the_way"] = timestamp

        try:
            await bot.send_message(
                chat_id=int(passenger_id),
                text="üöò “≤–∞–π–¥–æ–≤—á–∏ –π—û–ª–≥–∞ —á–∏“õ–¥–∏.\n\n–ï—Ç–∏–± –±–æ—Ä–≥–∞–Ω–∏–¥–∞ —Ç–∞—Å–¥–∏“õ–ª–∞—à–∏–Ω–≥–∏–∑–Ω–∏ —Å—û—Ä–∞–π–º–∏–∑.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="‚úÖ –ï—Ç–∏–± –∫–µ–ª–¥–∏", callback_data=f"arrived_yes_{driver_id}"),
                            InlineKeyboardButton(text="‚ùå “≤–∞–ª–∏ –∫–µ–ª–º–∞–¥–∏", callback_data=f"arrived_no_{driver_id}")
                        ]
                    ]
                )
            )
        except Exception as e:
            print(f"‚ùå –ô—û–ª–æ–≤—á–∏–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ: {e}")

    # üöó “≤–∞–π–¥–æ–≤—á–∏–≥–∞ —Ö–∞–±–∞—Ä
    await send_or_edit_text(
        callback_query.message,
        "‚úÖ –°–∞—Ñ–∞—Ä–∏–Ω–≥–∏–∑ –±–µ—Ö–∞—Ç–∞—Ä –±—û–ª—Å–∏–Ω!.\n\n–ï—Ç–∏–± –±–æ—Ä–≥–∞—á —Ç–∞—Å–¥–∏“õ–ª–∞—à–Ω–∏ —É–Ω—É—Ç–º–∞–Ω–≥.\n\n–°–∏–∑–≥–∞ –æ“õ –π—û–ª —Ç–∏–ª–∞–π–º–∏–∑!!!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ú–∞–Ω–∑–∏–ª–≥–∞ –µ—Ç–∏–± –∫–µ–ª–¥–∏–º", callback_data=f"arrived_destination")]
            ]
        )
    )

    # üîê –§–∞–π–ª–Ω–∏ —Å–∞“õ–ª–∞—à
    save_json(PASSENGER_PATH, passengers)
    save_json(DRIVER_PATH, drivers)

@router.callback_query(F.data.startswith("arrived_yes_"))
async def process_arrived_yes(callback_query: CallbackQuery):
    data_parts = callback_query.data.split("_")
    driver_id = data_parts[-1]  # arrived_yes_<driver_id>
    passenger_id = str(callback_query.from_user.id)

    # ‚è≥ –í–∞“õ—Ç–Ω–∏ —Ç–∞–π—ë—Ä–ª–∞—à
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # üßç‚Äç‚ôÇÔ∏è –ô—û–ª–æ–≤—á–∏–Ω–∏–Ω–≥ order –æ–±—ä–µ–∫—Ç–∏–≥–∞ —Å—Ç–∞—Ç—É—Å —Å–∞“õ–ª–∞—à
    passengers = load_json(PASSENGER_PATH)
    drivers = load_json(DRIVER_PATH)

    passenger = passengers.get(passenger_id)
    driver = drivers.get(driver_id)

    if not passenger or "order" not in passenger or not driver or "order" not in driver:
        await callback_query.answer("–û—Ä–¥–µ—Ä —Ç–æ–ø–∏–ª–º–∞–¥–∏.", show_alert=True)
        return
    
    passenger_order = passenger["order"]
    passenger_order.setdefault("status_timestamps", {})["arrived_confirmation"] = timestamp

    driver_order = driver["order"]

    # –ê–≥–∞—Ä “≥–∞–π–¥–æ–≤—á–∏–¥–∞ “≥–∞–ª–∏ "on_the_way" –±–µ–ª–≥–∏–ª–∞–Ω–º–∞–≥–∞–Ω –±—û–ª—Å–∞
    if driver_order.get("status") != "on_the_way":
        driver_order["status"] = "on_the_way"
        driver_order.setdefault("status_timestamps", {})["on_the_way"] = timestamp

        accepted_passengers = driver_order.get("accepted_passengers", [])
        for item in accepted_passengers:
            p_id = item if isinstance(item, str) else item.get("passenger_id")
            if not p_id:
                continue
            p = passengers.get(p_id)
            if p and "order" in p:
                p["order"]["status"] = "on_the_way"
                p["order"].setdefault("status_timestamps", {})["on_the_way"] = timestamp
    
    # ‚úÖ “≤–∞–º–∫–æ—Ä–ª–∏–∫ —É—á—É–Ω –º–∏–Ω–Ω–∞—Ç–¥–æ—Ä–ª–∏–∫ –≤–∞ "–ú–∞–Ω–∑–∏–ª–≥–∞ –µ—Ç–¥–∏–º" —Ç—É–≥–º–∞—Å–∏
    arrived_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ú–∞–Ω–∑–∏–ª–≥–∞ –µ—Ç–¥–∏–º", callback_data=f"finished_trip_{driver_id}")]
    ])
    
    # Javob sifatida yo‚Äòlovchiga minnatdorchilik bildiruvchi xabar
    await send_or_edit_text(
        callback_query,
        text="‚úÖ “≤–∞–º–∫–æ—Ä–ª–∏–≥–∏–Ω–≥–∏–∑–¥–∞–Ω –º–∏–Ω–Ω–∞—Ç–¥–æ—Ä–º–∏–∑! üòä\n\n*–°–∞—Ñ–∞—Ä–∏–Ω–≥–∏–∑ –±–µ—Ö–∞—Ç–∞—Ä –±—û–ª—Å–∏–Ω.*\n\n–ú–∞–Ω–∑–∏–ª–≥–∞ –µ—Ç–≥–∞–Ω–∏–Ω–≥–∏–∑–¥–∞ —Ç–∞—Å–¥–∏“õ–ª–∞–± “õ—û–π–∏–Ω–≥.",
        reply_markup=arrived_keyboard,
        parse_mode="Markdown"
    )

    # üîê –°–∞“õ–ª–∞—à
    save_json(PASSENGER_PATH, passengers)
    save_json(DRIVER_PATH, drivers)

@router.callback_query(F.data.startswith("finished_trip_"))
async def process_trip_finished(callback_query: CallbackQuery):
    data_parts = callback_query.data.split("_")
    driver_id = data_parts[-1]  # finished_trip_<driver_id>
    passenger_id = str(callback_query.from_user.id)

    passengers = load_json(PASSENGER_PATH)
    drivers = load_json(DRIVER_PATH)

    passenger = passengers.get(passenger_id)
    driver = drivers.get(driver_id)

    if not passenger or "order" not in passenger:
        await callback_query.answer("–ë—É—é—Ä—Ç–º–∞ —Ç–æ–ø–∏–ª–º–∞–¥–∏.", show_alert=True)
        return

    order = passenger["order"]
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # üîµ –ô—û–ª–æ–≤—á–∏ —Å–∞—Ñ–∞—Ä–∏–Ω–∏ done “õ–∏–ª–∏—à
    order["status"] = "arrived"
    order.setdefault("status_timestamps", {})["arrived"] = timestamp

    # üü° –¢–∞—Ä–∏—Ö–≥–∞ —Å–∞“õ–ª–∞—à
    passenger.setdefault("order_history", []).append(order)
    del passenger["order"]

    # üîê –°–∞“õ–ª–∞—à
    save_json(PASSENGER_PATH, passengers)

    # üöò Feedback —Ç—É–≥–º–∞–ª–∞—Ä–∏–Ω–∏ —á–∏“õ–∞—Ä–∏—à
    await send_or_edit_text(
        callback_query,
        text="üöò –ë–∏–∑–Ω–∏–Ω–≥ —Ö–∏–∑–º–∞—Ç–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–≥–∞–Ω–∏–Ω–≥–∏–∑ —É—á—É–Ω —Ä–∞“≥–º–∞—Ç.\n\n“ö—É–π–∏–¥–∞ “≥–∞–π–¥–æ–≤—á–∏–Ω–∏ –±–∞“≥–æ–ª–∞—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üëç –Ø—Ö—à–∏", callback_data=f"feedback_good_{driver_id}"),
                    InlineKeyboardButton(text="üëé –Å–º–æ–Ω", callback_data=f"feedback_bad_{driver_id}")
                ]
            ]
        )
    )

    # ‚úÖ –ô—û–ª–æ–≤—á–∏–≥–∞ —Ç–∞—Å–¥–∏“õ —Ö–∞–±–∞—Ä
    await send_or_edit_text(
        callback_query,
        text="‚úÖ –°–∞—Ñ–∞—Ä –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ —Ç—É–≥–∞–¥–∏! üöò\n\n“≤–∞–º–∫–æ—Ä–ª–∏–≥–∏–Ω–≥–∏–∑ —É—á—É–Ω –∫–∞—Ç—Ç–∞ —Ä–∞“≥–º–∞—Ç! üòä",
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("arrived_no_"))
async def process_arrived_no(callback_query: CallbackQuery):
    data_parts = callback_query.data.split("_")
    driver_id = data_parts[-1]  # arrived_no_<driver_id>

    await callback_query.answer("‚è≥ “≤–∞–π–¥–æ–≤—á–∏ –µ—Ç–∏–± –±–æ—Ä–º–∞–≥–∞–Ω –¥–µ–± “õ–∞–π–¥ —ç—Ç–∏–ª–¥–∏.", show_alert=True)

    # –ô—û–ª–æ–≤—á–∏–≥–∞ —è–Ω–∞ –±–∏—Ä –±–æ—Ä —Ç–∞—Å–¥–∏“õ —Ç—É–≥–º–∞—Å–∏ –±–∏–ª–∞–Ω —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à
    await send_or_edit_text(
        callback_query.message,
        "‚è≥ “≤–∞–π–¥–æ–≤—á–∏ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏–ª–¥–∏.\n\n–ú–∞—à–∏–Ω–∞ –µ—Ç–∏–± –∫–µ–ª–≥–∞–Ω–∏–¥–∞ —Ç–∞—Å–¥–∏“õ–ª–∞—à–∏–Ω–≥–∏–∑–Ω–∏ —Å—û—Ä–∞–π–º–∏–∑.\n\n–ò–ª—Ç–∏–º–æ—Å, –±–∏—Ä–æ–∑ –∫—É—Ç–∏–± —Ç—É—Ä–∏–Ω–≥!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ “≤–∞–π–¥–æ–≤—á–∏ –µ—Ç–∏–± –∫–µ–ª–¥–∏", callback_data=f"arrived_yes_{driver_id}")]
            ]
        )
    )

    # –ê–≥–∞—Ä –∫–µ—Ä–∞–∫ –±—û–ª—Å–∞ “≥–∞–π–¥–æ–≤—á–∏–≥–∞ “≥–∞–º —Ö–∞–±–∞—Ä –±–µ—Ä–∏—à
    try:
        await bot.send_message(
            chat_id=int(driver_id),
            text="‚ùó –ô—û–ª–æ–≤—á–∏ –µ—Ç–∏–± –±–æ—Ä–º–∞–≥–∞–Ω–∏–Ω–≥–∏–∑–Ω–∏ “õ–∞–π–¥ —ç—Ç–¥–∏."
        )
    except Exception as e:
        print(f"‚ùå “≤–∞–π–¥–æ–≤—á–∏–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ: {e}")

@router.callback_query(F.data.startswith("arrived_destination"))
async def process_driver_arrived(callback_query: CallbackQuery):
    data_parts = callback_query.data.split("_")
    driver_id = data_parts[-1]  # arrived_destination_<driver_id>

    drivers = load_json(DRIVER_PATH)
    passengers = load_json(PASSENGER_PATH)

    driver = drivers.get(driver_id)
    if not driver or "order" not in driver:
        await callback_query.answer("–ë—É—é—Ä—Ç–º–∞ —Ç–æ–ø–∏–ª–º–∞–¥–∏.", show_alert=True)
        return

    order = driver["order"]
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # ‚úÖ –°—Ç–∞—Ç—É—Å–Ω–∏ —è–∫—É–Ω–ª–∞—à
    order["status"] = "arrived"
    order.setdefault("status_timestamps", {})["arrived"] = timestamp


    # –°–∞—Ñ–∞—Ä –¥–∞–≤–æ–º–∏–π–ª–∏–≥–∏–Ω–∏ “≥–∏—Å–æ–±–ª–∞—à
    on_the_way_time = order.get("status_timestamps", {}).get("on_the_way")
    arrived_time = order.get("status_timestamps", {}).get("arrived")

    if on_the_way_time and arrived_time:
        # –í–∞“õ—Ç–Ω–∏ “≥–∏—Å–æ–±–ª–∞—à
        on_the_way_dt = datetime.strptime(on_the_way_time, "%Y-%m-%d %H:%M:%S")
        arrived_dt = datetime.strptime(arrived_time, "%Y-%m-%d %H:%M:%S")
        trip_duration = arrived_dt - on_the_way_dt
        hours, remainder = divmod(trip_duration.seconds, 3600)
        minutes, _ = divmod(remainder, 60)
        duration_text = f"{hours} —Å–æ–∞—Ç {minutes} –¥–∞“õ–∏“õ–∞–≥–∞"

        # –°–∞—Ñ–∞—Ä –¥–∞–≤–æ–º–∏–π–ª–∏–≥–∏–Ω–∏ “õ—û—à–∏—à
        duration_message = f"‚úÖ –°–∞—Ñ–∞—Ä —è–∫—É–Ω–ª–∞–Ω–¥–∏.\n\n–°–∞—Ñ–∞—Ä –¥–∞–≤–æ–º–∏–π–ª–∏–≥–∏: {duration_text}.\n\n–ô—û–ª–æ–≤—á–∏–ª–∞—Ä —Ñ–∏–∫—Ä–∏–Ω–∏ –∫—É—Ç–∞–º–∏–∑."
    else:
        duration_message = "‚úÖ –°–∞—Ñ–∞—Ä —è–∫—É–Ω–ª–∞–Ω–¥–∏. –ô—û–ª–æ–≤—á–∏–ª–∞—Ä —Ñ–∏–∫—Ä–∏–Ω–∏ –∫—É—Ç–∞–º–∏–∑."
    
    # üßç‚Äç‚ôÇÔ∏è “≤–∞—Ä –±–∏—Ä accepted_passenger'–≥–∞ —Å—û—Ä–æ–≤ —é–±–æ—Ä–∏—à
    accepted_passengers = order.get("accepted_passengers", [])

    # ‚úÖ “≤–∞—Ä –±–∏—Ä accepted_passenger —É—á—É–Ω —Å—Ç–∞—Ç—É—Å–Ω–∏ "arrived" “õ–∏–ª–∏—à
    for passenger_id in accepted_passengers:
        passenger = passengers.get(passenger_id)
        if not passenger or "order" not in passenger:
            continue

        p_order = passenger["order"]

        if p_order.get("status") != "arrived":
            # üîµ –ô—û–ª–æ–≤—á–∏ —Å–∞—Ñ–∞—Ä–∏–Ω–∏ arrived “õ–∏–ª–∏—à
            p_order["status"] = "arrived"
            p_order.setdefault("status_timestamps", {})["arrived"] = timestamp

            # üü° –¢–∞—Ä–∏—Ö–≥–∞ —Å–∞“õ–ª–∞—à
            passenger.setdefault("order_history", []).append(p_order)
            del passenger["order"]

        try:
            await bot.send_message(
                chat_id=int(passenger_id),
                text="üöò –ë–∏–∑–Ω–∏–Ω–≥ —Ö–∏–∑–º–∞—Ç–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–≥–∞–Ω–∏–Ω–≥–∏–∑ —É—á—É–Ω —Ä–∞“≥–º–∞—Ç.\n\n“ö—É–π–∏–¥–∞ “≥–∞–π–¥–æ–≤—á–∏–Ω–∏ –±–∞“≥–æ–ª–∞—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="üëç –Ø—Ö—à–∏", callback_data=f"feedback_good_{driver_id}"),
                            InlineKeyboardButton(text="üëé –Å–º–æ–Ω", callback_data=f"feedback_bad_{driver_id}")
                        ]
                    ]
                )
            )
        except Exception as e:
            print(f"‚ùå –ô—û–ª–æ–≤—á–∏–≥–∞ —Å—û—Ä–æ–≤ —é–±–æ—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ: {e}")

    # üöó “≤–∞–π–¥–æ–≤—á–∏–≥–∞ —Ç–∞—Å–¥–∏“õ —Ö–∞–±–∞—Ä
    await send_or_edit_text(
        callback_query.message,
        duration_message,
        reply_markup=None
    )

    # üîê –§–∞–π–ª–Ω–∏ —Å–∞“õ–ª–∞—à
        # üßæ –ô—û–ª–æ–≤—á–∏–ª–∞—Ä –º–∞—ä–ª—É–º–æ—Ç–∏–Ω–∏ —Å–∞“õ–ª–∞—à
    save_json(DRIVER_PATH, drivers)
    save_json(PASSENGER_PATH, passengers)

@router.callback_query(lambda c: c.data.startswith("feedback_"))
async def process_feedback(callback_query: CallbackQuery):
    data = callback_query.data
    parts = data.split("_")
    
    if len(parts) < 3:
        await callback_query.answer("‚ùå –ù–æ—Ç—û“ì—Ä–∏ —Ñ–æ—Ä–º–∞—Ç.", show_alert=True)
        return

    _, feedback_type, driver_id = parts
    passenger_id = str(callback_query.from_user.id)

    passengers = load_json(PASSENGER_PATH)
    drivers = load_json(DRIVER_PATH)

    passenger = passengers.get(passenger_id)
    driver = drivers.get(driver_id)

    if not passenger or not driver:
        await callback_query.answer("‚ùå “≤–∞–π–¥–æ–≤—á–∏ —ë–∫–∏ –π—û–ª–æ–≤—á–∏ —Ç–æ–ø–∏–ª–º–∞–¥–∏.", show_alert=True)
        return

    # ‚≠ê Feedback
    feedback = 1 if feedback_type == "good" else -1

    if "rating" not in driver:
        driver["rating"] = 0
    if "feedbacks" not in driver:
        driver["feedbacks"] = []

    driver["feedbacks"].append(feedback)

    # –†–µ–π—Ç–∏–Ω–≥–Ω–∏ “õ–∞–π—Ç–∞ “≥–∏—Å–æ–±–ª–∞—à
    driver["rating"] = sum(driver["feedbacks"]) / len(driver["feedbacks"])

    # –ô—û–ª–æ–≤—á–∏–Ω–∏–Ω–≥ –±—É—é—Ä—Ç–º–∞—Å–∏–Ω–∏ done “õ–∏–ª–∏—à (–∞–≥–∞—Ä “≥–∞–ª–∏ —Ç–∞—Ä–∏—Ö–≥–∞ —û—Ç–∫–∞–∑–∏–ª–º–∞–≥–∞–Ω –±—û–ª—Å–∞)
    if "order" in passenger:
        order = passenger["order"]

        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        order["status"] = "arrived"
        order.setdefault("status_timestamps", {})["arrived"] = now

        passenger.setdefault("order_history", []).append(order)
        del passenger["order"]

    # üîê –°–∞“õ–ª–∞—à
    save_json(DRIVER_PATH, drivers)
    save_json(PASSENGER_PATH, passengers)

    await send_or_edit_text(callback_query, "‚úÖ –ë–∞“≥–æ —É—á—É–Ω —Ä–∞“≥–º–∞—Ç! –ë—É—é—Ä—Ç–º–∞–Ω–≥–∏–∑ —ë–ø–∏–ª–¥–∏ –≤–∞ —Ç–∞—Ä–∏—Ö–≥–∞ —û—Ç–∫–∞–∑–∏–ª–¥–∏.")

from aiogram.filters import CommandStart, CommandObject

@router.message(CommandStart(deep_link=True))
@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext, bot: Bot, command: CommandObject):
    user_id = str(message.from_user.id)
    referral_id = command.args  # start –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–¥–∞–≥–∏ referral ID

    logging.info(f"–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ ID: {user_id}")
    
    # üìÅ –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–¥–∞–Ω –æ–ª–∏—à
    status_data = load_json(USER_STATUS_PATH)
    user_status = status_data.get(user_id, {}).get("status", "new_user")
    logging.info(f"–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–Ω–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∏: {user_status}")

    # üìå Referral'–Ω–∏ “õ–∞–π–¥ —ç—Ç–∏—à (—Ñ–∞“õ–∞—Ç –±–∏—Ä–∏–Ω—á–∏ –º–∞—Ä—Ç–∞ –∫–∏—Ä–≥–∞–Ω–¥–∞)
    if referral_id and referral_id != user_id:
        referrer_id = referral_id
        # –ê–≥–∞—Ä –±—É —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ –∞–≤–≤–∞–ª —Ä—û–π—Ö–∞—Ç–¥–∞ –±—û–ª–º–∞—Å–∞
        if user_id not in status_data:
            status_data[user_id] = {
                "status": "new_user",
                  "referrer": referrer_id,  # –ë–∏—Ä–∏–Ω—á–∏ —Ç–∞–∫–ª–∏—Ñ “õ–∏–ª–≥–∞–Ω –æ–¥–∞–º
                  "first_name": message.from_user.first_name
            }
            # Referrer'–Ω–∏–Ω–≥ invited_users —Ä—û–π—Ö–∞—Ç–∏–≥–∞ “õ—û—à–∞–º–∏–∑
            if referrer_id not in status_data:
                status_data[referrer_id] = {"status": "new_user", "invited_users": []}
            status_data[referrer_id].setdefault("invited_users", [])
            if user_id not in status_data[referrer_id]["invited_users"]:
                status_data[referrer_id]["invited_users"].append(user_id)
            save_json(USER_STATUS_PATH, status_data)
        else:
            # –ê–≥–∞—Ä –∞–ª–ª–∞“õ–∞—á–æ–Ω –±–∞–∑–∞–¥–∞ –±—û–ª—Å–∞, –∞–º–º–æ first_name –π—û“õ –±—û–ª—Å–∞, “õ—û—à–∞–º–∏–∑
            if "first_name" not in status_data[user_id]:
                status_data[user_id]["first_name"] = message.from_user.first_name
                save_json(USER_STATUS_PATH, status_data)
    
    else:
        # –ê–≥–∞—Ä referral –±—û–ª–º–∞—Å–∞ “≥–∞–º, first_name —Å–∞“õ–ª–∞–± “õ—û–π–∏—à
        if user_id not in status_data:
            status_data[user_id] = {
                "status": "new_user",
                "first_name": message.from_user.first_name
            }
            save_json(USER_STATUS_PATH, status_data)
        else:
            if "first_name" not in status_data[user_id]:
                status_data[user_id]["first_name"] = message.from_user.first_name
                save_json(USER_STATUS_PATH, status_data)

    # ‚û°Ô∏è –ö–µ–π–∏–Ω–≥–∏ “õ–∏—Å–º: –º–∞–≤–∂—É–¥ –∫–æ–¥–∏–Ω–≥–∏–∑–Ω–∏ —Å–∞“õ–ª–∞–π–º–∏–∑
    if user_status == "new_user":
        text = "ü§ñ –ë–æ—Ç–≥–∞ —Ö—É—à –∫–µ–ª–∏–±—Å–∏–∑!\n–ö–∏–º–ª–∏–≥–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:"
        await send_or_edit_last(user_id, state, bot, text, start_kb(int(user_id)))
    else:
        if user_status == "driver":
            if is_driver_approved(user_id):
                await message.answer("üöò “≤–∞–π–¥–æ–≤—á–∏ —É—á—É–Ω –º–µ–Ω—é:", reply_markup=start_kb(int(user_id)))
            else:
                text_driver = "–ô—û–ª–æ–≤—á–∏ –±—É—é—Ä—Ç–º–∞–ª–∞—Ä–∏–Ω–∏ –∫—û—Ä–∏—à —É—á—É–Ω –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥!"
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üßæ –ú–∞—ä–ª—É–º–æ—Ç —é–±–æ—Ä–∏—à", callback_data="haydovchi")],
                    [InlineKeyboardButton(text="–ú–∞—ä–ª—É–º–æ—Ç “≥–æ–ª–∞—Ç–∏", callback_data="is_driver_approved_check")]
                ])
                await message.answer(text_driver, reply_markup=keyboard)
        elif user_status == "passenger":
            text = "üè† –ë–æ—à –º–µ–Ω—é:"
            await message.answer(text, reply_markup=start_kb(int(user_id)))

@router.callback_query(F.data == "invite_friends")
async def invite_friends_callback(callback_query: types.CallbackQuery, bot: Bot):
    user_id = str(callback_query.from_user.id)
    bot_username = (await bot.me()).username
    invite_link = f"https://t.me/{bot_username}?start={user_id}"

    text = (
        "üéâ –î—û—Å—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞–∫–ª–∏—Ñ “õ–∏–ª–∏–Ω–≥ –≤–∞ –±–æ–Ω—É—Å–ª–∞—Ä –æ–ª–∏–Ω–≥!\n\n"
        f"“≤–∞–≤–æ–ª–∞–Ω–≥–∏–∑: {invite_link}\n\n"
        "–î—û—Å—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑ —à—É “≥–∞–≤–æ–ª–∞ –æ—Ä“õ–∞–ª–∏ –±–æ—Ç–≥–∞ –∫–∏—Ä—Å–∞, —Å–∏–∑–≥–∞ –±–æ–Ω—É—Å —ë–∑–∏–ª–∞–¥–∏! üöÄ"
    )
    await callback_query.message.answer(text)
    await callback_query.answer()

@router.callback_query(F.data == "my_stats")
async def show_my_stats(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)
    
    # üìÅ –§–∞–π–ª–¥–∞–Ω —Å—Ç–∞—Ç—É—Å–ª–∞—Ä –æ–ª–∞–º–∏–∑
    status_data = load_json(USER_STATUS_PATH)
    user_info = status_data.get(user_id, {})
    
    # –ù–µ—á—Ç–∞ –¥—û—Å—Ç —Ç–∞–∫–ª–∏—Ñ “õ–∏–ª–≥–∞–Ω–∏
    invited_users = user_info.get("invited_users", [])
    invited_count = len(invited_users)

    # –£–Ω–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∏ (driver / passenger)
    user_status = user_info.get("status", "–ê–Ω–∏“õ–ª–∞–Ω–º–∞–≥–∞–Ω")

    # üìä –ê—Å–æ—Å–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    text = (
        f"üìä –°–∏–∑–Ω–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üë§ –°—Ç–∞—Ç—É—Å: {user_status.capitalize()}\n"
        f"üë• –¢–∞–∫–ª–∏—Ñ “õ–∏–ª–∏–Ω–≥–∞–Ω –¥—û—Å—Ç–ª–∞—Ä —Å–æ–Ω–∏: {invited_count} —Ç–∞\n"
    )

    # üë• –ê–≥–∞—Ä —Ç–∞–∫–ª–∏—Ñ “õ–∏–ª–∏–Ω–≥–∞–Ω–ª–∞—Ä –±–æ—Ä –±—û–ª—Å–∞, —É–ª–∞—Ä–Ω–∏–Ω–≥ –∏—Å–º–ª–∞—Ä–∏–Ω–∏ —á–∏“õ–∞—Ä–∞–º–∏–∑
    if invited_users:
        text += "\nüßë‚Äçü§ù‚Äçüßë –¢–∞–∫–ª–∏—Ñ “õ–∏–ª–∏–Ω–≥–∞–Ω –¥—û—Å—Ç–ª–∞—Ä:\n"
        for idx, invited_id in enumerate(invited_users, 1):
            invited_info = status_data.get(str(invited_id), {})
            first_name = invited_info.get("first_name", "–ù–æ–º–∞—ä–ª—É–º")
            text += f"{idx}. {first_name}\n"
    else:
        text += "\n‚è≥ “≤–∞–ª–∏ –¥—û—Å—Ç —Ç–∞–∫–ª–∏—Ñ “õ–∏–ª–∏–Ω–º–∞–≥–∞–Ω."

    await callback_query.message.answer(text)
    await callback_query.answer()

# ‚úÖ 2. /admin –±—É–π—Ä—É“ì–∏ –æ—Ä“õ–∞–ª–∏ approval panel –æ—á–∏—à
#@router.callback_query(Text("approve_panel"))
@router.callback_query(lambda c: c.data == "approve_panel")
async def open_admin_panel(callback_query: CallbackQuery):
    user_id = int(callback_query.from_user.id)
    if str(user_id) not in ADMINS:
        await callback_query.message.answer("üö´ –°–∏–∑–¥–∞ —Ä—É—Ö—Å–∞—Ç –π—û“õ.")
        return

    drivers = load_drivers()
    pending_drivers = {
        k: v for k, v in drivers.items()
        if v.get("status") == "driver" and not v.get("approved", False)
    }

    if not pending_drivers:
        await callback_query.message.answer("‚è≥ –¢–∞—Å–¥–∏“õ –∫—É—Ça—ë—Ç–≥–∞–Ω “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä –π—û“õ.")
        return

    for driver_id, data in pending_drivers.items():
        profile = data.get("profile") or data.get("driver_data")
        if profile is None:
            logging.warning(f"–ü—Ä–æ—Ñ–∏–ª—å —Ç–æ–ø–∏–ª–º–∞–¥–∏: driver_id={driver_id}, data={data}")
            await callback_query.message.answer(f"‚ö†Ô∏è –•–∞—Ç–æ–ª–∏–∫: “≤–∞–π–¥–æ–≤—á–∏ {driver_id} –ø—Ä–æ—Ñ–∏–ª–∏ —Ç–æ–ø–∏–ª–º–∞–¥–∏.")
            continue
        text = (
            f"üë§ –ò—Å–º: {profile['name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {profile['phone']}\n"
            f"üöò –ú–∞—à–∏–Ω–∞: {profile['car_model']} ({profile['car_number']})\n"
            #f"üí∫ –ñ–æ–π–ª–∞—Ä —Å–æ–Ω–∏: {profile['seat_count']}"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –¢–∞—Å–¥–∏“õ–ª–∞—à", callback_data=f"approve_driver:{driver_id}")],
            [InlineKeyboardButton(text="‚ùå –†–∞–¥ —ç—Ç–∏—à", callback_data=f"reject_driver:{user_id}")]
        ])

        await callback_query.message.answer(text, reply_markup=keyboard)

# ‚úÖ 3. Callback: –¢–∞—Å–¥–∏“õ–ª–∞—à —Ç—É–≥–º–∞—Å–∏
@router.callback_query(F.data.startswith("approve_driver:"))
async def approve_driver(callback_query: CallbackQuery, state: FSMContext):
    driver_id = callback_query.data.split(":")[1]
    users = load_drivers()

    if driver_id not in users:
        await callback_query.message.answer(f"‚ö†Ô∏è –•–∞—Ç–æ–ª–∏–∫: “≤–∞–π–¥–æ–≤—á–∏ {driver_id} —Ç–æ–ø–∏–ª–º–∞–¥–∏.")
        return
    
    user = users[driver_id]
    user["approved"] = True
    save_driver(users)

    await callback_query.message.answer(f"‚úÖ “≤–∞–π–¥–æ–≤—á–∏ {driver_id} –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–¥–∏.")

    # ‚úÖ “≤–∞–π–¥–æ–≤—á–∏–≥–∞ —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–≥–∞–Ω–ª–∏–≥–∏ “≥–∞“õ–∏–¥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à
    try:
        await bot.send_message(
            int(driver_id),
            text="‚úÖ –°–∏–∑ –∞–¥–º–∏–Ω —Ç–æ–º–æ–Ω–∏–¥–∞–Ω —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–¥–∏–Ω–≥–∏–∑!\n–≠–Ω–¥–∏ –∞—Å–æ—Å–∏–π –º–µ–Ω—é–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω.",
            reply_markup=start_kb(int(driver_id))
        )
    except Exception as e:
        await callback_query.message.answer(f"‚ö†Ô∏è –•–∞–±–∞—Ä —é–±–æ—Ä–∏–± –±—û–ª–º–∞–¥–∏: {e}")

# –ú–∞—Å–∞–ª–∞–Ω, –∞–¥–º–∏–Ω–ª–∞—Ä–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à
async def notify_admins_about_new_driver(driver_id: int, driver_data: dict):
    text = (
        f"üÜï –¢–∞—Å–¥–∏“õ –∫—É—Ça—ë—Ç–≥–∞–Ω —è–Ω–≥–∏ “≥–∞–π–¥–æ–≤—á–∏:\n\n"
        f"üë§ –ò—Å–º: {driver_data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {driver_data['phone']}\n"
        f"üöò –ú–∞—à–∏–Ω–∞: {driver_data['car_model']} ({driver_data['car_number']})\n"
#        f"üí∫ –ñ–æ–π–ª–∞—Ä —Å–æ–Ω–∏: {driver_data['seat_count']}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[ 
        [InlineKeyboardButton(text="‚úÖ –¢–∞—Å–¥–∏“õ–ª–∞—à", callback_data=f"approve_driver:{driver_id}")]
    ])

    for admin_id in ADMINS:
        try:
            # –ê–¥–º–∏–Ω–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à
            await bot.send_message(admin_id, text, reply_markup=keyboard)
        except Exception as e:
            logging.error(f"‚ö†Ô∏è –ê–¥–º–∏–Ω–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏–± –±—û–ª–º–∞–¥–∏ ({admin_id}): {e}")

async def check_today_departures(bot):
    today = datetime.today().strftime("%Y-%m-%d")

    if not os.path.exists(DRIVER_PATH):
        return

    drivers = load_json(DRIVER_PATH)

    for driver_id, driver_data in drivers.items():
        order = driver_data.get("order", {})
        if order and order.get("date") == today and order.get("status") == "new":
            await bot.send_message(
                chat_id=int(driver_id),
                text="üìÖ –ë—É–≥—É–Ω –π—û–ª–≥–∞ —á–∏“õ–∏—à –∫—É–Ω–∏–Ω–≥–∏–∑!\n\nüöò –ô—û–ª–≥–∞ —á–∏“õ–¥–∏–Ω–≥–∏–∑–º–∏?",
                reply_markup=create_departure_confirmation_keyboard(driver_id)
            )

def get_bot_statistics():
    users = load_users()           # Foydalanuvchilar statuslari
    passengers = load_passenger()  # Yo‚Äòlovchi buyurtmalari
    drivers = load_drivers()       # Haydovchi buyurtmalari

    total_passengers = sum(1 for u in users.values() if u.get("status") == "passenger")
    total_drivers = sum(1 for u in users.values() if u.get("status") == "driver")

    total_orders_passengers = 0
    total_orders_drivers = 0
    active_orders = 0
    active_orders_passengers = 0
    active_orders_drivers = 0

    # Yo‚Äòlovchilar buyurt–º–∞ —Ç–∞—Ä–∏—Ö–∏–Ω–∏ “≥–∏—Å–æ–±–ª–∞—à
    for passenger_data in passengers.values():
        history = passenger_data.get("order_history", [])
        total_orders_passengers += len(history)

        if passenger_data.get("order"):  # faol buyurtma –±–æ—Ä
            active_orders_passengers += 1
            active_orders += 1

    # Haydovchilar buyurt–º–∞ —Ç–∞—Ä–∏—Ö–∏–Ω–∏ “≥–∏—Å–æ–±–ª–∞—à
    for driver_data in drivers.values():
        history = driver_data.get("order_history", [])
        total_orders_drivers += len(history)

        if driver_data.get("order"):  # faol buyurtma –±–æ—Ä
            active_orders_drivers += 1
            active_orders += 1

    total_orders = total_orders_passengers + total_orders_drivers

    return {
        "active_orders": active_orders,
        "total_orders": total_orders,
        "total_passengers": total_passengers,
        "total_orders_passengers": total_orders_passengers,
        "active_orders_passengers": active_orders_passengers,
        "total_drivers": total_drivers,
        "total_orders_drivers": total_orders_drivers,
        "active_orders_drivers": active_orders_drivers
    }

# "üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@router.callback_query(F.data == "statistika")
async def show_statistics(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    # –°–∏–∑–Ω–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–∏–∫–∞–∏–Ω–≥–∏–∑
    await callback_query.message.answer("“≤–∞–π–¥–æ–≤—á–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Å–∏ —Ç–∞–π—ë—Ä–ª–∞–Ω–º–æ“õ–¥–∞...")
    stats = get_bot_statistics()

    text = (
        "<b>/statistics</b>\n"
        "‚Ü≥ <b>–ë–æ—Ç–¥–∞–≥–∏ –∂–æ—Ä–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"- üìÖ –ë—É–≥—É–Ω–≥–∏ —Å–∞—Ñ–∞—Ä–ª–∞—Ä: {stats['total_orders']} —Ç–∞\n"
        f"- üöó “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä: {stats['total_drivers']} —Ç–∞\n"
        f"- üßç‚Äç‚ôÇÔ∏è –ô—û–ª–æ–≤—á–∏–ª–∞—Ä —Å–æ–Ω–∏: {stats['total_passengers']} —Ç–∞\n"
        f"- ‚úÖ –Ø–∫—É–Ω–ª–∞–Ω–≥–∞–Ω –±—É—é—Ä—Ç–º–∞–ª–∞—Ä: {stats['total_orders'] - stats['active_orders']} —Ç–∞\n"
        f"- ‚è≥ –ñ–æ—Ä–∏–π –±—É—é—Ä—Ç–º–∞–ª–∞—Ä: {stats['active_orders']} —Ç–∞\n"
        f"- ‚≠ê –é—Ä—Ç–∞—á–∞ —Ä–µ–π—Ç–∏–Ω–≥: 4.8\n"      # –ê–≥–∞—Ä —Ä–µ–∞–ª “≥–∏—Å–æ–±-–∫–∏—Ç–æ–± –±—û–ª—Å–∞, –¥–∏–Ω–∞–º–∏–∫ “õ–∏–ª–∏–± –æ–ª–∏–± –∫–µ–ª–∏—à –º—É–º–∫–∏–Ω
        f"- üí¨ –ë—É–≥—É–Ω–≥–∏ feedback'–ª–∞—Ä: 20 —Ç–∞\n\n"  # –ë—É “≥–∞–º —Ö—É–¥–¥–∏ —à—É–Ω–¥–∞–π
        f"- üì¶ “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä –±—É—é—Ä—Ç–º–∞–ª–∞—Ä: {stats['total_orders_drivers']}\n"
        f"- ‚è≥ –ñ–∞—Ä–∞—ë–Ω–¥–∞–≥–∏ “≤–∞–π–¥–æ–≤—á–∏ –±—É—é—Ä—Ç–º–∞–ª–∞—Ä–∏: {stats['active_orders_drivers']}\n\n"
        f"- üì¶ –ô—û–ª–æ–≤—á–∏–ª–∞—Ä –±—É—é—Ä—Ç–º–∞–ª–∞—Ä: {stats['total_orders_passengers']}\n"
        f"- ‚è≥ –ñ–∞—Ä–∞—ë–Ω–¥–∞–≥–∏ –ô—û–ª–æ–≤—á–∏ –±—É—é—Ä—Ç–º–∞–ª–∞—Ä–∏: {stats['active_orders_passengers']}"
    )

    await callback_query.message.answer(text, parse_mode="HTML")

# “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏ —á–∏“õ–∞—Ä–∞–¥–∏–≥–∞–Ω —Ñ—É–Ω–∫—Ü–∏—è
@router.callback_query(F.data == "show_drivers_list")
async def show_drivers_list(callback_query: CallbackQuery):
    drivers = load_drivers()

    text = "<b>üöó “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏:</b>\n\n"
    for user_id, driver_data in drivers.items():
        profile = driver_data.get("profile", {})
        name = profile.get("name", "–ù–æ–º–∞—ä–ª—É–º")
        rating = driver_data.get("rating", 0)
        
        accepted_passengers = driver_data.get("order", {}).get("accepted_passengers", [])
        accepted_count = len(accepted_passengers)
        total_income = sum(p.get("price", 0) for p in accepted_passengers)

        orders = len(driver_data.get("order_history", []))

        text += (
            f"üë§ <b>{name}</b> (ID: <code>{user_id}</code>)\n"
            f"‚Ä¢ üì¶ –ë—É—é—Ä—Ç–º–∞–ª–∞—Ä: {orders} —Ç–∞\n"
            f"‚Ä¢ üßç‚Äç‚ôÇÔ∏è “ö–∞–±—É–ª “õ–∏–ª–∏–Ω–≥–∞–Ω –π—û–ª–æ–≤—á–∏–ª–∞—Ä: {accepted_count} —Ç–∞\n"
            f"‚Ä¢ ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n"
            f"‚Ä¢ üí∞ –î–∞—Ä–æ–º–∞–¥: {total_income:,} —Å—û–º\n\n"
        )

    await callback_query.message.answer(text, parse_mode="HTML")


@router.callback_query(lambda c: c.data in [
    "orders", "driver", "passenger", "change_user_status", "choose_role",
    "admin", "upload_files"
] or c.data.endswith("_dan"))
async def handle_callback(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    data = callback_query.data

    logging.info(f"Callback data: {data}")  # Debug

    if data == "orders":
        # –ë—É—é—Ä—Ç–º–∞–ª–∞—Ä–Ω–∏ –∫—û—Ä—Å–∞—Ç–∏—à
        await callback_query.message.answer("–ë—É–π—Ä—É—Ç–º–∞ “õ—û—à–∏—à–Ω–∏ –±–æ—à–ª–∞–π–º–∏–∑...")
        from handlers.order import start_order
        await start_order(callback_query.message, state)

    elif data == "driver":
        save_user_status(user_id, "driver")

        # –¢–∞—Å–¥–∏“õ–ª–∞–Ω–≥–∞–Ω “≥–∞–π–¥–æ–≤—á–∏ —Ç–µ–∫—à–∏—Ä–∏–ª–∞–¥–∏
        if is_driver_approved(user_id):
            await callback_query.message.edit_text("üöò “≤–∞–π–¥–æ–≤—á–∏ —É—á—É–Ω –º–µ–Ω—é:", reply_markup=start_kb(user_id))
        else:
            await callback_query.message.edit_text(
                "–ô—û–ª–æ–≤—á–∏ –±—É—é—Ä—Ç–º–∞–ª–∞—Ä–∏–Ω–∏ –∫—û—Ä–∏—à —É—á—É–Ω –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üßæ –ú–∞—ä–ª—É–º–æ—Ç —é–±–æ—Ä–∏—à", callback_data="haydovchi")],
                    [InlineKeyboardButton(text="–ú–∞—ä–ª—É–º–æ—Ç “≥–æ–ª–∞—Ç–∏", callback_data="is_driver_approved_check")]
                ])
            )

    elif data == "passenger":
        save_user_status(user_id, "passenger")
        await callback_query.message.edit_text(f"üè† *–ë–æ—à –º–µ–Ω—é:*", reply_markup=None, parse_mode="Markdown")
        await callback_query.message.answer("–ú–∞–Ω–∑–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞—à:", reply_markup=start_kb(user_id))

    elif data == "change_user_status":
        save_user_status(user_id, "new_user")
        await callback_query.message.edit_reply_markup(reply_markup=None)
        await callback_query.message.answer("üè† –ë–æ—à –º–µ–Ω—é:", reply_markup=start_kb(user_id))

    elif data == "admin":
        if str(user_id) not in ADMINS:
            return

        # –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç—É–∑–∏—à
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõ† “≤–∞–π–¥–æ–≤—á–∏ —Ç–∞—Å–¥–∏“ì–∏", callback_data="approve_panel")],
            [InlineKeyboardButton(text="üìã –ë—É—é—Ä—Ç–º–∞–ª–∞—Ä", callback_data="view_order")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistika")],
            [InlineKeyboardButton(text="üìÅ –§–∞–π–ª–ª–∞—Ä–Ω–∏ —é–∫–ª–∞—à", callback_data="upload_files")]
        ])

        #await callback_query.message.answer("üëÆ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª!", reply_markup=keyboard)
        await callback_query.message.edit_text("üëÆ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª!", reply_markup=keyboard, parse_mode="Markdown")

    
    elif data == "upload_files":  # –ê–≥–∞—Ä "–§–∞–π–ª–ª–∞—Ä–Ω–∏ —é–∫–ª–∞—à" —Ç—É–≥–º–∞—Å–∏ –±–æ—Å–∏–ª—Å–∞
        await send_json_files(callback_query.message)

    else:
        logging.warning(f"handlers/start.py –ù–æ–º–∞—ä–ª—É–º callback data: {data}")

    # –ë—É –µ—Ä–¥–∞ "–ú–∞—Ç–Ω —ë–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —û–∑–≥–∞—Ä–º–∞–≥–∞–Ω" —Ö–∞—Ç–æ—Å–∏ –±—û–ª–∏—à–∏ –º—É–º–∫–∏–Ω, —à—É–Ω–≥–∞ –∫—û—Ä–∞, 
    # –±—É –∂–∞–≤–æ–±–Ω–∏ –æ–ª–∏—à–≥–∞ —É—Ä–∏–Ω–∏—à–Ω–∏–Ω–≥ —û–∑–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–≥–∞–Ω.
    try:
        await callback_query.answer("–°–∏–∑ —Ç–∞–Ω–ª–∞–¥–∏–Ω–≥–∏–∑: " + data)
    except TelegramBadRequest:
        pass  # "Message is not modified" —ë–∫–∏ —à—É–Ω–≥–∞ —û—Ö—à–∞—à —Ö–∞—Ç–æ —á–∏“õ—Å–∞, –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–∞–¥–∏

#@router.message(Command("admin"))
#async def admin_command(message: Message, state: FSMContext, bot: Bot):
#    user_id = message.from_user.id
#    if str(user_id) not in ADMINS:
#            return
#    await message.answer("üëÆ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª!", reply_markup=start_kb(user_id))
#    #await message.edit_text("üëÆ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª!", reply_markup=keyboard, parse_mode="Markdown")

from aiogram.types.input_file import FSInputFile

async def send_json_files(message):
    try:
        # –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä–Ω–∏ `.json` —Ñ–∞–π–ª–∏–¥–∞–Ω —é–∫–ª–∞—à
        file = FSInputFile(USER_STATUS_PATH)
        await message.answer_document(file, caption="–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏")

        # “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä–Ω–∏ `.json` —Ñ–∞–π–ª–∏–¥–∞–Ω —é–∫–ª–∞—à
        file = FSInputFile(DRIVER_PATH)
        await message.answer_document(file, caption="“≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏")

        # –ü–∞—Å–∞–∂–∏—Ä–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏
        file = FSInputFile(PASSENGER_PATH)
        await message.answer_document(file, caption="–ü–∞—Å–∞–∂–∏—Ä–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏")

    except Exception as e:
        logging.error(f"–§–∞–π–ª–ª–∞—Ä–Ω–∏ —é–∫–ª–∞—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫: {e}")
        await message.answer("–§–∞–π–ª–ª–∞—Ä–Ω–∏ —é–∫–ª–∞—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏.")
