# handlers/start.py
import matplotlib.pyplot as plt
import logging
import json
from aiogram import Bot, Router, F, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.enums.parse_mode import ParseMode
from aiogram.utils.markdown import hbold, hitalic
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from datetime import datetime
import time
from zoneinfo import ZoneInfo

import sys
import os
sys.path.append(os.path.abspath(os.path.dirname(__file__)))
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from config import TOKEN, INVITE_BONUS

ADMINS = os.getenv("ADMINS")
if ADMINS:
    ADMINS = {int(i) for i in ADMINS.split(",")}
else:
    ADMINS = set()

from states import DriverInfo, AdminStates
from keyboards.start_kb import start_kb
from keyboards.inline import invite_actions_kb
from utils import (
    load_json, save_json, load_users, save_user_status, 
    recommend_multiple_drivers_to_passenger, edit_selected_driver_message, delete_unselected_driver_messages, 
    get_passenger_order, load_passenger, send_or_edit_text, send_or_edit_last, 
    load_drivers, save_driver, load_passenger, save_passenger, create_departure_confirmation_keyboard,
    USER_STATUS_PATH, PASSENGER_PATH, DRIVER_PATH
)

bot = Bot(token=TOKEN)

router = Router()

@router.message(F.contact)
async def handle_contact(message: Message):
    user_id = str(message.from_user.id)

    with open(PASSENGER_PATH, 'r', encoding='utf-8') as file:
        passengers = json.load(file)

    user_data = passengers.get(user_id)
    if not user_data or not user_data.get("waiting_for_phone"):
        return

    phone = message.contact.phone_number
    user_data["phone"] = phone
    user_data["waiting_for_phone"] = False

    with open(PASSENGER_PATH, 'w', encoding='utf-8') as file:
        json.dump(passengers, file, ensure_ascii=False, indent=4)

    await message.answer("‚úÖ –†–∞“õ–∞–º —Å–∞“õ–ª–∞–Ω–¥–∏. –ú–æ—Å “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä —é–±–æ—Ä–∏–ª—è–ø—Ç–∏...", reply_markup=ReplyKeyboardRemove())

    order = user_data.get("order")
    if order:
        await recommend_multiple_drivers_to_passenger(user_id, order, message.bot)


@router.callback_query(F.data.startswith("contact:"))
async def handle_contact_callback(callback: CallbackQuery):
    _, role, target_user_id = callback.data.split(":")
    user = await bot.get_chat(target_user_id)
    username = user.username or "–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ –Ω–æ–º–∞—ä–ª—É–º"
    
    text = f"üì± –ë–æ“ì–ª–∞–Ω–∏—à —É—á—É–Ω —Å–∏–∑–Ω–∏–Ω–≥ –º–æ—Å –∏–Ω—Å–æ–Ω:\n@{username}"
    await callback.message.answer(text)

@router.message(lambda m: m.contact is not None)
async def handle_contact(message: Message):
    user_id = str(message.from_user.id)
    phone_number = message.contact.phone_number

    # JSON'–Ω–∏ –æ—á–∏–±, –º–∞—ä–ª—É–º–æ—Ç–Ω–∏ —è–Ω–≥–∏–ª–∞–π–º–∏–∑
    data = load_json(PASSENGER_PATH)

    if user_id in data:
        data[user_id]["phone"] = phone_number
        print(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —Å–∞“õ–ª–∞–Ω—è–ø—Ç–∏: {phone_number}")

        # JSON'–Ω–∏ “õ–∞–π—Ç–∞ —ë–∑–∏—à
        save_json(PASSENGER_PATH, data)

        await message.answer("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑ —Å–∞“õ–ª–∞–Ω–¥–∏. –ú–æ—Å “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä —é–±–æ—Ä–∏–ª—è–ø—Ç–∏...",
                             reply_markup=ReplyKeyboardRemove())

        # –ê–≥–∞—Ä–¥–∞ –±—É–π—Ä—É—Ç–º–∞ –º–∞–≤–∂—É–¥ –±—û–ª—Å–∞, “õ–∞–π—Ç–∞ –º–æ—Å “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä–Ω–∏ —Ç–∞–≤—Å–∏—è “õ–∏–ª–∞–º–∏–∑
        user_data = data[user_id]
        order = user_data.get("order")
        if order:
            await recommend_multiple_drivers_to_passenger(
                passenger_id=user_id,
                user_order=order,
                bot=message.bot
            )
    else:
        print(f"‚ùå –ô—û–ª–æ–≤—á–∏ PASSENGER_PATH'–¥–∞ —Ç–æ–ø–∏–ª–º–∞–¥–∏: {user_id}")
        await message.answer("‚ùå –ô—û–ª–æ–≤—á–∏ –º–∞—ä–ª—É–º–æ—Ç–∏ —Ç–æ–ø–∏–ª–º–∞–¥–∏.")

# üìû “ö—û–ª–¥–∞ —Ä–∞“õ–∞–º –∫–∏—Ä–∏—Ç–∏–ª–≥–∞–Ω–¥–∞
@router.message(lambda m: m.text and m.text.startswith("+998") and m.text[1:].isdigit())
async def handle_manual_phone(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    phone_text = message.text.strip()

    # üìÅ –§–∞–π–ª–ª–∞—Ä–¥–∞–Ω –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –æ–ª–∞–º–∏–∑
    status_data = load_json(USER_STATUS_PATH)
    passenger_data = load_json(PASSENGER_PATH)

    user_status = status_data.get(user_id, {})
    user_type = user_status.get("status")  # "driver" —ë–∫–∏ "passenger"

    # ‚ùó –†–∞“õ–∞–º —Ç—û–ª–∏“õ —Ñ–æ—Ä–º–∞—Ç–∏–¥–∞ —ç–º–∞—Å ‚Äî 13—Ç–∞ –±–µ–ª–≥–∏ –±—û–ª–º–∞—Å–∞
    if len(phone_text) != 13:
        await message.answer("‚ùó –ò–ª—Ç–∏–º–æ—Å, —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ +998901234567 –∫—û—Ä–∏–Ω–∏—à–∏–¥–∞ —Ç—û–ª–∏“õ –∫–∏—Ä–∏—Ç–∏–Ω–≥.")
        return
    
    # üë§ –ê–≥–∞—Ä –π—û–ª–æ–≤—á–∏ –±—û–ª—Å–∞ –≤–∞ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏ –∫—É—Ç–∏–ª—Å–∞
    if user_type == "passenger":
        passenger = passenger_data.get(user_id)
        if passenger and passenger.get("waiting_for_phone"):
            passenger["phone"] = phone_text
            passenger["waiting_for_phone"] = False

            try:
                with open(PASSENGER_PATH, 'w', encoding='utf-8') as f:
                    json.dump(passenger_data, f, ensure_ascii=False, indent=4)
            except Exception as e:
                await message.answer("‚ùó –†–∞“õ–∞–º–Ω–∏ —Å–∞“õ–ª–∞—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏. –ò–ª—Ç–∏–º–æ—Å, “õ–∞–π—Ç–∞ —É—Ä–∏–Ω–∏–Ω–≥.")
                logging.error(f"–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º —Å–∞“õ–ª–∞—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫: {e}")

            await message.answer("‚úÖ –†–∞“õ–∞–º —Å–∞“õ–ª–∞–Ω–¥–∏. –ú–æ—Å “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä —é–±–æ—Ä–∏–ª—è–ø—Ç–∏...", reply_markup=types.ReplyKeyboardRemove())

            order = passenger.get("order")
            if order:
                await recommend_multiple_drivers_to_passenger(user_id, order, message.bot)
        return

    # üöó –ê–≥–∞—Ä “≥–∞–π–¥–æ–≤—á–∏ –±—û–ª—Å–∞ ‚Äî —Ä–∞“õ–∞–º–Ω–∏ —Å–∞“õ–ª–∞–±, –∞–Ω–∫–µ—Ç–∞ –¥–∞–≤–æ–º —ç—Ç—Ç–∏—Ä–∏–ª–∞–¥–∏
    elif user_type == "driver":
        await state.update_data(phone=phone_text)
        await message.answer("–ú–∞—à–∏–Ω–∞ —Ä—É—Å—É–º–∏ (–º–∞—Å–∞–ª–∞–Ω: Nexia 3):")
        await state.set_state(DriverInfo.car_model)
        return

    # üëª –ê–≥–∞—Ä –∞–Ω–∏“õ–ª–∞–Ω–º–∞–≥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ –±—û–ª—Å–∞ ‚Äî –∂–∞–≤–æ–± –±–µ—Ä–º–∞–π–º–∏–∑
    return


async def ask_for_phone_number(message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìû –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–Ω–∏ —é–±–æ—Ä–∏—à", request_contact=True)],
            [KeyboardButton(text="üì± “ö—û–ª–¥–∞ —Ä–∞“õ–∞–º –∫–∏—Ä–∏—Ç–∏—à")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        "üì± –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥:\n\n"
        "1. –ê–≤—Ç–æ–º–∞—Ç–∏–∫: 'üìû –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–Ω–∏ —é–±–æ—Ä–∏—à' —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥\n"
        "2. –Å–∫–∏ 'üì± “ö—û–ª–¥–∞ —Ä–∞“õ–∞–º –∫–∏—Ä–∏—Ç–∏—à' —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–±, —Ä–∞“õ–∞–º–Ω–∏ —û–∑–∏–Ω–≥–∏–∑ –∫–∏—Ä–∏—Ç–∏–Ω–≥",
        reply_markup=keyboard
    )

async def notify_driver(driver_id: str, passenger_id: str, passenger_order: dict):
    text = (
        f"üßç‚Äç‚ôÇÔ∏è *–ô—û–ª–æ–≤—á–∏ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏:*\n"
        f"üìç –ú–∞–Ω–∑–∏–ª: {passenger_order.get('location')}\n"
        f"üïì –í–∞“õ—Ç: {passenger_order.get('time')}\n"
        f"üìû –ê–ª–æ“õ–∞: @{passenger_order.get('username', passenger_id)}"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ “ö–∞–±—É–ª “õ–∏–ª–∏—à", callback_data=f"accept_passenger_{passenger_id}")]
        ]
    )

    await bot.send_message(
        chat_id=int(driver_id),
        text=text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@router.callback_query(lambda c: c.data.startswith("select_driver_"))
async def process_driver_selection(callback: CallbackQuery):
    driver_id = callback.data.split("_")[-1]
    passenger_id = callback.from_user.id

    order = get_passenger_order(passenger_id)
    if not order:
        return await callback.message.answer("–ë—É–π—Ä—É—Ç–º–∞ —Ç–æ–ø–∏–ª–º–∞–¥–∏.")

    order["username"] = callback.from_user.username
    await notify_driver(driver_id, passenger_id, order)
    await callback.message.answer("“≤–∞–π–¥–æ–≤—á–∏–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏–ª–¥–∏!")

from asyncio import create_task, sleep

# “≤–∞—Ä –±–∏—Ä –π—û–ª–æ–≤—á–∏ —É—á—É–Ω —Ç–∞–π–º–µ—Ä–ª–∞—Ä–Ω–∏ —Å–∞“õ–ª–∞—à
pending_timers = {}

@router.callback_query(lambda c: c.data.startswith("choose_driver_"))
async def process_driver_choice(callback_query: CallbackQuery):
    passenger_id = str(callback_query.from_user.id)
    driver_id = callback_query.data.split("_")[-1]

    # JSON —Ñ–∞–π–ª–ª–∞—Ä–¥–∞–Ω –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –æ–ª
    passengers = load_json(PASSENGER_PATH)
    drivers = load_json(DRIVER_PATH)

    passenger = passengers.get(passenger_id)
    driver = drivers.get(driver_id)

    if not passenger or not driver:
        await callback_query.answer("–ú–∞—ä–ª—É–º–æ—Ç —Ç–æ–ø–∏–ª–º–∞–¥–∏.")
        return
    
    order = passenger.get("order", {})

    # ‚úÖ –ê–≥–∞—Ä –π—û–ª–æ–≤—á–∏ –∞–ª–ª–∞“õ–∞—á–æ–Ω “≥–∞–π–¥–æ–≤—á–∏ —Ç–∞–Ω–ª–∞–≥–∞–Ω –±—û–ª—Å–∞
    if order.get("chosen_driver_id"):
        await callback_query.answer("‚úÖ –°–∏–∑ –∞–ª–ª–∞“õ–∞—á–æ–Ω “≥–∞–π–¥–æ–≤—á–∏ —Ç–∞–Ω–ª–∞–≥–∞–Ω—Å–∏–∑.", show_alert=True)
        return

    # üîí –¢–∞–Ω–ª–∞–Ω–≥–∞–Ω “≥–∞–π–¥–æ–≤—á–∏ ID –Ω–∏ —Å–∞“õ–ª–∞—à
    order["chosen_driver_id"] = driver_id

    passengers[passenger_id]["order"] = order
    save_json(PASSENGER_PATH, passengers)

    # ‚úÖ –¢–∞–Ω–ª–∞–Ω–≥–∞–Ω —Ç—É–≥–º–∞–Ω–∏ "‚úÖ –¢–∞–Ω–ª–∞–Ω–¥–∏" –¥–µ–± —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à
    keyboard = callback_query.message.reply_markup
    if keyboard:
        new_inline_keyboard = []

        for row in keyboard.inline_keyboard:
            new_row = []
            for btn in row:
                if btn.callback_data == f"choose_driver_{driver_id}":
                    # üéØ –§–∞“õ–∞—Ç —Ç–∞–Ω–ª–∞–Ω–≥–∞–Ω —Ç—É–≥–º–∞–Ω–∏ "–¢–∞–Ω–ª–∞–Ω–¥–∏" “õ–∏–ª–∞–º–∏–∑
                    new_inline_keyboard.append([
                        InlineKeyboardButton(text="‚úÖ –¢–∞–Ω–ª–∞–Ω–¥–∏", callback_data="chosen_disabled"),
                        InlineKeyboardButton(text="üîÅ –ù–∞–≤–±–∞—Ç–¥–∞–≥–∏ “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä", callback_data="show_next_drivers")
                    ])
                    break  # –¢–∞–Ω–ª–∞–Ω–≥–∞–Ω —Ç—É–≥–º–∞–¥–∞–Ω –∫–µ–π–∏–Ω –±–æ—à“õ–∞ —Ç—É–≥–º–∞–ª–∞—Ä –∫–µ—Ä–∞–∫ —ç–º–∞—Å

        await callback_query.message.edit_reply_markup(
            reply_markup=InlineKeyboardMarkup(inline_keyboard=new_inline_keyboard)
        )

    # üî¥ –¢–∞–Ω–ª–∞–Ω–º–∞–≥–∞–Ω “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä–≥–∞ —é–±–æ—Ä–∏–ª–≥–∞–Ω —Ö–∞–±–∞—Ä–ª–∞—Ä–Ω–∏ —û—á–∏—Ä–∏—à
    await delete_unselected_driver_messages(passenger_id, driver_id, bot)

    # üë§ –ô—û–ª–æ–≤—á–∏ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏
    passenger_name = callback_query.from_user.full_name
    price = order.get("price", -1)
    price_text = f"{price:,} —Å—û–º" if price > 0 else "–ê–Ω–∏“õ–ª–∞–Ω–º–∞–≥–∞–Ω"

    # ‚úÖ “≤–∞–π–¥–æ–≤—á–∏–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à
    msg_to_driver = (
        f"üõ£ –°–∏–∑–≥–∞ –º–æ—Å –π—û–ª–æ–≤—á–∏:\n\n"
        f"üìç –ô—û–Ω–∞–ª–∏—à: {passenger['order']['from_district']} ‚ûù {passenger['order']['to_district']}\n"
        f"üìÖ –°–∞–Ω–∞: {passenger['order']['date']}\n"
        f"‚è∞ –í–∞“õ—Ç: {passenger['order']['time']}\n\n"
        f"üë§ *–ô—û–ª–æ–≤—á–∏*: {passenger_name}\n"
        f"üíµ –¢–∞–∫–ª–∏—Ñ “õ–∏–ª–∏–Ω–≥–∞–Ω –Ω–∞—Ä—Ö: {price_text}\n"
    )

    accept_btn = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ “ö–∞–±—É–ª “õ–∏–ª–∏—à", callback_data=f"accept_passenger_{passenger_id}")
    ]])

    # ‚úÖ –ô—û–ª–æ–≤—á–∏–≥–∞ —Ç–∞—Å–¥–∏“õ —Ö–∞–±–∞—Ä
    #await callback_query.message.answer("‚úÖ “≤–∞–π–¥–æ–≤—á–∏–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏–ª–¥–∏, –∞–≥–∞—Ä 10 –¥–∞“õ–∏“õ–∞–¥–∞ –∂–∞–≤–æ–± –±–µ—Ä–º–∞—Å–∞, –Ω–∞–≤–±–∞—Ç–¥–∞–≥–∏ “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä —é–±–æ—Ä–∏–ª–∞–¥–∏.")
    await bot.send_message(driver_id, msg_to_driver, reply_markup=accept_btn)

    # Callback‚Äô–≥–∞ –∂–∞–≤–æ–± –±–µ—Ä–∏—à (—Ç—É–≥–º–∞–Ω–∏ "pending" “≥–æ–ª–∞—Ç–¥–∞–Ω —á–∏“õ–∞—Ä–∏—à)
    await callback_query.answer()

    # üïì 5 –¥–∞“õ–∏“õ–∞ –∫—É—Ç–∏—à –≤–∞ –∫–µ–π–∏–Ω –Ω–∞–≤–±–∞—Ç–¥–∞–≥–∏ “≥–∞–π–¥–æ–≤—á–∏–≥–∞ —é–±–æ—Ä–∏—à
    task = create_task(wait_for_driver_response(passenger_id, driver_id))
    pending_timers[passenger_id] = task

#@dp.callback_query_handler(lambda c: c.data == "chosen_disabled")
@router.callback_query(F.data == "chosen_disabled")
async def chosen_disabled_callback(callback_query: types.CallbackQuery):
    await callback_query.answer("–ë—É “≥–∞–π–¥–æ–≤—á–∏ —Ç–∞–Ω–ª–∞–Ω–≥–∞–Ω", show_alert=False)

@router.callback_query(F.data == "show_next_drivers")
async def show_next_drivers_callback(callback: CallbackQuery, bot: Bot):
    passenger_id = str(callback.from_user.id)
    try:
        # ‚õî –¢–∞–π–º–µ—Ä–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∏—à
        task = pending_timers.pop(passenger_id, None)
        if task:
            task.cancel()

        # üóÉ –ô—û–ª–æ–≤—á–∏ –º–∞—ä–ª—É–º–æ—Ç–∏–Ω–∏ —é–∫–ª–∞–π–º–∏–∑
        passengers = load_json(PASSENGER_PATH)
        passenger = passengers.get(passenger_id)
        if not passenger:
            return

        # üö∂‚Äç‚ôÇÔ∏è –ô—û–ª–æ–≤—á–∏ –æ—Ä–¥–µ—Ä–∏
        order = passenger.get("order", {})
        if not order:
            return

        # üîÅ exclude_driver_ids —Ç–∞–π—ë—Ä–ª–∞—à
        excluded_ids = order.get("excluded_driver_ids", [])
        chosen_driver_id = order.get("chosen_driver_id")
        if chosen_driver_id:
            excluded_ids.append(chosen_driver_id)
            order["excluded_driver_ids"] = list(set(excluded_ids))  # –£–Ω–∏–∫–∞–ª–ª–∞—à—Ç–∏—Ä–∏—à
            order["chosen_driver_id"] = None  # –ë–µ–∫–æ—Ä “õ–∏–ª–∏—à

        # üìù –°–∞“õ–ª–∞—à
        passengers[passenger_id]["order"] = order
        save_json(PASSENGER_PATH, passengers)

        # üîÅ –Ø–Ω–∞ “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä —Ç–∞–≤—Å–∏—è “õ–∏–ª–∏—à
        await recommend_multiple_drivers_to_passenger(
            passenger_id=passenger_id,
            user_order=order,
            bot=bot
        )

        # ‚úÖ Callback –∂–∞–≤–æ–±–∏–Ω–∏ —ë–ø–∏—à
        await callback.answer()

    except Exception as e:
        print(f"‚ùå show_next_drivers —Ö–∞—Ç–æ–ª–∏–∫: {e}")
        await bot.send_message(passenger_id, "‚ùå –•–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏. –ö–µ–π–∏–Ω—Ä–æ“õ “õ–∞–π—Ç–∞ —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥.")

async def wait_for_driver_response(passenger_id, driver_id):
    await sleep(600)  # 5 –¥–∞“õ–∏“õ–∞ = 300 —Å–µ–∫—É–Ω–¥

    passengers = load_json(PASSENGER_PATH)
    passenger = passengers.get(passenger_id)

    if not passenger:
        return

    order = passenger.get("order", {})
    
    # –ê–≥–∞—Ä –π—û–ª–æ–≤—á–∏ —Ç–∞—Å–¥–∏“õ –æ–ª–º–∞–≥–∞–Ω –±—û–ª—Å–∞
    if order.get("chosen_driver_id") == driver_id:
        # üü° –¢–∞–Ω–ª–∞–Ω–º–∞–≥–∞–Ω “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏–≥–∞ “õ—û—à–∞–º–∏–∑
        excluded = order.get("excluded_driver_ids", [])
        if driver_id not in excluded:
            excluded.append(driver_id)
        order["excluded_driver_ids"] = excluded

        # ‚ùå –¢–∞–Ω–ª–æ–≤–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∞–º–∏–∑
        order["chosen_driver_id"] = None

        # üóÇ –°–∞“õ–ª–∞—à
        passengers[passenger_id]["order"] = order
        save_json(PASSENGER_PATH, passengers)

        # ‚úÖ –ö–µ–π–∏–Ω–≥–∏ “≥–∞–π–¥–æ–≤—á–∏–≥–∞ —Ç–∞–≤—Å–∏—è “õ–∏–ª–∏—à
        await recommend_multiple_drivers_to_passenger(
            passenger_id=passenger_id,
            user_order=order,
            bot=bot
        )

@router.callback_query(lambda c: c.data.startswith("accept_passenger_"))
async def process_accept_passenger(callback_query: CallbackQuery):
    driver_id = str(callback_query.from_user.id)
    passenger_id = callback_query.data.split("_")[-1]

    drivers = load_json(DRIVER_PATH)
    passengers = load_json(PASSENGER_PATH)

    driver = drivers.get(driver_id)
    passenger = passengers.get(passenger_id)

    if not driver or not passenger:
        await callback_query.answer("–ú–∞—ä–ª—É–º–æ—Ç —Ç–æ–ø–∏–ª–º–∞–¥–∏.")
        return

    # ‚ùó –¢–∞–Ω–ª–∞–Ω–≥–∞–Ω “≥–∞–π–¥–æ–≤—á–∏ —Ç–µ–∫—à–∏—Ä–∏–ª–∞–¥–∏
    chosen_driver_id = passenger.get("order", {}).get("chosen_driver_id")
    if chosen_driver_id != driver_id:
        await callback_query.answer("‚ùå –ë—É –π—û–ª–æ–≤—á–∏ —Å–∏–∑ —Ç–æ–º–æ–Ω–∏–¥–∞–Ω —Ç–∞–Ω–ª–∞–Ω–º–∞–≥–∞–Ω. –Å–∫–∏ “õ–∞–±—É–ª “õ–∏–ª–∏—à–≥–∞ –∫–µ—á “õ–æ–ª–¥–∏–Ω–≥–∏–∑.", show_alert=True)
        return

    # üí∏ –ë–∞–ª–∞–Ω—Å/–±–æ–Ω—É—Å–¥–∞–Ω 10% “≥–∏—Å–æ–±–ª–∞–π–º–∏–∑ –≤–∞ —É—à–ª–∞–± “õ–æ–ª–∞–º–∏–∑
    price = passenger['order'].get('price', 0)
    commission = round(price * 0.10)

    balance = driver.get("balance", 0)
    bonus = driver.get("bonus", 0)

    if balance + bonus < commission:
        await callback_query.answer(
            "‚ùå –ë–∞–ª–∞–Ω—Å–∏–Ω–≥–∏–∑–¥–∞ –µ—Ç–∞—Ä–ª–∏ –º–∞–±–ª–∞“ì –π—û“õ. –ô—û–ª–æ–≤—á–∏–Ω–∏ “õ–∞–±—É–ª “õ–∏–ª–∏—à —É—á—É–Ω –∏–ª—Ç–∏–º–æ—Å –±–∞–ª–∞–Ω—Å–Ω–∏ —Ç—û–ª–¥–∏—Ä–∏–Ω–≥.",
            show_alert=True
        )
        return

    if balance >= commission:
        driver["balance"] -= commission
    else:
        remaining = commission - balance
        driver["balance"] = 0
        driver["bonus"] -= remaining

    # üö´ –¢–∞–π–º–µ—Ä–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∞–º–∏–∑ –∞–≥–∞—Ä –±–æ—Ä –±—û–ª—Å–∞
    task = pending_timers.pop(passenger_id, None)
    if task:
        task.cancel()

    # ‚ùå –ê–≥–∞—Ä –∂–æ–π “õ–æ–ª–º–∞–≥–∞–Ω –±—û–ª—Å–∞, “õ–∞–±—É–ª “õ–∏–ª–∏—à–≥–∞ —Ä—É—Ö—Å–∞—Ç –π—û“õ
    if driver.get("order", {}).get("available_seats", 0) <= 0:
        await callback_query.answer("‚ùå –ñ–æ–π “õ–æ–ª–º–∞–≥–∞–Ω!", show_alert=True)
        return

    # üßç‚Äç‚ôÇÔ∏è –ô—û–ª–æ–≤—á–∏–≥–∞ —Ç—û–ª–∏“õ –º–∞—ä–ª—É–º–æ—Ç
    driver_info_text = (
        f"‚úÖ –¢–∞–Ω–ª–æ–≤–∏–Ω–≥–∏–∑ –º–∞—ä“õ—É–ª–ª–∞–Ω–¥–∏!\n\n"
        f"üöò “≤–∞–π–¥–æ–≤—á–∏ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏:\n"
        f"üë§ –ò—Å–º: {driver['profile']['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {driver['profile']['phone']}\n"
        f"üöó –ú–∞—à–∏–Ω–∞: {driver['profile']['car_model']} ({driver['profile']['car_number']})\n"
        f"üìç –ô—û–Ω–∞–ª–∏—à: {driver['order']['from_district']} ‚ûù {driver['order']['to_district']}\n"
        f"üìÖ –°–∞–Ω–∞: {driver['order']['date']}\n"
        f"‚è∞ –í–∞“õ—Ç: {driver['order']['time']}"
    )
    try:
        await bot.send_message(
            chat_id=int(passenger_id), 
            text=driver_info_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üöò “≤–∞–π–¥–æ–≤—á–∏ –µ—Ç–∏–± –∫–µ–ª–¥–∏", callback_data=f"arrived_yes_{driver_id}")]
            ])
        )
    except Exception as e:
        print(f"‚ùå –•–∞—Ç–æ–ª–∏–∫ —é–±–æ—Ä–∏—à–¥–∞: {e}")

    passenger_name = callback_query.from_user.full_name

    # ‚úÖ “≤–∞–π–¥–æ–≤—á–∏–≥–∞ —Ç—û–ª–∏“õ –º–∞—ä–ª—É–º–æ—Ç —é–±–æ—Ä–∏—à
    full_info = (
        f"üßç‚Äç‚ôÇÔ∏è –ô—û–ª–æ–≤—á–∏ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏:\n\n"
        f"üë§ –ô—û–ª–æ–≤—á–∏: {passenger_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {passenger.get('phone', '–ù–æ–º–∞—ä–ª—É–º')}\n"
        f"üìç –ô—û–Ω–∞–ª–∏—à: {passenger['order']['from_district']} ‚ûù {passenger['order']['to_district']}\n"
        f"üìÖ –°–∞–Ω–∞: {passenger['order']['date']}\n"
        f"‚è∞ –í–∞“õ—Ç: {passenger['order']['time']}\n"
        f"üí∞ –ù–∞—Ä—Ö: {passenger['order'].get('price', '–ù–æ–º–∞—ä–ª—É–º')} —Å—û–º\n\n"
        f"–ô—û–ª–≥–∞ —á–∏“õ“õ–∞–Ω–∏–Ω–≥–∏–∑–¥–∞ —Ç–∞—Å–¥–∏“õ–ª–∞—Å–∞–Ω–≥–∏–∑ –π—û–ª–æ–≤—á–∏–ª–∞—Ä–≥–∞ –±–∏–ª–¥–∏—Ä—à–Ω–æ–º–∞ —é–±–æ—Ä–∞–º–∏–∑."
    )

    # üõ£ –ô—û–ª–≥–∞ —á–∏“õ–¥–∏–º —Ç—É–≥–º–∞—Å–∏ “≥–∞—Ä —Å–∞—Ñ–∞—Ä —é–±–æ—Ä–∏–ª–∞–¥–∏
    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõ£ –ô—û–ª–≥–∞ —á–∏“õ–¥–∏–º", callback_data="on_the_way")]
    ])

    await send_or_edit_text(callback_query.message, full_info, reply_markup=reply_markup)

    # ü™ë “≤–∞–π–¥–æ–≤—á–∏–¥–∞ –∂–æ–π –∫–∞–º–∞–π—Ç–∏—Ä–∏–ª–∞–¥–∏
    if "available_seats" in driver["order"]:
        driver["order"]["available_seats"] = max(0, driver["order"]["available_seats"] - 1)

    # üë• accepted_passengers —Ä—û–π—Ö–∞—Ç–∏–≥–∞ “õ—û—à–∞–º–∏–∑
    driver_order = driver["order"]
    driver_order.setdefault("accepted_passengers", [])
    if not any(p['passenger_id'] == passenger_id for p in driver_order["accepted_passengers"]):
        driver_order["accepted_passengers"].append({
            "passenger_id": passenger_id,
            "price": passenger['order'].get('price', 0)
        })

    # üëÄ –ê–≥–∞—Ä –æ—Ö–∏—Ä–≥–∏ –∂–æ–π —Ç—û–ª–≥–∞–Ω –±—û–ª—Å–∞, “≥–∞–π–¥–æ–≤—á–∏–≥–∞ —Ö–∞–±–∞—Ä
    if driver_order["available_seats"] == 0:
        try:
            await bot.send_message(
                chat_id=int(driver_id),
                text="‚úÖ –û—Ö–∏—Ä–≥–∏ –π—û–ª–æ–≤—á–∏ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏.\nüöó –ú–∞—à–∏–Ω–∞ —Ç—û–ª–¥–∏!\n\n–ô—û–ª–≥–∞ —á–∏“õ“õ–∞–Ω–∏–Ω–≥–∏–∑–¥–∞ —Ç–∞—Å–¥–∏“õ–ª–∞—Å–∞–Ω–≥–∏–∑ –π—û–ª–æ–≤—á–∏–ª–∞—Ä–≥–∞ –±–∏–ª–¥–∏—Ä—à–Ω–æ–º–∞ —é–±–æ—Ä–∞–º–∏–∑.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üõ£ –ô—û–ª–≥–∞ —á–∏“õ–¥–∏–º", callback_data="on_the_way")]
                ])
            )
        except Exception as e:
            print(f"‚ùå “≤–∞–π–¥–æ–≤—á–∏–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ: {e}")

    # üïì –í–∞“õ—Ç –±–µ–ª–≥–∏—Å–∏
    timestamp = datetime.now(ZoneInfo("Asia/Tashkent")).strftime("%Y-%m-%d %H:%M:%S")

    # üìù –ô—û–ª–æ–≤—á–∏ –±—É—é—Ä—Ç–º–∞—Å–∏–Ω–∏ —è–Ω–≥–∏–ª–∞–π–º–∏–∑
    if "order" in passenger:
        order = passenger["order"]
        order["status"] = "accepted"
        order.setdefault("status_timestamps", {})
        order["status_timestamps"]["accepted"] = timestamp
        order["chosen_driver_id"] = driver_id 

    # üîê –§–∞–π–ª–ª–∞—Ä–Ω–∏ “õ–∞–π—Ç–∞ —ë–∑–∞–º–∏–∑
    save_json(DRIVER_PATH, drivers)
    save_json(PASSENGER_PATH, passengers)

    await callback_query.answer("‚úÖ –ô—û–ª–æ–≤—á–∏ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏.")

# üöó “≤–∞–π–¥–æ–≤—á–∏ "–ô—û–ª–≥–∞ —á–∏“õ–¥–∏–º" –±–æ—Å–≥–∞–Ω–¥–∞
@router.callback_query(F.data == "on_the_way")
async def process_driver_on_the_way(callback_query: CallbackQuery):
    driver_id = str(callback_query.from_user.id)

    drivers = load_json(DRIVER_PATH)
    driver = drivers.get(driver_id)

    if not driver or "order" not in driver:
        await callback_query.answer("–ë—É—é—Ä—Ç–º–∞ —Ç–æ–ø–∏–ª–º–∞–¥–∏.", show_alert=True)
        return

    order = driver["order"]
    timestamp = datetime.now(ZoneInfo("Asia/Tashkent")).strftime("%Y-%m-%d %H:%M:%S")

    # ‚úÖ –°—Ç–∞—Ç—É—Å –≤–∞ –≤–∞“õ—Ç–Ω–∏ –±–µ–ª–≥–∏–ª–∞—à
    order["status"] = "on_the_way"
    order.setdefault("status_timestamps", {})["on_the_way"] = timestamp

    passengers = load_json(PASSENGER_PATH)

    # üßç‚Äç‚ôÇÔ∏è accepted_passengers —Ä—û–π—Ö–∞—Ç–∏–¥–∞–≥–∏ “≥–∞—Ä –±–∏—Ä –π—û–ª–æ–≤—á–∏–≥–∞ —Ö–∞–±–∞—Ä
    accepted_passengers = order.get("accepted_passengers", [])
    for passenger_id in accepted_passengers:
        passenger = passengers.get(passenger_id)
        if not passenger:
            continue

        # ‚úÖ –ô—û–ª–æ–≤—á–∏–¥–∞ “≥–∞–º —Å—Ç–∞—Ç—É—Å–Ω–∏ —è–Ω–≥–∏–ª–∞—à
        if "order" in passenger:
            passenger_order = passenger["order"]
            passenger_order["status"] = "on_the_way"
            passenger_order.setdefault("status_timestamps", {})["on_the_way"] = timestamp

        try:
            await bot.send_message(
                chat_id=int(passenger_id),
                text="üöò “≤–∞–π–¥–æ–≤—á–∏ –π—û–ª–≥–∞ —á–∏“õ–¥–∏.\n\n–ï—Ç–∏–± –±–æ—Ä–≥–∞–Ω–∏–¥–∞ —Ç–∞—Å–¥–∏“õ–ª–∞—à–∏–Ω–≥–∏–∑–Ω–∏ —Å—û—Ä–∞–π–º–∏–∑.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="‚úÖ –ï—Ç–∏–± –∫–µ–ª–¥–∏", callback_data=f"arrived_yes_{driver_id}"),
                            InlineKeyboardButton(text="‚ùå “≤–∞–ª–∏ –∫–µ–ª–º–∞–¥–∏", callback_data=f"arrived_no_{driver_id}")
                        ]
                    ]
                )
            )
        except Exception as e:
            print(f"‚ùå –ô—û–ª–æ–≤—á–∏–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ: {e}")

    # üöó “≤–∞–π–¥–æ–≤—á–∏–≥–∞ —Ö–∞–±–∞—Ä
    await send_or_edit_text(
        callback_query.message,
        "‚úÖ –°–∞—Ñ–∞—Ä–∏–Ω–≥–∏–∑ –±–µ—Ö–∞—Ç–∞—Ä –±—û–ª—Å–∏–Ω!.\n\n–ï—Ç–∏–± –±–æ—Ä–≥–∞—á —Ç–∞—Å–¥–∏“õ–ª–∞—à–Ω–∏ —É–Ω—É—Ç–º–∞–Ω–≥.\n\n–°–∏–∑–≥–∞ –æ“õ –π—û–ª —Ç–∏–ª–∞–π–º–∏–∑!!!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ú–∞–Ω–∑–∏–ª–≥–∞ –µ—Ç–∏–± –∫–µ–ª–¥–∏–º", callback_data=f"arrived_destination")]
            ]
        )
    )

    # üîê –§–∞–π–ª–Ω–∏ —Å–∞“õ–ª–∞—à
    save_json(PASSENGER_PATH, passengers)
    save_json(DRIVER_PATH, drivers)

@router.callback_query(F.data.startswith("arrived_yes_"))
async def process_arrived_yes(callback_query: CallbackQuery):
    data_parts = callback_query.data.split("_")
    driver_id = data_parts[-1]  # arrived_yes_<driver_id>
    passenger_id = str(callback_query.from_user.id)

    # ‚è≥ –í–∞“õ—Ç–Ω–∏ —Ç–∞–π—ë—Ä–ª–∞—à
    timestamp = datetime.now(ZoneInfo("Asia/Tashkent")).strftime("%Y-%m-%d %H:%M:%S")

    # üßç‚Äç‚ôÇÔ∏è –ô—û–ª–æ–≤—á–∏–Ω–∏–Ω–≥ order –æ–±—ä–µ–∫—Ç–∏–≥–∞ —Å—Ç–∞—Ç—É—Å —Å–∞“õ–ª–∞—à
    passengers = load_json(PASSENGER_PATH)
    drivers = load_json(DRIVER_PATH)

    passenger = passengers.get(passenger_id)
    driver = drivers.get(driver_id)

    if not passenger or "order" not in passenger or not driver or "order" not in driver:
        await callback_query.answer("–û—Ä–¥–µ—Ä —Ç–æ–ø–∏–ª–º–∞–¥–∏.", show_alert=True)
        return
    
    passenger_order = passenger["order"]
    passenger_order.setdefault("status_timestamps", {})["arrived_confirmation"] = timestamp

    driver_order = driver["order"]

    # –ê–≥–∞—Ä “≥–∞–π–¥–æ–≤—á–∏–¥–∞ “≥–∞–ª–∏ "on_the_way" –±–µ–ª–≥–∏–ª–∞–Ω–º–∞–≥–∞–Ω –±—û–ª—Å–∞
    if driver_order.get("status") != "on_the_way":
        driver_order["status"] = "on_the_way"
        driver_order.setdefault("status_timestamps", {})["on_the_way"] = timestamp

        accepted_passengers = driver_order.get("accepted_passengers", [])
        for item in accepted_passengers:
            p_id = item if isinstance(item, str) else item.get("passenger_id")
            if not p_id:
                continue
            p = passengers.get(p_id)
            if p and "order" in p:
                p["order"]["status"] = "on_the_way"
                p["order"].setdefault("status_timestamps", {})["on_the_way"] = timestamp
    
    # ‚úÖ “≤–∞–º–∫–æ—Ä–ª–∏–∫ —É—á—É–Ω –º–∏–Ω–Ω–∞—Ç–¥–æ—Ä–ª–∏–∫ –≤–∞ "–ú–∞–Ω–∑–∏–ª–≥–∞ –µ—Ç–¥–∏–º" —Ç—É–≥–º–∞—Å–∏
    arrived_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ú–∞–Ω–∑–∏–ª–≥–∞ –µ—Ç–¥–∏–º", callback_data=f"finished_trip_{driver_id}")]
    ])
    
    # Javob sifatida yo‚Äòlovchiga minnatdorchilik bildiruvchi xabar
    await send_or_edit_text(
        callback_query,
        text="‚úÖ “≤–∞–º–∫–æ—Ä–ª–∏–≥–∏–Ω–≥–∏–∑–¥–∞–Ω –º–∏–Ω–Ω–∞—Ç–¥–æ—Ä–º–∏–∑! üòä\n\n*–°–∞—Ñ–∞—Ä–∏–Ω–≥–∏–∑ –±–µ—Ö–∞—Ç–∞—Ä –±—û–ª—Å–∏–Ω.*\n\n–ú–∞–Ω–∑–∏–ª–≥–∞ –µ—Ç–≥–∞–Ω–∏–Ω–≥–∏–∑–¥–∞ —Ç–∞—Å–¥–∏“õ–ª–∞–± “õ—û–π–∏–Ω–≥.",
        reply_markup=arrived_keyboard,
        parse_mode="Markdown"
    )

    # üîê –°–∞“õ–ª–∞—à
    save_json(PASSENGER_PATH, passengers)
    save_json(DRIVER_PATH, drivers)

@router.callback_query(F.data.startswith("finished_trip_"))
async def process_trip_finished(callback_query: CallbackQuery):
    data_parts = callback_query.data.split("_")
    driver_id = data_parts[-1]  # finished_trip_<driver_id>
    passenger_id = str(callback_query.from_user.id)

    passengers = load_json(PASSENGER_PATH)
    drivers = load_json(DRIVER_PATH)

    passenger = passengers.get(passenger_id)
    driver = drivers.get(driver_id)

    if not passenger or "order" not in passenger:
        await callback_query.answer("–ë—É—é—Ä—Ç–º–∞ —Ç–æ–ø–∏–ª–º–∞–¥–∏.", show_alert=True)
        return

    order = passenger["order"]
    timestamp = datetime.now(ZoneInfo("Asia/Tashkent")).strftime("%Y-%m-%d %H:%M:%S")

    # üîµ –ô—û–ª–æ–≤—á–∏ —Å–∞—Ñ–∞—Ä–∏–Ω–∏ done “õ–∏–ª–∏—à
    order["status"] = "arrived"
    order.setdefault("status_timestamps", {})["arrived"] = timestamp

    # üü° –¢–∞—Ä–∏—Ö–≥–∞ —Å–∞“õ–ª–∞—à
    passenger.setdefault("order_history", []).append(order)
    del passenger["order"]

    # üîê –°–∞“õ–ª–∞—à
    save_json(PASSENGER_PATH, passengers)

    # üöò Feedback —Ç—É–≥–º–∞–ª–∞—Ä–∏–Ω–∏ —á–∏“õ–∞—Ä–∏—à
    await send_or_edit_text(
        callback_query,
        text="üöò –ë–∏–∑–Ω–∏–Ω–≥ —Ö–∏–∑–º–∞—Ç–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–≥–∞–Ω–∏–Ω–≥–∏–∑ —É—á—É–Ω —Ä–∞“≥–º–∞—Ç.\n\n“ö—É–π–∏–¥–∞ “≥–∞–π–¥–æ–≤—á–∏–Ω–∏ –±–∞“≥–æ–ª–∞—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üëç –Ø—Ö—à–∏", callback_data=f"feedback_good_{driver_id}"),
                    InlineKeyboardButton(text="üëé –Å–º–æ–Ω", callback_data=f"feedback_bad_{driver_id}")
                ]
            ]
        )
    )

    # ‚úÖ –ô—û–ª–æ–≤—á–∏–≥–∞ —Ç–∞—Å–¥–∏“õ —Ö–∞–±–∞—Ä
    await send_or_edit_text(
        callback_query,
        text="‚úÖ –°–∞—Ñ–∞—Ä –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ —Ç—É–≥–∞–¥–∏! üöò\n\n“≤–∞–º–∫–æ—Ä–ª–∏–≥–∏–Ω–≥–∏–∑ —É—á—É–Ω –∫–∞—Ç—Ç–∞ —Ä–∞“≥–º–∞—Ç! üòä",
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("user_detail:"))
async def show_user_detail(callback: CallbackQuery):
    user_id = callback.data.split(":")[1]
    
    # üì• –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ —é–∫–ª–∞—à
    users = load_users()
    passengers = load_passenger()
    drivers = load_drivers()

    user_info = users.get(user_id, {})
    passenger_info = passengers.get(user_id, {})
    driver_info = drivers.get(user_id, {})

    text = f"<b>üë§ –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ ID:</b> <code>{user_id}</code>\n"

    if user_info:
        text += f"üìå –°—Ç–∞—Ç—É—Å: {user_info.get('status', '‚ùì')}\n"
        text += f"üìõ –ò—Å–º: {user_info.get('first_name', '–π—û“õ')}\n"

    if passenger_info:
        order = passenger_info.get("order")
        if order:
            text += "\n<b>üßç‚Äç‚ôÇÔ∏è –ô—û–ª–æ–≤—á–∏ –±—É—é—Ä—Ç–º–∞—Å–∏:</b>\n"
            for key, value in order.items():
                text += f"- {key}: {value}\n"

    if driver_info:
        order = driver_info.get("order")
        if order:
            text += "\n<b>üöó “≤–∞–π–¥–æ–≤—á–∏ –±—É—é—Ä—Ç–º–∞—Å–∏:</b>\n"
            for key, value in order.items():
                text += f"- {key}: {value}\n"

    if not passenger_info and not driver_info:
        text += "\n‚ÑπÔ∏è –ë—É—é—Ä—Ç–º–∞ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏ –º–∞–≤–∂—É–¥ —ç–º–∞—Å."

    await callback.message.answer(text, parse_mode="HTML")

@router.callback_query(F.data.startswith("arrived_no_"))
async def process_arrived_no(callback_query: CallbackQuery):
    data_parts = callback_query.data.split("_")
    driver_id = data_parts[-1]  # arrived_no_<driver_id>

    await callback_query.answer("‚è≥ “≤–∞–π–¥–æ–≤—á–∏ –µ—Ç–∏–± –±–æ—Ä–º–∞–≥–∞–Ω –¥–µ–± “õ–∞–π–¥ —ç—Ç–∏–ª–¥–∏.", show_alert=True)

    # –ô—û–ª–æ–≤—á–∏–≥–∞ —è–Ω–∞ –±–∏—Ä –±–æ—Ä —Ç–∞—Å–¥–∏“õ —Ç—É–≥–º–∞—Å–∏ –±–∏–ª–∞–Ω —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à
    await send_or_edit_text(
        callback_query.message,
        "‚è≥ “≤–∞–π–¥–æ–≤—á–∏ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏–ª–¥–∏.\n\n–ú–∞—à–∏–Ω–∞ –µ—Ç–∏–± –∫–µ–ª–≥–∞–Ω–∏–¥–∞ —Ç–∞—Å–¥–∏“õ–ª–∞—à–∏–Ω–≥–∏–∑–Ω–∏ —Å—û—Ä–∞–π–º–∏–∑.\n\n–ò–ª—Ç–∏–º–æ—Å, –±–∏—Ä–æ–∑ –∫—É—Ç–∏–± —Ç—É—Ä–∏–Ω–≥!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ “≤–∞–π–¥–æ–≤—á–∏ –µ—Ç–∏–± –∫–µ–ª–¥–∏", callback_data=f"arrived_yes_{driver_id}")]
            ]
        )
    )

    # –ê–≥–∞—Ä –∫–µ—Ä–∞–∫ –±—û–ª—Å–∞ “≥–∞–π–¥–æ–≤—á–∏–≥–∞ “≥–∞–º —Ö–∞–±–∞—Ä –±–µ—Ä–∏—à
    try:
        await bot.send_message(
            chat_id=int(driver_id),
            text="‚ùó –ô—û–ª–æ–≤—á–∏ –µ—Ç–∏–± –±–æ—Ä–º–∞–≥–∞–Ω–∏–Ω–≥–∏–∑–Ω–∏ “õ–∞–π–¥ —ç—Ç–¥–∏."
        )
    except Exception as e:
        print(f"‚ùå “≤–∞–π–¥–æ–≤—á–∏–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ: {e}")

@router.callback_query(F.data.startswith("arrived_destination"))
async def process_driver_arrived(callback_query: CallbackQuery):
    data_parts = callback_query.data.split("_")
    driver_id = data_parts[-1]  # arrived_destination_<driver_id>

    drivers = load_json(DRIVER_PATH)
    passengers = load_json(PASSENGER_PATH)

    driver = drivers.get(driver_id)
    if not driver or "order" not in driver:
        await callback_query.answer("–ë—É—é—Ä—Ç–º–∞ —Ç–æ–ø–∏–ª–º–∞–¥–∏.", show_alert=True)
        return

    order = driver["order"]
    timestamp = datetime.now(ZoneInfo("Asia/Tashkent")).strftime("%Y-%m-%d %H:%M:%S")

    # ‚úÖ –°—Ç–∞—Ç—É—Å–Ω–∏ —è–∫—É–Ω–ª–∞—à
    order["status"] = "arrived"
    order.setdefault("status_timestamps", {})["arrived"] = timestamp


    # –°–∞—Ñ–∞—Ä –¥–∞–≤–æ–º–∏–π–ª–∏–≥–∏–Ω–∏ “≥–∏—Å–æ–±–ª–∞—à
    on_the_way_time = order.get("status_timestamps", {}).get("on_the_way")
    arrived_time = order.get("status_timestamps", {}).get("arrived")

    if on_the_way_time and arrived_time:
        # –í–∞“õ—Ç–Ω–∏ “≥–∏—Å–æ–±–ª–∞—à
        on_the_way_dt = datetime.strptime(on_the_way_time, "%Y-%m-%d %H:%M:%S")
        arrived_dt = datetime.strptime(arrived_time, "%Y-%m-%d %H:%M:%S")
        trip_duration = arrived_dt - on_the_way_dt
        hours, remainder = divmod(trip_duration.seconds, 3600)
        minutes, _ = divmod(remainder, 60)
        duration_text = f"{hours} —Å–æ–∞—Ç {minutes} –¥–∞“õ–∏“õ–∞–≥–∞"

        # –°–∞—Ñ–∞—Ä –¥–∞–≤–æ–º–∏–π–ª–∏–≥–∏–Ω–∏ “õ—û—à–∏—à
        duration_message = f"‚úÖ –°–∞—Ñ–∞—Ä —è–∫—É–Ω–ª–∞–Ω–¥–∏.\n\n–°–∞—Ñ–∞—Ä –¥–∞–≤–æ–º–∏–π–ª–∏–≥–∏: {duration_text}.\n\n–ô—û–ª–æ–≤—á–∏–ª–∞—Ä —Ñ–∏–∫—Ä–∏–Ω–∏ –∫—É—Ç–∞–º–∏–∑."
    else:
        duration_message = "‚úÖ –°–∞—Ñ–∞—Ä —è–∫—É–Ω–ª–∞–Ω–¥–∏. –ô—û–ª–æ–≤—á–∏–ª–∞—Ä —Ñ–∏–∫—Ä–∏–Ω–∏ –∫—É—Ç–∞–º–∏–∑."
    
    # üßç‚Äç‚ôÇÔ∏è “≤–∞—Ä –±–∏—Ä accepted_passenger'–≥–∞ —Å—û—Ä–æ–≤ —é–±–æ—Ä–∏—à
    accepted_passengers = order.get("accepted_passengers", [])

    # ‚úÖ “≤–∞—Ä –±–∏—Ä accepted_passenger —É—á—É–Ω —Å—Ç–∞—Ç—É—Å–Ω–∏ "arrived" “õ–∏–ª–∏—à
    for passenger_id in accepted_passengers:
        passenger = passengers.get(passenger_id)
        if not passenger or "order" not in passenger:
            continue

        p_order = passenger["order"]

        if p_order.get("status") != "arrived":
            # üîµ –ô—û–ª–æ–≤—á–∏ —Å–∞—Ñ–∞—Ä–∏–Ω–∏ arrived “õ–∏–ª–∏—à
            p_order["status"] = "arrived"
            p_order.setdefault("status_timestamps", {})["arrived"] = timestamp

            # üü° –¢–∞—Ä–∏—Ö–≥–∞ —Å–∞“õ–ª–∞—à
            passenger.setdefault("order_history", []).append(p_order)
            del passenger["order"]

        try:
            await bot.send_message(
                chat_id=int(passenger_id),
                text="üöò –ë–∏–∑–Ω–∏–Ω–≥ —Ö–∏–∑–º–∞—Ç–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–≥–∞–Ω–∏–Ω–≥–∏–∑ —É—á—É–Ω —Ä–∞“≥–º–∞—Ç.\n\n“ö—É–π–∏–¥–∞ “≥–∞–π–¥–æ–≤—á–∏–Ω–∏ –±–∞“≥–æ–ª–∞—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="üëç –Ø—Ö—à–∏", callback_data=f"feedback_good_{driver_id}"),
                            InlineKeyboardButton(text="üëé –Å–º–æ–Ω", callback_data=f"feedback_bad_{driver_id}")
                        ]
                    ]
                )
            )
        except Exception as e:
            print(f"‚ùå –ô—û–ª–æ–≤—á–∏–≥–∞ —Å—û—Ä–æ–≤ —é–±–æ—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ: {e}")

    # üöó “≤–∞–π–¥–æ–≤—á–∏–≥–∞ —Ç–∞—Å–¥–∏“õ —Ö–∞–±–∞—Ä
    await send_or_edit_text(
        callback_query.message,
        duration_message,
        reply_markup=None
    )

    # üîê –§–∞–π–ª–Ω–∏ —Å–∞“õ–ª–∞—à
        # üßæ –ô—û–ª–æ–≤—á–∏–ª–∞—Ä –º–∞—ä–ª—É–º–æ—Ç–∏–Ω–∏ —Å–∞“õ–ª–∞—à
    save_json(DRIVER_PATH, drivers)
    save_json(PASSENGER_PATH, passengers)

@router.callback_query(lambda c: c.data.startswith("feedback_"))
async def process_feedback(callback_query: CallbackQuery):
    data = callback_query.data
    parts = data.split("_")
    
    if len(parts) < 3:
        await callback_query.answer("‚ùå –ù–æ—Ç—û“ì—Ä–∏ —Ñ–æ—Ä–º–∞—Ç.", show_alert=True)
        return

    _, feedback_type, driver_id = parts
    passenger_id = str(callback_query.from_user.id)

    passengers = load_json(PASSENGER_PATH)
    drivers = load_json(DRIVER_PATH)

    passenger = passengers.get(passenger_id)
    driver = drivers.get(driver_id)

    if not passenger or not driver:
        await callback_query.answer("‚ùå “≤–∞–π–¥–æ–≤—á–∏ —ë–∫–∏ –π—û–ª–æ–≤—á–∏ —Ç–æ–ø–∏–ª–º–∞–¥–∏.", show_alert=True)
        return

    # ‚≠ê Feedback
    feedback = 1 if feedback_type == "good" else -1

    if "rating" not in driver:
        driver["rating"] = 0
    if "feedbacks" not in driver:
        driver["feedbacks"] = []

    driver["feedbacks"].append(feedback)

    # –†–µ–π—Ç–∏–Ω–≥–Ω–∏ “õ–∞–π—Ç–∞ “≥–∏—Å–æ–±–ª–∞—à
    driver["rating"] = sum(driver["feedbacks"]) / len(driver["feedbacks"])

    # –ô—û–ª–æ–≤—á–∏–Ω–∏–Ω–≥ –±—É—é—Ä—Ç–º–∞—Å–∏–Ω–∏ done “õ–∏–ª–∏—à (–∞–≥–∞—Ä “≥–∞–ª–∏ —Ç–∞—Ä–∏—Ö–≥–∞ —û—Ç–∫–∞–∑–∏–ª–º–∞–≥–∞–Ω –±—û–ª—Å–∞)
    if "order" in passenger:
        order = passenger["order"]

        now = datetime.now(ZoneInfo("Asia/Tashkent")).strftime("%Y-%m-%d %H:%M:%S")
        order["status"] = "arrived"
        order.setdefault("status_timestamps", {})["arrived"] = now

        passenger.setdefault("order_history", []).append(order)
        del passenger["order"]

    # üîê –°–∞“õ–ª–∞—à
    save_json(DRIVER_PATH, drivers)
    save_json(PASSENGER_PATH, passengers)

    await send_or_edit_text(callback_query, "‚úÖ –ë–∞“≥–æ —É—á—É–Ω —Ä–∞“≥–º–∞—Ç! –ë—É—é—Ä—Ç–º–∞–Ω–≥–∏–∑ —ë–ø–∏–ª–¥–∏ –≤–∞ —Ç–∞—Ä–∏—Ö–≥–∞ —û—Ç–∫–∞–∑–∏–ª–¥–∏.")

from aiogram.filters import CommandStart, CommandObject

@router.message(CommandStart(deep_link=True))
@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext, bot: Bot, command: CommandObject):
    user_id = str(message.from_user.id)
    referral_id = command.args  # start –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–¥–∞–≥–∏ referral ID

    logging.info(f"–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ ID: {user_id}")
    
    # üìÅ –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–¥–∞–Ω –æ–ª–∏—à
    status_data = load_json(USER_STATUS_PATH)
    user_status = status_data.get(user_id, {}).get("status", "new_user")
    logging.info(f"–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–Ω–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∏: {user_status}")

    # üìå Referral'–Ω–∏ “õ–∞–π–¥ —ç—Ç–∏—à (—Ñ–∞“õ–∞—Ç –±–∏—Ä–∏–Ω—á–∏ –º–∞—Ä—Ç–∞ –∫–∏—Ä–≥–∞–Ω–¥–∞)
    if referral_id and referral_id != user_id:
        referrer_id = referral_id
        is_first_time = user_id not in status_data
        #bot_username = (await callback_query.bot.me()).username

        if is_first_time:
            status_data[user_id] = {
                "status": "new_user",
                "referrer": referrer_id,
                "first_name": message.from_user.first_name,
                "timestamp": time.time()
            }

            # ‚úÖ –ê–¥–º–∏–Ω–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à
            full_name = message.from_user.full_name
            username = message.from_user.username or "‚Äî"
            for admin_id in ADMINS:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîç –ü–æ–¥—Ä–æ–±–Ω–æ", callback_data=f"user_detail:{user_id}")]
                ])
                try:
                    await bot.send_message(
                        admin_id,
                        text=(
                            f"üÜï <b>–Ø–Ω–≥–∏ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ –±–æ—Ç–≥–∞ –∫–∏—Ä–¥–∏</b>\n\n"
                            f"üë§ –ò—Å–º: {full_name}\n"
                            f"üîó Username: @{username if username != '‚Äî' else '–π—û“õ'}\n"
                            f"üÜî ID: <code>{user_id}</code>"
                        ),
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    print(f"‚ùå –ê–¥–º–∏–Ω–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ: {e}")

            # Referrer –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–∏ —è–Ω–≥–∏–ª–∞—à
            status_data.setdefault(referrer_id, {"status": "new_user"})
            status_data[referrer_id].setdefault("invited_users", [])
            if user_id not in status_data[referrer_id]["invited_users"]:
                status_data[referrer_id]["invited_users"].append(user_id)
            save_json(USER_STATUS_PATH, status_data)

            # ‚úÖ BONUS –±–µ—Ä–∏—à
            referrer_data = load_drivers().get(referrer_id)
            if referrer_data:
                referrer_data.setdefault("bonus", 0)
                referrer_data["bonus"] += INVITE_BONUS
                save_driver({**load_drivers(), referrer_id: referrer_data})

                invited_name = message.from_user.first_name
                text = (
                    f"üéâ –°–∏–∑ —Ç–∞–∫–ª–∏—Ñ “õ–∏–ª–≥–∞–Ω {invited_name} –±–æ—Ç–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∞ –±–æ—à–ª–∞–¥–∏!\n\n"
                    f"–°–∏–∑–≥–∞ {INVITE_BONUS} —Å—û–º –±–æ–Ω—É—Å —Ç–∞“õ–¥–∏–º —ç—Ç–∏–ª–¥–∏.\n\n"
                    "–Ø–Ω–∞ –¥—û—Å—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞–∫–ª–∏—Ñ “õ–∏–ª–∏–Ω–≥ –≤–∞ –∫—û–ø—Ä–æ“õ –±–æ–Ω—É—Å–ª–∞—Ä —Ç—û–ø–ª–∞–Ω–≥!"
                )
                await bot.send_message(
                    referrer_id,
                    text, 
                    reply_markup=await invite_actions_kb(bot, referrer_id)
                )

            else:
                # –†–µ—Ñ–µ—Ä –π—û–ª–æ–≤—á–∏ –±—û–ª—Å–∞
                passengers = load_passenger()
                if referrer_id in passengers:
                    passengers[referrer_id].setdefault("bonus", 0)
                    passengers[referrer_id]["bonus"] += INVITE_BONUS // 2
                    save_passenger(passengers)

                    invited_name = message.from_user.first_name

                    await bot.send_message(
                        referrer_id, 
                        text=(
                            f"üéâ –°–∏–∑ —Ç–∞–∫–ª–∏—Ñ “õ–∏–ª–≥–∞–Ω {invited_name} –±–æ—Ç–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∞ –±–æ—à–ª–∞–¥–∏!\n\n"
                            f"–°–∏–∑–≥–∞ {INVITE_BONUS // 2} —Å—û–º –±–æ–Ω—É—Å —Ç–∞“õ–¥–∏–º —ç—Ç–∏–ª–¥–∏.\n\n"
                            "–Ø–Ω–∞ –∫—û–ø—Ä–æ“õ –±–æ–Ω—É—Å –æ–ª–∏—à —É—á—É–Ω –¥—û—Å—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞–∫–ª–∏—Ñ “õ–∏–ª–∏–Ω–≥!"
                        ),
                        reply_markup=await invite_actions_kb(bot, referrer_id)
                    )

        else:
            if "first_name" not in status_data[user_id]:
                status_data[user_id]["first_name"] = message.from_user.first_name
                save_json(USER_STATUS_PATH, status_data)

    else:
        # –ê–≥–∞—Ä referral –±—û–ª–º–∞—Å–∞ “≥–∞–º, first_name —Å–∞“õ–ª–∞–± “õ—û–π–∏—à
        if user_id not in status_data:
            status_data[user_id] = {
                "status": "new_user",
                "first_name": message.from_user.first_name,
                "timestamp": time.time()  # ‚è± –±–∏—Ä–∏–Ω—á–∏ —É–ª–∞–Ω–≥–∞–Ω –≤–∞“õ—Ç
            }
            save_json(USER_STATUS_PATH, status_data)

            # üîî –ê–¥–º–∏–Ω–≥–∞ —Ö–∞–±–∞—Ä
            for admin_id in ADMINS:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîç –ü–æ–¥—Ä–æ–±–Ω–æ", callback_data=f"user_detail:{user_id}")]
                ])
                try:
                    await bot.send_message(
                        admin_id,
                        text=(
                            f"üÜï <b>–Ø–Ω–≥–∏ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ –±–æ—Ç–≥–∞ –∫–∏—Ä–¥–∏</b>\n\n"
                            f"üë§ –ò—Å–º: {message.from_user.full_name}\n"
                            f"üîó Username: @{message.from_user.username or '–π—û“õ'}\n"
                            f"üÜî ID: <code>{user_id}</code>"
                        ),
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    print(f"‚ùå –ê–¥–º–∏–Ω–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ: {e}")
        else:
            if "first_name" not in status_data[user_id]:
                status_data[user_id]["first_name"] = message.from_user.first_name
                save_json(USER_STATUS_PATH, status_data)

    # ‚û°Ô∏è –ö–µ–π–∏–Ω–≥–∏ “õ–∏—Å–º:
    if user_status == "new_user":
        text = "ü§ñ –ë–æ—Ç–≥–∞ —Ö—É—à –∫–µ–ª–∏–±—Å–∏–∑!\n–ö–∏–º–ª–∏–≥–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:"
        await send_or_edit_last(user_id, state, bot, text, start_kb(int(user_id)))
    else:
        text = "üè† –ë–æ—à –º–µ–Ω—é:"
        await message.answer(text, reply_markup=start_kb(int(user_id)))

@router.callback_query(F.data == "invite_friends")
async def invite_friends_callback(callback_query: types.CallbackQuery, bot: Bot):
    user_id = str(callback_query.from_user.id)
    bot_username = (await bot.me()).username
    invite_link = f"https://t.me/{bot_username}?start={user_id}"

    text = (
        "üéâ –î—û—Å—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞–∫–ª–∏—Ñ “õ–∏–ª–∏–Ω–≥ –≤–∞ –±–æ–Ω—É—Å–ª–∞—Ä –æ–ª–∏–Ω–≥!\n\n"
        f"“≤–∞–≤–æ–ª–∞–Ω–≥–∏–∑: {invite_link}\n\n"
        "–î—û—Å—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑ —à—É “≥–∞–≤–æ–ª–∞ –æ—Ä“õ–∞–ª–∏ –±–æ—Ç–≥–∞ –∫–∏—Ä—Å–∞, —Å–∏–∑–≥–∞ –±–æ–Ω—É—Å —ë–∑–∏–ª–∞–¥–∏! üöÄ"
    )
    await callback_query.message.answer(text)
    await callback_query.answer()

@router.callback_query(F.data == "my_invites")
async def show_my_invites(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)
    
    # üìÅ –§–∞–π–ª–¥–∞–Ω —Å—Ç–∞—Ç—É—Å–ª–∞—Ä –æ–ª–∞–º–∏–∑
    status_data = load_json(USER_STATUS_PATH)
    user_info = status_data.get(user_id, {})
    
    # –ù–µ—á—Ç–∞ –¥—û—Å—Ç —Ç–∞–∫–ª–∏—Ñ “õ–∏–ª–≥–∞–Ω–∏
    invited_users = user_info.get("invited_users", [])
    invited_count = len(invited_users)

    # –£–Ω–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∏ (driver / passenger)
    user_status = user_info.get("status", "–ê–Ω–∏“õ–ª–∞–Ω–º–∞–≥–∞–Ω")

    # üë• –ë–æ–Ω—É—Å–Ω–∏ “≥–∏—Å–æ–±–ª–∞—à (–∏–∫–∫–∞–ª–∞ –±–∞–∑–∞–¥–∞–Ω)
    driver_data = load_json(DRIVER_PATH)
    passenger_data = load_json(PASSENGER_PATH)

    driver_bonus = driver_data.get(user_id, {}).get("bonus", 0)
    passenger_bonus = passenger_data.get(user_id, {}).get("bonus", 0)

    total_bonus = driver_bonus + passenger_bonus

    # –ë–æ–Ω—É—Å –º–∞—ä–ª—É–º–æ—Ç–∏–Ω–∏ –∞–ª–æ“≥–∏–¥–∞ —Ñ–∞–π–ª–ª–∞—Ä–¥–∞–Ω –æ–ª–∞–º–∏–∑
    bonus = 0
    if user_status == "new_user":
        user_status = "–Ø–Ω–≥–∏ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏"  # –Ø–Ω–≥–∏ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ –±—û–ª—Å–∞, —Å—Ç–∞—Ç—É—Å–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–± “õ—û—è–º–∏–∑
    elif user_status == "passenger":
        passenger_data = load_json(PASSENGER_PATH)
        bonus = passenger_data.get(user_id, {}).get("bonus", 0)
        user_status = "–ô—û–ª–æ–≤—á–∏"  # –ô—û–ª–æ–≤—á–∏ –±—û–ª—Å–∞, —Å—Ç–∞—Ç—É—Å–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–± “õ—û—è–º–∏–∑
    elif user_status == "driver":
        driver_data = load_json(DRIVER_PATH)
        bonus = driver_data.get(user_id, {}).get("bonus", 0)
        user_status = "“≤–∞–π–¥–æ–≤—á–∏"   # “≤–∞–π–¥–æ–≤—á–∏ –±—û–ª—Å–∞, —Å—Ç–∞—Ç—É—Å–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–± “õ—û—è–º–∏–∑
    else:
        user_status = "–ê–Ω–∏“õ–ª–∞–Ω–º–∞–≥–∞–Ω"

    # üìä –ê—Å–æ—Å–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    text = (
        f"üìä –°–∏–∑–Ω–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üë§ –°—Ç–∞—Ç—É—Å:  {user_status.capitalize()}\n"
        f"üë• –¢–∞–∫–ª–∏—Ñ “õ–∏–ª–∏–Ω–≥–∞–Ω –¥—û—Å—Ç–ª–∞—Ä —Å–æ–Ω–∏:  {invited_count} —Ç–∞\n"
        f"üéÅ –ñ–∞–º–∏ –±–æ–Ω—É—Å:  <b>{total_bonus} —Å—û–º</b>\n"
    )

    # üë• –ê–≥–∞—Ä —Ç–∞–∫–ª–∏—Ñ “õ–∏–ª–∏–Ω–≥–∞–Ω–ª–∞—Ä –±–æ—Ä –±—û–ª—Å–∞, —É–ª–∞—Ä–Ω–∏–Ω–≥ –∏—Å–º–ª–∞—Ä–∏–Ω–∏ —á–∏“õ–∞—Ä–∞–º–∏–∑
    if invited_users:
        text += "\nüßë‚Äçü§ù‚Äçüßë –¢–∞–∫–ª–∏—Ñ “õ–∏–ª–∏–Ω–≥–∞–Ω–ª–∞—Ä:\n"
        for idx, invited_id in enumerate(invited_users, 1):
            invited_info = status_data.get(str(invited_id), {})
            first_name = invited_info.get("first_name", "–ù–æ–º–∞—ä–ª—É–º")
            text += f"{idx}. {first_name}\n"
    else:
        text += "\n‚è≥ “≤–∞–ª–∏ –¥—û—Å—Ç —Ç–∞–∫–ª–∏—Ñ “õ–∏–ª–∏–Ω–º–∞–≥–∞–Ω."

    await callback_query.message.answer(text, parse_mode="HTML")
    await callback_query.answer()

async def check_today_departures(bot):
    today = datetime.today().strftime("%Y-%m-%d")

    if not os.path.exists(DRIVER_PATH):
        return

    drivers = load_json(DRIVER_PATH)

    for driver_id, driver_data in drivers.items():
        order = driver_data.get("order", {})
        if order and order.get("date") == today and order.get("status") == "new":
            await bot.send_message(
                chat_id=int(driver_id),
                text="üìÖ –ë—É–≥—É–Ω –π—û–ª–≥–∞ —á–∏“õ–∏—à –∫—É–Ω–∏–Ω–≥–∏–∑!\n\nüöò –ô—û–ª–≥–∞ —á–∏“õ–¥–∏–Ω–≥–∏–∑–º–∏?",
                reply_markup=create_departure_confirmation_keyboard(driver_id)
            )

# “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏ —á–∏“õ–∞—Ä–∞–¥–∏–≥–∞–Ω —Ñ—É–Ω–∫—Ü–∏—è
@router.callback_query(F.data == "show_drivers_list")
async def show_drivers_list(callback_query: CallbackQuery):
    drivers = load_drivers()

    text = "<b>üöó “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏:</b>\n\n"
    for user_id, driver_data in drivers.items():
        profile = driver_data.get("profile", {})
        name = profile.get("name", "–ù–æ–º–∞—ä–ª—É–º")
        rating = driver_data.get("rating", 0)
        
        accepted_passengers = driver_data.get("order", {}).get("accepted_passengers", [])
        accepted_count = len(accepted_passengers)
        total_income = sum(p.get("price", 0) for p in accepted_passengers)

        orders = len(driver_data.get("order_history", []))

        text += (
            f"üë§ <b>{name}</b> (ID: <code>{user_id}</code>)\n"
            f"‚Ä¢ üì¶ –ë—É—é—Ä—Ç–º–∞–ª–∞—Ä: {orders} —Ç–∞\n"
            f"‚Ä¢ üßç‚Äç‚ôÇÔ∏è “ö–∞–±—É–ª “õ–∏–ª–∏–Ω–≥–∞–Ω –π—û–ª–æ–≤—á–∏–ª–∞—Ä: {accepted_count} —Ç–∞\n"
            f"‚Ä¢ ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n"
            f"‚Ä¢ üí∞ –î–∞—Ä–æ–º–∞–¥: {total_income:,} —Å—û–º\n\n"
        )

    await callback_query.message.answer(text, parse_mode="HTML")

PAGE_SIZE = 5  # “≤–∞—Ä —Å–∞“≥–∏—Ñ–∞–¥–∞ 5 —Ç–∞ –π—û–ª–æ–≤—á–∏

def get_passenger_keyboard(page: int, total: int) -> InlineKeyboardMarkup:
    buttons = []
    if page > 1:
        buttons.append(InlineKeyboardButton(text="‚è™ –û–ª–¥–∏–Ω–≥–∏", callback_data=f"show_passengers_page_{page - 1}"))
    if page * PAGE_SIZE < total:
        buttons.append(InlineKeyboardButton(text="‚è© –ö–µ–π–∏–Ω–≥–∏—Å–∏", callback_data=f"show_passengers_page_{page + 1}"))
    return InlineKeyboardMarkup(inline_keyboard=[buttons]) if buttons else None

@router.callback_query(F.data.startswith("show_passengers_list"))
@router.callback_query(F.data.startswith("show_passengers_page_"))
async def show_passengers_list(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in ADMINS:
        return

    # –°–∞“≥–∏—Ñ–∞ —Ä–∞“õ–∞–º–∏–Ω–∏ –∞–Ω–∏“õ–ª–∞—à
    data = callback_query.data
    if data == "show_passengers_list":
        page = 1
    else:
        try:
            page = int(data.replace("show_passengers_page_", ""))
        except ValueError:
            page = 1

    # –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ —é–∫–ª–∞—à
    status_data = load_json(USER_STATUS_PATH)
    passengers = load_passenger()

    # –¢–∞—Ä—Ç–∏–±–ª–∞—à: timestamp –±—û–π–∏—á–∞ (—ç–Ω–≥ —Å—û–Ω–≥–∏ —É–ª–∞–Ω–≥–∞–Ω–ª–∞—Ä —é“õ–æ—Ä–∏–¥–∞)
    sorted_passenger_ids = sorted(
        passengers.keys(),
        key=lambda uid: status_data.get(uid, {}).get("timestamp", 0),
        reverse=True
    )

    # –ö–µ–π–∏–Ω —Å–æ—Ä—Ç–ª–∞–Ω–≥–∞–Ω–ª–∞—Ä–¥–∞–Ω —Ä—û–π—Ö–∞—Ç –π–∏“ì–∏–ª–∞–¥–∏
    passenger_items = [(uid, passengers[uid]) for uid in sorted_passenger_ids]
    #passenger_items = list(passengers.items())
    total = len(passenger_items)
    start = (page - 1) * PAGE_SIZE
    end = start + PAGE_SIZE

    if start >= total:
        await callback_query.message.answer("‚õîÔ∏è –ë—É —Å–∞“≥–∏—Ñ–∞–¥–∞ –π—û–ª–æ–≤—á–∏–ª–∞—Ä –π—û“õ.")
        return

    text = f"<b>üßç‚Äç‚ôÇÔ∏è –ô—û–ª–æ–≤—á–∏–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏ (—Å–∞“≥–∏—Ñ–∞ {page}):</b>\n\n"

    user_statuses = load_users()

    for idx, (passenger_id, passenger_data) in enumerate(passenger_items[start:end], start + 1):
        text += await format_passenger_display(bot, passenger_id, passenger_data, idx, user_statuses)

    keyboard = get_passenger_keyboard(page, total)

    try:
        await callback_query.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    except TelegramBadRequest:
        await callback_query.answer(text, parse_mode="HTML", reply_markup=keyboard)

# –±—É–≥—É–Ω–≥–∏ timestamp–Ω–∏ “õ—û—à–∏—à —Ñ—É–Ω–∫—Ü–∏—è—Å–∏
def add_missing_timestamps():
    status_data = load_users()  #: # load_json(USER_STATUS_PATH)
    current_time = int(time.time())  # –±—É–≥—É–Ω–≥–∏ timestamp
    #current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # –°–∞–Ω–∞ —Å–∏—Ñ–∞—Ç–∏–¥–∞

    modified = False
    for user_id, user_info in status_data.items():
        if "timestamp" not in user_info:
            user_info["timestamp"] = current_time
            modified = True

    if modified:
        save_json(USER_STATUS_PATH, status_data)
        print("‚úÖ Timestamp'–ª–∞—Ä “õ—û—à–∏–ª–¥–∏.")
    else:
        print("‚ÑπÔ∏è –ë–∞—Ä—á–∞ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä–¥–∞ timestamp –±–æ—Ä —ç–∫–∞–Ω.")

async def format_passenger_display(bot, passenger_id: str, passenger_data: dict, index: int, user_statuses: dict):
    # üßæ Telegram'–¥–∞–Ω –º–∞—ä–ª—É–º–æ—Ç –æ–ª–∏—à
    try:
        user = await bot.get_chat(passenger_id)
        full_name = user.full_name
        username = f"@{user.username}" if user.username else "‚Äì"
    except TelegramForbiddenError:
        full_name = "üö´ –ê–∫–∫–∞—É–Ω—Ç —û—á–∏—Ä–∏–ª–≥–∞–Ω"
        username = "‚Äì"
    except Exception:
        full_name = "‚ùì –ù–æ–º–∞—ä–ª—É–º"
        username = "‚Äì"

    phone = passenger_data.get("phone", "‚Äì")
    bonus = passenger_data.get("bonus", 0)

    # timestamp ‚Äî user_statuses.json –æ—Ä“õ–∞–ª–∏
    status_data = user_statuses.get(str(passenger_id), {})
    timestamp = status_data.get("timestamp")
    if timestamp:
        joined_at = datetime.fromtimestamp(timestamp).strftime("%Y-%m-%d %H:%M:%S")
    else:
        joined_at = "‚Äî"

    # üßÆ “≤–∏—Å–æ–±–ª–∞—à:
    # 1 “≥–∞—Ñ—Ç–∞ = 7 –∫—É–Ω = 7 √ó 24 √ó 60 √ó 60 = 604800 —Å–µ–∫—É–Ω–¥.
    # logging.info(f"User {passenger_id} timestamp: {timestamp}")

    return (
        f"{index}.  <b>{full_name}</b>\n"
        f"üÜî  <code>{passenger_id}</code>\n"
        f"{username}\n"
        f"üìû –¢–µ–ª:  <b>{phone}</b>\n"
        f"üéÅ –ë–æ–Ω—É—Å:  <b>{bonus} —Å—û–º</b>\n"
        f"üóì –£–ª–∞–Ω–≥–∞–Ω —Å–∞–Ω–∞: <b>{joined_at}</b>\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
    )
    
@router.callback_query(lambda c: c.data in [
    "driver", "passenger", "change_user_status",
    "admin", "upload_files", "view_order", "view_order_passenger", "view_order_driver"
])
async def handle_callback(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    data = callback_query.data

    logging.info(f"Callback data: {data}")  # Debug

    if data == "driver":
        save_user_status(user_id, "driver")
        await callback_query.message.edit_text("üöò “≤–∞–π–¥–æ–≤—á–∏ —É—á—É–Ω –º–µ–Ω—é:", reply_markup=start_kb(user_id))

    elif data == "passenger":
        save_user_status(user_id, "passenger")
        await callback_query.message.edit_text("üöò –ô—û–ª–æ–≤—á–∏ —É—á—É–Ω –º–µ–Ω—é:", reply_markup=start_kb(user_id))

    elif data == "change_user_status":
        save_user_status(user_id, "new_user")  # –°—Ç–∞—Ç—É—Å–Ω–∏ "new_user" –≥–∞ “õ–∞–π—Ç–∞—Ä–∞–º–∏–∑
        #await callback_query.message.edit_reply_markup(reply_markup=None)  # –≠—Å–∫–∏ —Ç—É–≥–º–∞–ª–∞—Ä–Ω–∏ –π—û“õ “õ–∏–ª–∞–º–∏–∑
        await callback_query.message.edit_text("üìã –†–æ–ª–Ω–∏ “õ–∞–π—Ç–∞ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=start_kb(user_id))

    elif data == "admin":
        if user_id not in ADMINS:
        #if str(user_id) not in ADMINS:
            return

        stats = get_bot_statistics()  # ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        
        drivers_count = stats.get("total_drivers", 0)
        passengers_count = stats.get("total_passengers", 0)
        driver_orders = stats.get("total_orders_drivers", 0)
        passenger_orders = stats.get("total_orders_passengers", 0)
        #total_income = stats.get("total_income", 0)
        #total_users = stats.get("total_users", 0)
        #total_feedbacks = stats.get("total_feedbacks", 0)
        #total_referrals = stats.get("total_referrals", 0)
        #total_bonus = stats.get("total_bonus", 0)
        #total_invited = stats.get("total_invited", 0)

        # –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç—É–∑–∏—à
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõ† “≤–∞–π–¥–æ–≤—á–∏ —Ç–∞—Å–¥–∏“ì–∏", callback_data="approve_panel")],
            [InlineKeyboardButton(text="üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –±—É—é—Ä—Ç–º–∞–ª–∞—Ä–∏", callback_data="view_delivery_orders")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistika")],
            [InlineKeyboardButton(text=f"üöò “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏ ({drivers_count})", callback_data="show_drivers_list")],
            [InlineKeyboardButton(text=f"üöó “≤–∞–π–¥–æ–≤—á–∏ –æ—Ä–¥–µ—Ä–ª–∞—Ä–∏ ({driver_orders})", callback_data="view_order_driver")],
            [InlineKeyboardButton(text=f"üë• –ô—û–ª–æ–≤—á–∏–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏ ({passengers_count})", callback_data="show_passengers_list")],
            [InlineKeyboardButton(text=f"üßç‚Äç‚ôÇÔ∏è –ô—û–ª–æ–≤—á–∏ –æ—Ä–¥–µ—Ä–ª–∞—Ä–∏ ({passenger_orders})", callback_data="view_order_passenger")],
            [InlineKeyboardButton(text="üìÅ –§–∞–π–ª–ª–∞—Ä–Ω–∏ —é–∫–ª–∞—à", callback_data="upload_files")]
        ])
    
        await callback_query.message.edit_text("üëÆ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª!", reply_markup=keyboard, parse_mode="Markdown")

    elif data == "view_order":
        if user_id not in ADMINS:
            return
        # –ê–¥–º–∏–Ω —É—á—É–Ω –æ—Ö–∏—Ä–≥–∏ –æ—Ä–¥–µ—Ä–ª–∞—Ä–Ω–∏ –∫—û—Ä—Å–∞—Ç–∏—à
        await show_recent_orders(callback_query.message, user_type="driver")  # —ë–∫–∏ "passenger" –∫–µ—Ä–∞–∫ –±—û–ª—Å–∞
        #await show_recent_orders(callback_query.message, user_type="passenger")  # –ô—û–ª–æ–≤—á–∏–ª–∞—Ä–Ω–∏–Ω–≥ –æ—Ä–¥–µ—Ä–ª–∞—Ä–∏–Ω–∏ –∫—û—Ä—Å–∞—Ç–∏—à
        # –ê–≥–∞—Ä “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä–Ω–∏–Ω–≥ –æ—Ä–¥–µ—Ä–ª–∞—Ä–∏–Ω–∏ –∫—û—Ä—Å–∞—Ç–∏—à –∫–µ—Ä–∞–∫ –±—û–ª—Å–∞, "driver"–Ω–∏ —û—Ä–Ω–∞—Ç–∏–Ω–≥:
        # await show_recent_orders(callback_query.message, user_type="driver")

    elif data == "view_order_passenger":
        if user_id not in ADMINS:
            return
        # –ô—û–ª–æ–≤—á–∏ –æ—Ä–¥–µ—Ä–ª–∞—Ä–∏–Ω–∏ –∫—û—Ä—Å–∞—Ç–∏—à
        await show_recent_orders(callback_query.message, user_type="passenger")

    elif data == "view_order_driver":
        if user_id not in ADMINS:
            return
        # “≤–∞–π–¥–æ–≤—á–∏ –æ—Ä–¥–µ—Ä–ª–∞—Ä–∏–Ω–∏ –∫—û—Ä—Å–∞—Ç–∏—à
        await show_recent_orders(callback_query.message, user_type="driver")

    elif data == "upload_files":  # –ê–≥–∞—Ä "–§–∞–π–ª–ª–∞—Ä–Ω–∏ —é–∫–ª–∞—à" —Ç—É–≥–º–∞—Å–∏ –±–æ—Å–∏–ª—Å–∞
        await send_json_files(callback_query.message)

    else:
        logging.warning(f"handlers/start.py –ù–æ–º–∞—ä–ª—É–º callback data: {data}")

    # –ë—É –µ—Ä–¥–∞ "–ú–∞—Ç–Ω —ë–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —û–∑–≥–∞—Ä–º–∞–≥–∞–Ω" —Ö–∞—Ç–æ—Å–∏ –±—û–ª–∏—à–∏ –º—É–º–∫–∏–Ω, —à—É–Ω–≥–∞ –∫—û—Ä–∞, 
    # –±—É –∂–∞–≤–æ–±–Ω–∏ –æ–ª–∏—à–≥–∞ —É—Ä–∏–Ω–∏—à–Ω–∏–Ω–≥ —û–∑–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–≥–∞–Ω.
    try:
        await callback_query.answer("–°–∏–∑ —Ç–∞–Ω–ª–∞–¥–∏–Ω–≥–∏–∑: " + data)
    except TelegramBadRequest:
        pass  # "Message is not modified" —ë–∫–∏ —à—É–Ω–≥–∞ —û—Ö—à–∞—à —Ö–∞—Ç–æ —á–∏“õ—Å–∞, –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–∞–¥–∏

#@router.message(Command("admin"))
#async def admin_command(message: Message, state: FSMContext, bot: Bot):
#    user_id = message.from_user.id
#    if str(user_id) not in ADMINS:
#            return
#    await message.answer("üëÆ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª!", reply_markup=start_kb(user_id))
#    #await message.edit_text("üëÆ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª!", reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(lambda c: c.data == "admin_back_to_panel")
async def back_to_admin_panel(callback_query: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõ† “≤–∞–π–¥–æ–≤—á–∏ —Ç–∞—Å–¥–∏“ì–∏", callback_data="approve_panel")],
        [InlineKeyboardButton(text="üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –±—É—é—Ä—Ç–º–∞–ª–∞—Ä–∏", callback_data="view_delivery_orders")],
        [InlineKeyboardButton(text="üìã –ë—É—é—Ä—Ç–º–∞–ª–∞—Ä", callback_data="view_order")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistika")],
        [InlineKeyboardButton(text="üìÖ –ë—É–≥—É–Ω–≥–∏ –æ—Ä–¥–µ—Ä–ª–∞—Ä", callback_data="today_orders")],
        [InlineKeyboardButton(text="üöò “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏", callback_data="show_drivers_list")],
        [InlineKeyboardButton(text="üöó “≤–∞–π–¥–æ–≤—á–∏ –æ—Ä–¥–µ—Ä–ª–∞—Ä–∏", callback_data="view_order_driver")],
        [InlineKeyboardButton(text="üë• –ô—û–ª–æ–≤—á–∏–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏", callback_data="show_passengers_list")],
        [InlineKeyboardButton(text="üßç‚Äç‚ôÇÔ∏è –ô—û–ª–æ–≤—á–∏ –æ—Ä–¥–µ—Ä–ª–∞—Ä–∏", callback_data="view_order_passenger")],
        [InlineKeyboardButton(text="üìÅ –§–∞–π–ª–ª–∞—Ä–Ω–∏ —é–∫–ª–∞—à", callback_data="upload_files")]
    ])

    await callback_query.message.edit_text("üëÆ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª!", reply_markup=keyboard)

@router.message(Command("change_status"))
@router.message(Command("change_role"))  # –∏–∫–∫–∏—Ç–∞ –≤–∞—Ä–∏–∞–Ω—Ç
async def change_status_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    save_user_status(user_id, "new_user")  # —Å—Ç–∞—Ç—É—Å–Ω–∏ “õ–∞–π—Ç–∞ —Ç–∏–∫–ª–∞–π–º–∏–∑
    await message.answer("üìã –†–æ–ª–Ω–∏ “õ–∞–π—Ç–∞ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=start_kb(user_id))

from aiogram.types.input_file import FSInputFile

async def send_json_files(message):
    try:
        # –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä–Ω–∏ `.json` —Ñ–∞–π–ª–∏–¥–∞–Ω —é–∫–ª–∞—à
        file = FSInputFile(USER_STATUS_PATH)
        await message.answer_document(file, caption="–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏")

        # “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä–Ω–∏ `.json` —Ñ–∞–π–ª–∏–¥–∞–Ω —é–∫–ª–∞—à
        file = FSInputFile(DRIVER_PATH)
        await message.answer_document(file, caption="“≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏")

        # –ü–∞—Å–∞–∂–∏—Ä–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏
        file = FSInputFile(PASSENGER_PATH)
        await message.answer_document(file, caption="–ü–∞—Å–∞–∂–∏—Ä–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏")

    except Exception as e:
        logging.error(f"–§–∞–π–ª–ª–∞—Ä–Ω–∏ —é–∫–ª–∞—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫: {e}")
        await message.answer("–§–∞–π–ª–ª–∞—Ä–Ω–∏ —é–∫–ª–∞—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏.")


@router.callback_query(lambda c: c.data == "today_orders")
async def show_today_orders(callback: CallbackQuery):
    try:
        today_str = datetime.now().strftime("%Y-%m-%d")  # 2025-05-05 –∫–∞–±–∏ —Ñ–æ—Ä–º–∞—Ç–¥–∞
        
        text = "üìÖ <b>–ë—É–≥—É–Ω–≥–∏ –æ—Ä–¥–µ—Ä–ª–∞—Ä</b>\n\n"

        # –ô—û–ª–æ–≤—á–∏ –æ—Ä–¥–µ—Ä–ª–∞—Ä–∏
        with open(PASSENGER_PATH, "r", encoding="utf-8") as f:
            passengers = json.load(f)
        for user_id, user_data in passengers.items():
            order = user_data.get("order")
            if order and order.get("date") == today_str and order.get("status") != "done":
                text += f"üßç‚Äç‚ôÇÔ∏è <b>–ô—û–ª–æ–≤—á–∏:</b> {user_data.get('phone', '–ù–æ–º–∞—ä–ª—É–º')}\n"
                text += f"üìç {order.get('from_district')} ‚ûù {order.get('to_district')}\n"
                text += f"‚è∞ {order.get('time')} | üí∞ {order.get('price', '‚Äî')} —Å—û–º\n\n"

        # “≤–∞–π–¥–æ–≤—á–∏ –æ—Ä–¥–µ—Ä–ª–∞—Ä–∏
        with open(DRIVER_PATH, "r", encoding="utf-8") as f:
            drivers = json.load(f)
        for user_id, user_data in drivers.items():
            order = user_data.get("order")
            if order and order.get("date") == today_str and order.get("status") != "done":
                profile = user_data.get("profile", {})
                text += f"üöó <b>“≤–∞–π–¥–æ–≤—á–∏:</b> {profile.get('name', '–ù–æ–º–∞—ä–ª—É–º')}\n"
                text += f"üìç {order.get('from_district')} ‚ûù {order.get('to_district')}\n"
                text += f"‚è∞ {order.get('time')} | üöò {profile.get('car_model', '')} ({profile.get('car_number', '')})\n\n"

        if text.strip() == "üìÖ <b>–ë—É–≥—É–Ω–≥–∏ –æ—Ä–¥–µ—Ä–ª–∞—Ä</b>":
            text = "‚ùå –ë—É–≥—É–Ω–≥–∏ –æ—Ä–¥–µ—Ä–ª–∞—Ä —Ç–æ–ø–∏–ª–º–∞–¥–∏."

        await callback.message.edit_text(text, parse_mode="HTML")

    except Exception as e:
        print(f"‚ùå –ë—É–≥—É–Ω–≥–∏ –æ—Ä–¥–µ—Ä–ª–∞—Ä —Ö–∞—Ç–æ: {e}")
        await callback.answer("‚ùå –•–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏.")

@router.callback_query(lambda c: c.data.startswith("order_details_"))
async def show_order_details(callback: CallbackQuery):
    try:
        _, user_type, user_id, order_number = callback.data.split("_", 3)
        user_id = str(user_id)
        order_number = int(order_number)

        file_path = DRIVER_PATH if user_type == "driver" else PASSENGER_PATH
        with open(file_path, "r", encoding="utf-8") as file:
            data = json.load(file)

        user = data.get(user_id)
        if not user:
            await callback.answer("‚ùå –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —Ç–æ–ø–∏–ª–º–∞–¥–∏.")
            return

        order = user.get("order")
        if not order or order.get("order_number") != order_number:
            await callback.answer("‚ùå –û—Ä–¥–µ—Ä —Ç–æ–ø–∏–ª–º–∞–¥–∏ —ë–∫–∏ —è–Ω–≥–∏–ª–∞–Ω–≥–∞–Ω.")
            return

        profile = user.get("profile", {})
        phone = user.get("phone", "–ù–æ–º–∞—ä–ª—É–º")
        name = profile.get("name") if user_type == "driver" else phone  # –ô—û–ª–æ–≤—á–∏–¥–∞ profile –π—û“õ

        text = f"üì¶ <b>–û—Ä–¥–µ—Ä ‚Ññ{order_number}</b>\n"
        text += f"üë§ <b>–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏:</b> {name}\n"
        text += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
        text += f"üßë‚Äçüíº <b>–¢—É—Ä–∏:</b> {user_type.capitalize()}\n\n"

        text += (
            f"üìç <b>–ô—û–Ω–∞–ª–∏—à:</b> {order.get('from_region', '')}, {order.get('from_district', '')} ‚ûù "
            f"{order.get('to_region', '')}, {order.get('to_district', '')}\n"
            f"üìÖ <b>–°–∞–Ω–∞:</b> {order.get('date', '‚Äî')} ‚è∞ {order.get('time', '‚Äî')}\n"
            f"üí∞ <b>–ù–∞—Ä—Ö:</b> {order.get('price', '‚Äî')} —Å—û–º\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {order.get('status', '‚Äî')}\n\n"
        )

        timestamps = order.get("status_timestamps", {})
        if timestamps:
            text += "üïì <b>–í–∞“õ—Ç–ª–∞—Ä:</b>\n"
            for key, value in timestamps.items():
                text += f"‚ñ™Ô∏è {key.capitalize()}: {value}\n"

        back_button = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –û—Ä“õ–∞–≥–∞", callback_data=f"back_to_orders_{user_type}")]
        ])

        await callback.message.edit_text(text, reply_markup=back_button, parse_mode="HTML")

    except Exception as e:
        print(f"‚ùå –ü–∞–¥—Ä–æ–±–Ω–æ —Ö–∞—Ç–æ–ª–∏–≥–∏: {e}")
        await callback.answer("‚ùå –•–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏.")

@router.callback_query(lambda c: c.data.startswith("back_to_orders_"))
async def back_to_orders(callback: CallbackQuery):
    user_type = callback.data.split("_")[-1]
    await show_recent_orders(callback.message, user_type=user_type)

async def show_recent_orders(message, user_type):
    try:
        if user_type == "passenger":
            file_path = PASSENGER_PATH
        elif user_type == "driver":
            file_path = DRIVER_PATH
        else:
            await message.answer("‚ùå –ù–æ—Ç—û“ì—Ä–∏ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —Ç—É—Ä–∏.")
            return

        with open(file_path, 'r', encoding='utf-8') as file:
            users_data = json.load(file)

        orders_text = "üìù –û—Ä–¥–µ—Ä–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏:\n\n"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for user_id, user_data in users_data.items():
            order = user_data.get("order", {})
            if not order or order.get("status") == "done":
                continue

            if user_type == "passenger":
                phone = user_data.get("phone", "–ù–æ–º–∞—ä–ª—É–º")
                orders_text += (
                    f"üßç‚Äç‚ôÇÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                    f"üìç –ô—û–Ω–∞–ª–∏—à: {order.get('from_district')} ‚ûù {order.get('to_district')}\n"
                    f"üí∞ –ù–∞—Ä—Ö: {order.get('price', '–ù–æ–º–∞—ä–ª—É–º')} —Å—û–º\n"
                    f"üïì –í–∞“õ—Ç: {order.get('date')} {order.get('time')}\n\n"
                )
            elif user_type == "driver":
                profile = user_data.get("profile", {})
                name = profile.get("name", "–ù–æ–º–∞—ä–ª—É–º")
                orders_text += (
                    f"üöó “≤–∞–π–¥–æ–≤—á–∏: {name}\n"
                    f"üìç –ô—û–Ω–∞–ª–∏—à: {order.get('from_district')} ‚ûù {order.get('to_district')}\n"
                    f"üìÖ –°–∞–Ω–∞: {order.get('date')} {order.get('time')}\n\n"
                )

            # –û—Ä–¥–µ—Ä —Ç–∞—Ñ—Å–∏–ª–æ—Ç–∏ —Ç—É–≥–º–∞—Å–∏
            #order_number = order.get('order_number')
            #if order_number is None:
            #    continue

            #keyboard.inline_keyboard.append([
            #    InlineKeyboardButton(
            #        text=f"üì¶ –û—Ä–¥–µ—Ä ‚Ññ{order_number}",
            #        callback_data=f"order_details_{user_type}_{user_id}_{order.get('order_number')}"
            #    )
            #])

        if orders_text == "üìù –û—Ä–¥–µ—Ä–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏:\n\n":
            orders_text = "‚ùå –û—Ä–¥–µ—Ä–ª–∞—Ä —Ç–æ–ø–∏–ª–º–∞–¥–∏."
            keyboard = None

        await message.answer(orders_text, reply_markup=keyboard)

    except Exception as e:
        print(f"‚ùå –•–∞—Ç–æ–ª–∏–∫: {e}")
        await message.answer("‚ùå –û—Ä–¥–µ—Ä–ª–∞—Ä –∫—û—Ä—Å–∞—Ç–∏–ª–º–∞–¥–∏.")


def get_bot_statistics():
    try:
        # “≤–∞–º–º–∞ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä–Ω–∏ —é–∫–ª–∞–π–º–∏–∑
        users = load_users()
        
        with open(DRIVER_PATH, "r", encoding="utf-8") as f:
            drivers = json.load(f)
        with open(PASSENGER_PATH, "r", encoding="utf-8") as f:
            passengers = json.load(f)

        total_drivers = len(drivers)
        total_passengers = len(passengers)

        total_users = len(users)

        # –Ø–Ω–≥–∏ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä —Å–æ–Ω–∏–Ω–∏ “≥–∏—Å–æ–±–ª–∞—à
        new_users_count = sum(1 for u in users.values() if u.get("status") == "new_user")

        total_orders_drivers = 0
        active_orders_drivers = 0
        for d in drivers.values():
            order = d.get("order")
            if order:
                total_orders_drivers += 1
                if order.get("status") != "done":
                    active_orders_drivers += 1

        total_orders_passengers = 0
        active_orders_passengers = 0
        for p in passengers.values():
            order = p.get("order")
            if order:
                total_orders_passengers += 1
                if order.get("status") != "done":
                    active_orders_passengers += 1

        total_orders = total_orders_drivers + total_orders_passengers
        active_orders = active_orders_drivers + active_orders_passengers

        return {
            "total_users": total_users,
            "total_orders": total_orders,
            "active_orders": active_orders,
            "total_drivers": total_drivers,
            "total_passengers": total_passengers,
            "total_orders_drivers": total_orders_drivers,
            "active_orders_drivers": active_orders_drivers,
            "total_orders_passengers": total_orders_passengers,
            "active_orders_passengers": active_orders_passengers,
            "new_users": new_users_count
        }

    except Exception as e:
        print(f"‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö–∞—Ç–æ: {e}")
        return {
            "total_users": 0,
            "total_orders": 0,
            "active_orders": 0,
            "total_drivers": 0,
            "total_passengers": 0,
            "total_orders_drivers": 0,
            "active_orders_drivers": 0,
            "total_orders_passengers": 0,
            "active_orders_passengers": 0,
            "new_users": 0
        }

# "üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@router.callback_query(F.data == "statistika")
async def show_statistics(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    # üì• –ë–∞—Ä—á–∞ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ —é–∫–ª–∞—à
    stats = get_bot_statistics()
    users = load_users()
    #file_path = create_statistics_chart(stats)

    # üìä –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —Ç—É—Ä–ª–∞—Ä–∏ –±—û–π–∏—á–∞ “≥–∏—Å–æ–±–ª–∞—à
    new_users = sum(1 for u in users.values() if u.get("status") == "new_user")
    total_drivers = sum(1 for u in users.values() if u.get("status") == "driver")
    total_passengers = sum(1 for u in users.values() if u.get("status") == "passenger")


    text = (
        "<b>üìä –ë–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Å–∏</b>\n\n"
        f"üë§ <b>–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä —Å–æ–Ω–∏:</b> {stats['total_users']} —Ç–∞\n\n"

        f"üë§ <b>–Ø–Ω–≥–∏ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä:</b> {new_users} —Ç–∞\n"
        f"üöó “≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä: {total_drivers} —Ç–∞\n"
        f"üßç‚Äç‚ôÇÔ∏è –ô—û–ª–æ–≤—á–∏–ª–∞—Ä: {total_passengers} —Ç–∞\n\n"

        f"üìÖ <b>–ë—É—é—Ä—Ç–º–∞–ª–∞—Ä —Å–æ–Ω–∏:</b> {stats['total_orders']} —Ç–∞\n"
        f"‚úÖ –Ø–∫—É–Ω–ª–∞–Ω–≥–∞–Ω: {stats['total_orders'] - stats['active_orders']} —Ç–∞\n"
        f"‚è≥ –ñ–æ—Ä–∏–π: {stats['active_orders']} —Ç–∞\n\n"
        
        f"üöó <b>“≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä:</b> {stats['total_drivers']} —Ç–∞\n"
        f"üì¶ –ë—É—é—Ä—Ç–º–∞–ª–∞—Ä: {stats['total_orders_drivers']} —Ç–∞\n"
        f"‚è≥ –ñ–∞—Ä–∞—ë–Ω–¥–∞: {stats['active_orders_drivers']} —Ç–∞\n\n"
        
        f"üßç‚Äç‚ôÇÔ∏è <b>–ô—û–ª–æ–≤—á–∏–ª–∞—Ä:</b> {stats['total_passengers']} —Ç–∞\n"
        f"üì¶ –ë—É—é—Ä—Ç–º–∞–ª–∞—Ä: {stats['total_orders_passengers']} —Ç–∞\n"
        f"‚è≥ –ñ–∞—Ä–∞—ë–Ω–¥–∞: {stats['active_orders_passengers']} —Ç–∞"
    )

    await callback_query.message.answer(text, parse_mode="HTML")

    # üìà –î–∏–∞–≥—Ä–∞–º–º–∞–Ω–∏ —é–±–æ—Ä–∏—à
    #try:
    #    file_path = create_statistics_chart(stats)
    #    with open(file_path, "rb") as photo:
    #        await callback_query.message.answer_photo(photo, caption="üìä –î–∏–∞–≥—Ä–∞–º–º–∞")
    #except Exception as e:
    #    logging.error(f"–î–∏–∞–≥—Ä–∞–º–º–∞ —è—Ä–∞—Ç–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫: {e}")
    #if file_path:
    #    chart = FSInputFile(file_path)
    #    await bot.send_photo(callback_query.from_user.id, photo=chart, caption="üìä –î–∏–∞–≥—Ä–∞–º–º–∞")

def create_statistics_chart(stats):
    try:
        labels = ['–ë—É—é—Ä—Ç–º–∞–ª–∞—Ä', '–ô—û–ª–æ–≤—á–∏–ª–∞—Ä', '“≤–∞–π–¥–æ–≤—á–∏–ª–∞—Ä']
        values = [stats['total_orders'], stats['total_passengers'], stats['total_drivers']]
        colors = ['#4caf50', '#2196f3', '#ff9800']

        plt.figure(figsize=(7, 4))
        bars = plt.bar(labels, values, color=colors)
        plt.title("–ë–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Å–∏", fontsize=14)
        plt.ylabel("–°–æ–Ω–∏")

        # –ë–∞—Ä —É—Å—Ç–∏–¥–∞–Ω —Ä–∞“õ–∞–º–ª–∞—Ä–Ω–∏ –∫—û—Ä—Å–∞—Ç–∏—à
        for bar in bars:
            yval = bar.get_height()
            plt.text(bar.get_x() + bar.get_width()/2.0, yval + 0.5, int(yval), ha='center', va='bottom')

        plt.tight_layout()
        file_path = "chart.png"
        plt.savefig(file_path)
        plt.close()
        return file_path
    except Exception as e:
        logging.error(f"–î–∏–∞–≥—Ä–∞–º–º–∞ —è—Ä–∞—Ç–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫: {e}")
        return None
